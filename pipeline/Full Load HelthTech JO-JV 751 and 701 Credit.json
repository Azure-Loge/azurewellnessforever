{
	"name": "Full Load HelthTech JO-JV 751 and 701 Credit",
	"properties": {
		"activities": [
			{
				"name": "Copy data HelthTech JO-JV 751 and 701 Credit",
				"type": "Copy",
				"dependsOn": [],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "SybaseSource",
						"query": "Select ( cogs.c_br_code ) as c_br_code,\n\t\t( cogs.c_year ) as c_year,   \n\t\t( cogs.c_prefix ) as c_prefix,   \n\t\t( cogs.n_tran_no ) as n_tran_no,   \n\t\t( cogs.c_act_code ) as c_act_code,   \n\t\t( cogs.d_date ) as d_date,   \n\t\tSUM( cogs.n_amount ) as n_amount,   \n\t\t( cogs.c_opp_act_code ) as c_opp_act_code,   \n\t\t( cogs.c_ref_br_code ) as c_ref_br_code,\n\t\t( cogs.c_ref_no ) as c_ref_no,   \n\t\t( cogs.d_chq_date) as d_chq_date,   \n\t\t( cogs.c_remark ) as c_remark,   \n\t\t( cogs.c_act_name ) as c_act_name,   \n\t\t( cogs.c_opp_act_name ) as c_opp_act_name,\n\t\t( cogs.c_add_1 ) as c_add_1,\n\t\t( cogs.c_add_2 ) as c_add_2, \n\t\t( cogs.c_add_3 ) as c_add_3,\n\t\t( cogs.c_city ) as c_city,\n\t\t( cogs.n_ref_srno ) as n_ref_srno,\n\t\t( cogs.n_order_no ) as n_order_no,\n\t\t( cogs.recon_dt) as recon_dt,\n\t\t( if recon_dt is null then 0 else 1 endif ) as chq_pass,\n\t\t( cogs.multi_act_name) as multi_act_name,\n\t\tisnull( case when n_amount  > 0 then n_amount else 0 end,0) as Debit,\n\t\tisnull( case when n_amount  < 0 then n_amount else 0 end,0) as credit\nFrom\n(\n\tSELECT ( ledger.c_br_code ) as c_br_code,\n\t\t\t( ledger.c_year ) as c_year,   \n\t\t\t( ledger.c_prefix ) as c_prefix,   \n\t\t\t( ledger.n_tran_no ) as n_tran_no,   \n\t\t\t( ledger.c_act_code ) as c_act_code,   \n\t\t\t( ledger.d_date ) as d_date,   \n\t\t\t( ledger.n_amount ) as n_amount,   \n\t\t\t( ledger.c_opp_act_code ) as c_opp_act_code,   \n\t\t\t( ledger.c_ref_br_code ) as c_ref_br_code,\n\t\t\t( settle_mst_header.c_ref_no ) as c_ref_no,   \n\t\t\tdate(settle_mst_header.d_ref_date) as d_chq_date,   \n\t\t\t( settle_mst_header.c_remark ) as c_remark,   \n\t\t\t( act_mst_a.c_name ) as c_act_name,   \n\t\t\t( act_mst_b.c_name ) as c_opp_act_name,\n\t\t\t( act_mst_a.c_add_1 ) as c_add_1,\n\t\t\t( act_mst_a.c_add_2 ) as c_add_2, \n\t\t\t( act_mst_a.c_add_3 ) as c_add_3,\n\t\t\t( act_mst_a.c_city ) as c_city,\n\t\t\t( grn_mst.n_ref_srno ) as n_ref_srno,\n\t\t\t( gdn_mst.n_order_no ) as n_order_no,\n\t\t\t(d_reconcile_date) as recon_dt,\n\t\t\t(if recon_dt is null then 0 else 1 endif) as chq_pass,\n\t\t\tif ledger.c_opp_act_code='~~~~~~~~~~~~' then \n\t\t\t\t(select list(ac.c_name+' : '+string(n_amount),char(13)) from ledger ll , act_mst ac  where ac.c_code=ll.c_act_code and\n\t\t\t\t\t\tll.c_br_code=ledger.c_br_code and ll.c_year=ledger.c_year\n\t\t\t\t\t\tand ll.c_prefix=ledger.c_prefix and ll.n_tran_no=ledger.n_tran_no and \n\t\t\t\t\t\t(ledger.n_amount<0 and ll.n_amount>0 or ledger.n_amount>0 and ll.n_amount<0))\n\t\t\telse '' endif as multi_act_name\n    FROM ledger\n\t\t\t\tinner join (select c_br_code as brcode from branch_group_det where length('701') = 6 and c_code = '701' and  branch_group_det.n_cancel_flag = 0 \n            union \n            select c_code from act_mst where length('701')<> 6 and c_code >= (if '701' = 'zzz' then '701' else '701' endif ) and ( c_code <= '701' ) \n            ) brlist on brlist.brcode=ledger.c_ref_br_code  \n\t\t\tleft outer join settle_mst_header  on  ledger.c_br_code = settle_mst_header.c_br_code  and \n\t\t\t ledger.c_year = settle_mst_header.c_year  and \n          ledger.c_prefix = settle_mst_header.c_prefix  and \n          ledger.n_tran_no = settle_mst_header.n_srno  \n          left outer join grn_mst on  ledger.c_br_code = grn_mst.c_br_code  and \n\t\t\t\tledger.c_year = grn_mst.c_year  and \n\t\t\t\tledger.c_prefix = grn_mst.c_prefix  and \n\t\t\t\tledger.n_tran_no = grn_mst.n_srno\n\t\t\tleft outer join gdn_mst  on  ledger.c_br_code = gdn_mst.c_br_code  and \n\t\t\t\tledger.c_year = gdn_mst.c_year  and \n\t\t\t\tledger.c_prefix = gdn_mst.c_prefix  and \n\t\t\t\tledger.n_tran_no = gdn_mst.n_srno\n\t\t\t\tleft outer join reconcile_mst  on  ledger.c_br_code= reconcile_mst.c_br_code and ledger.c_year = reconcile_mst.c_year and\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  ledger.c_prefix = reconcile_mst.c_prefix and  ledger.n_tran_no = reconcile_mst.n_srno, \n          act_mst act_mst_a,   \n         act_mst act_mst_b  \n   WHERE \n         ( act_mst_a.c_code = ledger.c_act_code ) and \n         ( act_mst_b.c_code = ledger.c_opp_act_code ) and\t\n         ( ( ledger.d_date >= '2021-10-01' ) and\t\n         ( ledger.d_date <= getDate() ) and \n         ( ledger.c_act_code >= 'GC793' ) and \n         ( ledger.c_act_code <= 'GC793' )   and\n\t\t\t( ledger.n_amount <> 0) )\n\tUnion All\n\t SELECT ( ledger.c_br_code ) as c_br_code,\n\t\t\t( ledger.c_year ) as c_year,   \n\t\t\t( ledger.c_prefix ) as c_prefix,   \n\t\t\t( ledger.n_tran_no ) as n_tran_no,   \n\t\t\t( ledger.c_act_code ) as c_act_code,   \n\t\t\t( ledger.d_date ) as d_date,   \n\t\t\t( ledger.n_amount ) as n_amount,   \n\t\t\t( ledger.c_opp_act_code ) as c_opp_act_code,   \n\t\t\t( ledger.c_ref_br_code ) as c_ref_br_code,\n\t\t\t( settle_mst_header.c_ref_no ) as c_ref_no,   \n\t\t\tdate(settle_mst_header.d_ref_date) as d_chq_date,   \n\t\t\t( settle_mst_header.c_remark ) as c_remark,   \n\t\t\t( act_mst_a.c_name ) as c_act_name,   \n\t\t\t( act_mst_b.c_name ) as c_opp_act_name,\n\t\t\t( act_mst_a.c_add_1 ) as c_add_1,\n\t\t\t( act_mst_a.c_add_2 ) as c_add_2, \n\t\t\t( act_mst_a.c_add_3 ) as c_add_3,\n\t\t\t( act_mst_a.c_city ) as c_city,\n\t\t\t( grn_mst.n_ref_srno ) as n_ref_srno,\n\t\t\t( gdn_mst.n_order_no ) as n_order_no,\n\t\t\t(d_reconcile_date) as recon_dt,\n\t\t\t(if recon_dt is null then 0 else 1 endif) as chq_pass,\n\t\t\tif ledger.c_opp_act_code='~~~~~~~~~~~~' then \n\t\t\t\t(select list(ac.c_name+' : '+string(n_amount),char(13)) from ledger ll , act_mst ac  where ac.c_code=ll.c_act_code and\n\t\t\t\t\t\tll.c_br_code=ledger.c_br_code and ll.c_year=ledger.c_year\n\t\t\t\t\t\tand ll.c_prefix=ledger.c_prefix and ll.n_tran_no=ledger.n_tran_no and \n\t\t\t\t\t\t(ledger.n_amount<0 and ll.n_amount>0 or ledger.n_amount>0 and ll.n_amount<0))\n\t\t\telse '' endif as multi_act_name\n    FROM cogs_ledger as ledger\n\t\t\t\tinner join (select c_br_code as brcode from branch_group_det where length('701') = 6 and c_code = '701' and  branch_group_det.n_cancel_flag = 0 \n            union \n            select c_code from act_mst where length('701')<> 6 and c_code >= (if '701' = 'zzz' then '701' else '701' endif ) and ( c_code <= '701' ) \n            ) brlist on brlist.brcode=ledger.c_ref_br_code  \n\t\t\tleft outer join settle_mst_header  on  ledger.c_br_code = settle_mst_header.c_br_code  and \n\t\t\t ledger.c_year = settle_mst_header.c_year  and \n          ledger.c_prefix = settle_mst_header.c_prefix  and \n          ledger.n_tran_no = settle_mst_header.n_srno  \n          left outer join grn_mst on  ledger.c_br_code = grn_mst.c_br_code  and \n\t\t\t\tledger.c_year = grn_mst.c_year  and \n\t\t\t\tledger.c_prefix = grn_mst.c_prefix  and \n\t\t\t\tledger.n_tran_no = grn_mst.n_srno\n\t\t\tleft outer join gdn_mst  on  ledger.c_br_code = gdn_mst.c_br_code  and \n\t\t\t\tledger.c_year = gdn_mst.c_year  and \n\t\t\t\tledger.c_prefix = gdn_mst.c_prefix  and \n\t\t\t\tledger.n_tran_no = gdn_mst.n_srno\n\t\t\t\tleft outer join reconcile_mst  on  ledger.c_br_code= reconcile_mst.c_br_code and ledger.c_year = reconcile_mst.c_year and\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  ledger.c_prefix = reconcile_mst.c_prefix and  ledger.n_tran_no = reconcile_mst.n_srno, \n          act_mst act_mst_a,   \n         act_mst act_mst_b  \n   WHERE \n         ( act_mst_a.c_code = ledger.c_act_code ) and \n         ( act_mst_b.c_code = ledger.c_opp_act_code ) and\t\n         ( ( ledger.d_date >= '2021-10-01' ) and\t\n         ( ledger.d_date <= getDate() ) and \n         ( ledger.c_act_code >= 'GC793' ) and \n         ( ledger.c_act_code <= 'GC793' )   and\n\t\t\t( ledger.n_amount <> 0) ) --and :li_cogs =1\n) as cogs \nGroup By c_br_code,c_year,c_prefix,n_tran_no,c_act_code,d_date,c_opp_act_code,c_ref_br_code,c_ref_no,   \n\t\td_chq_date,c_remark,c_act_name,c_opp_act_name,c_add_1,c_add_2,c_add_3,c_city,n_ref_srno,\n\t\tn_order_no,recon_dt,multi_act_name\nUNION   ALL\n  SELECT ('') as c_br_code,\n\t\t\t('00') as c_year,   \n         ('OP') as c_prefix,   \n         ( 0 ) as c_tran_no,   \n         ( ledger.c_act_code ) as c_act_code,   \n         ( date('2021-10-21')) as d_date,   \n         sum(ledger.n_amount) as n_amount,   \n         ( '' ) as c_opp_act_code,   \n         ( '' ) as c_ref_br_code,   \n         ( '' ) as c_ref_no,   \n         date('2021-10-21') as d_chq_date,   \n         ( '' ) as c_remark,   \n         ( act_mst.c_name ) as c_act_name,   \n         ( 'Opening Balance' ) as c_opp_act_name,\n\t\t\t( act_mst.c_add_1 )  as c_add_1,\n\t\t\t( act_mst.c_add_2 )  as c_add_2, \n\t\t\t( act_mst.c_add_3 )  as c_add_3,\n\t\t\t( act_mst.c_city ) as c_city,\n\t\t\t(0) as n_ref_srno,\n\t\t\t(0) as n_order_no,\n\t\t\t( null )  as recon_dt,\n\t\t\t( 0 )  \tas chq_pass,\n\t\t\t( '' ) as multi_act_name\t,\n\t\tisnull( case when n_amount  > 0 then n_amount else 0 end,0) as Debit,\n\t\tisnull( case when n_amount  < 0 then n_amount else 0 end,0) as credit\n    FROM dba.ledger\n\t\t\t\tinner join (select c_br_code as brcode from dba.branch_group_det where length('701') = 6 and c_code = '701' and  branch_group_det.n_cancel_flag = 0 \n            union \n            select c_code from dba.act_mst where length('701')<> 6 and c_code >= (if '701' = 'zzz' then '701' else '701' endif ) and ( c_code <= '701' ) \n            ) brlist on brlist.brcode=ledger.c_ref_br_code,  \n         act_mst  \n   WHERE ( act_mst.c_code = ledger.c_act_code ) and  \n         ( ( ledger.d_date <= getDate() ) and\t\n         ( ledger.c_act_code >= 'GC793' ) and\t\n         ( ledger.c_act_code <= 'GC793' ) )   \nGROUP BY c_act_code,c_act_name,c_add_1,c_add_2,c_add_3,c_city\n\n\nUNION\n\n\nSelect ( cogs.c_br_code ) as c_br_code,\n\t\t( cogs.c_year ) as c_year,   \n\t\t( cogs.c_prefix ) as c_prefix,   \n\t\t( cogs.n_tran_no ) as n_tran_no,   \n\t\t( cogs.c_act_code ) as c_act_code,   \n\t\t( cogs.d_date ) as d_date,   \n\t\tSUM( cogs.n_amount ) as n_amount,   \n\t\t( cogs.c_opp_act_code ) as c_opp_act_code,   \n\t\t( cogs.c_ref_br_code ) as c_ref_br_code,\n\t\t( cogs.c_ref_no ) as c_ref_no,   \n\t\t( cogs.d_chq_date) as d_chq_date,   \n\t\t( cogs.c_remark ) as c_remark,   \n\t\t( cogs.c_act_name ) as c_act_name,   \n\t\t( cogs.c_opp_act_name ) as c_opp_act_name,\n\t\t( cogs.c_add_1 ) as c_add_1,\n\t\t( cogs.c_add_2 ) as c_add_2, \n\t\t( cogs.c_add_3 ) as c_add_3,\n\t\t( cogs.c_city ) as c_city,\n\t\t( cogs.n_ref_srno ) as n_ref_srno,\n\t\t( cogs.n_order_no ) as n_order_no,\n\t\t( cogs.recon_dt) as recon_dt,\n\t\t( if recon_dt is null then 0 else 1 endif ) as chq_pass,\n\t\t( cogs.multi_act_name) as multi_act_name,\n\t\tisnull( case when n_amount  > 0 then n_amount else 0 end,0) as Debit,\n\t\tisnull( case when n_amount  < 0 then n_amount else 0 end,0) as credit\nFrom\n(\n\tSELECT ( ledger.c_br_code ) as c_br_code,\n\t\t\t( ledger.c_year ) as c_year,   \n\t\t\t( ledger.c_prefix ) as c_prefix,   \n\t\t\t( ledger.n_tran_no ) as n_tran_no,   \n\t\t\t( ledger.c_act_code ) as c_act_code,   \n\t\t\t( ledger.d_date ) as d_date,   \n\t\t\t( ledger.n_amount ) as n_amount,   \n\t\t\t( ledger.c_opp_act_code ) as c_opp_act_code,   \n\t\t\t( ledger.c_ref_br_code ) as c_ref_br_code,\n\t\t\t( settle_mst_header.c_ref_no ) as c_ref_no,   \n\t\t\tdate(settle_mst_header.d_ref_date) as d_chq_date,   \n\t\t\t( settle_mst_header.c_remark ) as c_remark,   \n\t\t\t( act_mst_a.c_name ) as c_act_name,   \n\t\t\t( act_mst_b.c_name ) as c_opp_act_name,\n\t\t\t( act_mst_a.c_add_1 ) as c_add_1,\n\t\t\t( act_mst_a.c_add_2 ) as c_add_2, \n\t\t\t( act_mst_a.c_add_3 ) as c_add_3,\n\t\t\t( act_mst_a.c_city ) as c_city,\n\t\t\t( grn_mst.n_ref_srno ) as n_ref_srno,\n\t\t\t( gdn_mst.n_order_no ) as n_order_no,\n\t\t\t(d_reconcile_date) as recon_dt,\n\t\t\t(if recon_dt is null then 0 else 1 endif) as chq_pass,\n\t\t\tif ledger.c_opp_act_code='~~~~~~~~~~~~' then \n\t\t\t\t(select list(ac.c_name+' : '+string(n_amount),char(13)) from ledger ll , act_mst ac  where ac.c_code=ll.c_act_code and\n\t\t\t\t\t\tll.c_br_code=ledger.c_br_code and ll.c_year=ledger.c_year\n\t\t\t\t\t\tand ll.c_prefix=ledger.c_prefix and ll.n_tran_no=ledger.n_tran_no and \n\t\t\t\t\t\t(ledger.n_amount<0 and ll.n_amount>0 or ledger.n_amount>0 and ll.n_amount<0))\n\t\t\telse '' endif as multi_act_name\n    FROM ledger\n\t\t\t\tinner join (select c_br_code as brcode from branch_group_det where length('751') = 6 and c_code = '751' and  branch_group_det.n_cancel_flag = 0 \n            union \n            select c_code from act_mst where length('751')<> 6 and c_code >= (if '751' = 'zzz' then '751' else '751' endif ) and ( c_code <= '751' ) \n            ) brlist on brlist.brcode=ledger.c_ref_br_code  \n\t\t\tleft outer join settle_mst_header  on  ledger.c_br_code = settle_mst_header.c_br_code  and \n\t\t\t ledger.c_year = settle_mst_header.c_year  and \n          ledger.c_prefix = settle_mst_header.c_prefix  and \n          ledger.n_tran_no = settle_mst_header.n_srno  \n          left outer join grn_mst on  ledger.c_br_code = grn_mst.c_br_code  and \n\t\t\t\tledger.c_year = grn_mst.c_year  and \n\t\t\t\tledger.c_prefix = grn_mst.c_prefix  and \n\t\t\t\tledger.n_tran_no = grn_mst.n_srno\n\t\t\tleft outer join gdn_mst  on  ledger.c_br_code = gdn_mst.c_br_code  and \n\t\t\t\tledger.c_year = gdn_mst.c_year  and \n\t\t\t\tledger.c_prefix = gdn_mst.c_prefix  and \n\t\t\t\tledger.n_tran_no = gdn_mst.n_srno\n\t\t\t\tleft outer join reconcile_mst  on  ledger.c_br_code= reconcile_mst.c_br_code and ledger.c_year = reconcile_mst.c_year and\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  ledger.c_prefix = reconcile_mst.c_prefix and  ledger.n_tran_no = reconcile_mst.n_srno, \n          act_mst act_mst_a,   \n         act_mst act_mst_b  \n   WHERE \n         ( act_mst_a.c_code = ledger.c_act_code ) and \n         ( act_mst_b.c_code = ledger.c_opp_act_code ) and\t\n         ( ( ledger.d_date >= '2021-10-01' ) and\t\n         ( ledger.d_date <= getDate() ) and \n         ( ledger.c_act_code >= 'GC793' ) and \n         ( ledger.c_act_code <= 'GC793' )   and\n\t\t\t( ledger.n_amount <> 0) )\n\tUnion All\n\t SELECT ( ledger.c_br_code ) as c_br_code,\n\t\t\t( ledger.c_year ) as c_year,   \n\t\t\t( ledger.c_prefix ) as c_prefix,   \n\t\t\t( ledger.n_tran_no ) as n_tran_no,   \n\t\t\t( ledger.c_act_code ) as c_act_code,   \n\t\t\t( ledger.d_date ) as d_date,   \n\t\t\t( ledger.n_amount ) as n_amount,   \n\t\t\t( ledger.c_opp_act_code ) as c_opp_act_code,   \n\t\t\t( ledger.c_ref_br_code ) as c_ref_br_code,\n\t\t\t( settle_mst_header.c_ref_no ) as c_ref_no,   \n\t\t\tdate(settle_mst_header.d_ref_date) as d_chq_date,   \n\t\t\t( settle_mst_header.c_remark ) as c_remark,   \n\t\t\t( act_mst_a.c_name ) as c_act_name,   \n\t\t\t( act_mst_b.c_name ) as c_opp_act_name,\n\t\t\t( act_mst_a.c_add_1 ) as c_add_1,\n\t\t\t( act_mst_a.c_add_2 ) as c_add_2, \n\t\t\t( act_mst_a.c_add_3 ) as c_add_3,\n\t\t\t( act_mst_a.c_city ) as c_city,\n\t\t\t( grn_mst.n_ref_srno ) as n_ref_srno,\n\t\t\t( gdn_mst.n_order_no ) as n_order_no,\n\t\t\t(d_reconcile_date) as recon_dt,\n\t\t\t(if recon_dt is null then 0 else 1 endif) as chq_pass,\n\t\t\tif ledger.c_opp_act_code='~~~~~~~~~~~~' then \n\t\t\t\t(select list(ac.c_name+' : '+string(n_amount),char(13)) from ledger ll , act_mst ac  where ac.c_code=ll.c_act_code and\n\t\t\t\t\t\tll.c_br_code=ledger.c_br_code and ll.c_year=ledger.c_year\n\t\t\t\t\t\tand ll.c_prefix=ledger.c_prefix and ll.n_tran_no=ledger.n_tran_no and \n\t\t\t\t\t\t(ledger.n_amount<0 and ll.n_amount>0 or ledger.n_amount>0 and ll.n_amount<0))\n\t\t\telse '' endif as multi_act_name\n    FROM cogs_ledger as ledger\n\t\t\t\tinner join (select c_br_code as brcode from branch_group_det where length('751') = 6 and c_code = '751' and  branch_group_det.n_cancel_flag = 0 \n            union \n            select c_code from act_mst where length('751')<> 6 and c_code >= (if '751' = 'zzz' then '751' else '751' endif ) and ( c_code <= '751' ) \n            ) brlist on brlist.brcode=ledger.c_ref_br_code  \n\t\t\tleft outer join settle_mst_header  on  ledger.c_br_code = settle_mst_header.c_br_code  and \n\t\t\t ledger.c_year = settle_mst_header.c_year  and \n          ledger.c_prefix = settle_mst_header.c_prefix  and \n          ledger.n_tran_no = settle_mst_header.n_srno  \n          left outer join grn_mst on  ledger.c_br_code = grn_mst.c_br_code  and \n\t\t\t\tledger.c_year = grn_mst.c_year  and \n\t\t\t\tledger.c_prefix = grn_mst.c_prefix  and \n\t\t\t\tledger.n_tran_no = grn_mst.n_srno\n\t\t\tleft outer join gdn_mst  on  ledger.c_br_code = gdn_mst.c_br_code  and \n\t\t\t\tledger.c_year = gdn_mst.c_year  and \n\t\t\t\tledger.c_prefix = gdn_mst.c_prefix  and \n\t\t\t\tledger.n_tran_no = gdn_mst.n_srno\n\t\t\t\tleft outer join reconcile_mst  on  ledger.c_br_code= reconcile_mst.c_br_code and ledger.c_year = reconcile_mst.c_year and\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  ledger.c_prefix = reconcile_mst.c_prefix and  ledger.n_tran_no = reconcile_mst.n_srno, \n          act_mst act_mst_a,   \n         act_mst act_mst_b  \n   WHERE \n         ( act_mst_a.c_code = ledger.c_act_code ) and \n         ( act_mst_b.c_code = ledger.c_opp_act_code ) and\t\n         ( ( ledger.d_date >= '2021-10-01' ) and\t\n         ( ledger.d_date <= getDate() ) and \n         ( ledger.c_act_code >= 'GC793' ) and \n         ( ledger.c_act_code <= 'GC793' )   and\n\t\t\t( ledger.n_amount <> 0) ) --and :li_cogs =1\n) as cogs \nGroup By c_br_code,c_year,c_prefix,n_tran_no,c_act_code,d_date,c_opp_act_code,c_ref_br_code,c_ref_no,   \n\t\td_chq_date,c_remark,c_act_name,c_opp_act_name,c_add_1,c_add_2,c_add_3,c_city,n_ref_srno,\n\t\tn_order_no,recon_dt,multi_act_name\nUNION   ALL\n  SELECT ('') as c_br_code,\n\t\t\t('00') as c_year,   \n         ('OP') as c_prefix,   \n         ( 0 ) as c_tran_no,   \n         ( ledger.c_act_code ) as c_act_code,   \n         ( date('2021-10-21')) as d_date,   \n         sum(ledger.n_amount) as n_amount,   \n         ( '' ) as c_opp_act_code,   \n         ( '' ) as c_ref_br_code,   \n         ( '' ) as c_ref_no,   \n         date('2021-10-21') as d_chq_date,   \n         ( '' ) as c_remark,   \n         ( act_mst.c_name ) as c_act_name,   \n         ( 'Opening Balance' ) as c_opp_act_name,\n\t\t\t( act_mst.c_add_1 )  as c_add_1,\n\t\t\t( act_mst.c_add_2 )  as c_add_2, \n\t\t\t( act_mst.c_add_3 )  as c_add_3,\n\t\t\t( act_mst.c_city ) as c_city,\n\t\t\t(0) as n_ref_srno,\n\t\t\t(0) as n_order_no,\n\t\t\t( null )  as recon_dt,\n\t\t\t( 0 )  \tas chq_pass,\n\t\t\t( '' ) as multi_act_name\t,\n\t\tisnull( case when n_amount  > 0 then n_amount else 0 end,0) as Debit,\n\t\tisnull( case when n_amount  < 0 then n_amount else 0 end,0) as credit\n    FROM dba.ledger\n\t\t\t\tinner join (select c_br_code as brcode from dba.branch_group_det where length('751') = 6 and c_code = '751' and  branch_group_det.n_cancel_flag = 0 \n            union \n            select c_code from dba.act_mst where length('751')<> 6 and c_code >= (if '751' = 'zzz' then '751' else '751' endif ) and ( c_code <= '751' ) \n            ) brlist on brlist.brcode=ledger.c_ref_br_code,  \n         act_mst  \n   WHERE ( act_mst.c_code = ledger.c_act_code ) and  \n         ( ( ledger.d_date <= getDate() ) and\t\n         ( ledger.c_act_code >= 'GC793' ) and\t\n         ( ledger.c_act_code <= 'GC793' ) )   \nGROUP BY c_act_code,c_act_name,c_add_1,c_add_2,c_add_3,c_city"
					},
					"sink": {
						"type": "ParquetSink",
						"storeSettings": {
							"type": "AzureBlobStorageWriteSettings"
						},
						"formatSettings": {
							"type": "ParquetWriteSettings"
						}
					},
					"enableStaging": false,
					"translator": {
						"type": "TabularTranslator",
						"typeConversion": true,
						"typeConversionSettings": {
							"allowDataTruncation": true,
							"treatBooleanAsNumber": false
						}
					}
				},
				"inputs": [
					{
						"referenceName": "Ds_Ecogreenv2",
						"type": "DatasetReference"
					}
				],
				"outputs": [
					{
						"referenceName": "RL_HelthTech_JO_JV_751_701_Credit",
						"type": "DatasetReference"
					}
				]
			},
			{
				"name": "Copy data HelthTech JO-JV 751 and 701 File to Table",
				"type": "Copy",
				"dependsOn": [
					{
						"activity": "Copy data HelthTech JO-JV 751 and 701 Credit",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "ParquetSource",
						"storeSettings": {
							"type": "AzureBlobStorageReadSettings",
							"recursive": true,
							"enablePartitionDiscovery": false
						}
					},
					"sink": {
						"type": "SqlServerSink",
						"writeBehavior": "insert",
						"sqlWriterUseTableLock": false,
						"tableOption": "autoCreate"
					},
					"enableStaging": false,
					"translator": {
						"type": "TabularTranslator",
						"typeConversion": true,
						"typeConversionSettings": {
							"allowDataTruncation": true,
							"treatBooleanAsNumber": false
						}
					}
				},
				"inputs": [
					{
						"referenceName": "RL_HelthTech_JO_JV_751_701_Credit",
						"type": "DatasetReference"
					}
				],
				"outputs": [
					{
						"referenceName": "SQL_HelthTech_JO_JV_751_701_Credit",
						"type": "DatasetReference"
					}
				]
			}
		],
		"folder": {
			"name": "Reconciliation Ledgers"
		},
		"annotations": [],
		"lastPublishTime": "2022-02-01T04:57:15Z"
	},
	"type": "Microsoft.DataFactory/factories/pipelines"
}