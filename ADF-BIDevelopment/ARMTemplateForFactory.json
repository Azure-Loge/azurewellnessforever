{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "ADF-BIDevelopment"
		},
		"AzureBlobStorage_LS1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage_LS1'"
		},
		"AzureDataLakeStorage1_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'AzureDataLakeStorage1'"
		},
		"AzureDatabricks_Logesys_accessToken": {
			"type": "secureString",
			"metadata": "Secure string for 'accessToken' of 'AzureDatabricks_Logesys'"
		},
		"Data360MSSQL_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'Data360MSSQL'"
		},
		"OMSMySql1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'OMSMySql1'"
		},
		"wellness_cold_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'wellness_cold'"
		},
		"AzureBlobStorage_LS_properties_typeProperties_connectionString_secretName": {
			"type": "string",
			"defaultValue": "wfbidevelopment-secret"
		},
		"AzureDataLakeStorage1_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://wfbidevelopment.dfs.core.windows.net/"
		},
		"AzureKeyVault1_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://wfbidevelopment-kv.vault.azure.net/"
		},
		"AzureKeyVault_LS_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://wfbidevelopment-kv.vault.azure.net/"
		},
		"EG21_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "192.168.0.10:49021"
		},
		"EG21_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "04M00021"
		},
		"EG21_properties_typeProperties_username": {
			"type": "string",
			"defaultValue": "viewuser"
		},
		"RestService_MRP_API_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://webapi.intelligencenode.com/wellness/smartprices?app_key=62oid32sd896g"
		},
		"SybaseIRMaster_properties_typeProperties_linkedInfo_resourceId": {
			"type": "string",
			"defaultValue": "/subscriptions/5905a4bc-8be8-4682-9857-fde30ce16766/resourcegroups/wellnessforever-dataplatform-rg/providers/Microsoft.DataFactory/factories/wellnessforever-adf/integrationruntimes/SybaseIRMaster"
		},
		"Wellness-IntegrationRuntime_properties_typeProperties_linkedInfo_resourceId": {
			"type": "string",
			"defaultValue": "/subscriptions/5905a4bc-8be8-4682-9857-fde30ce16766/resourcegroups/wellnessforever-dataplatform-rg/providers/Microsoft.DataFactory/factories/wellnessforever-adf/integrationruntimes/self-host-wellnessforever"
		},
		"integrationRuntime1_properties_typeProperties_linkedInfo_resourceId": {
			"type": "string",
			"defaultValue": "/subscriptions/5905a4bc-8be8-4682-9857-fde30ce16766/resourcegroups/wellnessforever-dataplatform-rg/providers/Microsoft.DataFactory/factories/wellnessforever-adf/integrationruntimes/self-host-wellnessforever"
		},
		"selfHost-Wellness_properties_typeProperties_linkedInfo_resourceId": {
			"type": "string",
			"defaultValue": "/subscriptions/5905a4bc-8be8-4682-9857-fde30ce16766/resourcegroups/wellnessforever-dataplatform-rg/providers/Microsoft.DataFactory/factories/wellnessforever-adf/integrationruntimes/self-host-wellnessforever"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/API Full Load MRP Variance')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Copy data MRP API to JSON File",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow1",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Copy data MRP API to JSON File",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"paginationRules": {
									"supportRFC5988": "true"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "RestResource_MRP_API",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "MRP_Variance_JSONFile",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dataflow1')]",
				"[concat(variables('factoryId'), '/datasets/RestResource_MRP_API')]",
				"[concat(variables('factoryId'), '/datasets/MRP_Variance_JSONFile')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Daily T-7 Amzaon Order Details Incremental Load')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Max Date from Order Detail",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "Select convert(varchar, DateAdd(DD,-7,max(order_date)), 23)  as maxdate from Amazon_OMS_Order_Details_staging",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "OMSSqlServerTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Copy data Amazon Item Data",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Get Max Date from Order Detail",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "MySqlSource",
								"query": {
									"value": "SELECT \nDISTINCT \nws.sale_id AS Order_Id\n,ws.sale_code\n,ws.created_date AS Order_Date\n,STR_TO_DATE(ws.processing_date,'%Y-%m-%d %H:%i:%s') as processing_date\n,STR_TO_DATE(ws.invoice_date,'%Y-%m-%d %H:%i:%s') as invoice_date\n,ws.user_name AS Customer_Name\n,ws.Customer_id\n,ws.store_id\n,wd.rx_type AS RX_type\n,wd.product_id\n,wd.mrp\n,wd.price\n,wd.quantity\n,ws.coupon_discount AS discount_on_order\n,ws.coupon_code\n,ws.grand_total\n,ws.order_invoice_amt\n,ws.txn_status\n,ws.payment_type AS Payment_mode\n,ws.online_TXN\n,ws.ERP_transactionid AS ERP_Id\n,ws.order_invoice_no AS Invoice_no\n,ws.delivery_status AS Order_Status\n,ws.partial_invoice\n,ws.DMS_jobid\n,ws.dman_id\n,ws.dman_name\n,ws.thirdPartyJobStatus\n,ws.three_pl_name\n,STR_TO_DATE(ws.DMS_eta_IST,'%Y-%m-%d %H:%i:%s') AS Actual_Delivery_date\n,STR_TO_DATE(ws.delivered_date,'%Y-%m-%d %H:%i:%s') AS Delivered_date\n,ws.cancel_reason\n,ws.remark\n,ws.MFM_timeframe\n,ws.sale_platform\n,ws.dman_payment_status AS Reconciled\n,ws.collected_amount AS Collected_amount\n,p.item_code\n,concat(ws.store_id, '/', ws.sale_id, '/', p.item_code) as brcode_orderid_itemcode_key\n,ws.order_parent_id\n,ws.buyer\nFROM wellnessDB.order_details wd\nLEFT JOIN wellnessDB.sale ws ON wd.sale_id = ws.sale_id\nleft JOIN setproduct_items sp ON sp.set_id=wd.product_id\nleft JOIN product p ON sp.product_id=p.product_id\nWHERE\nSTR_TO_DATE(ws.created_date,'%Y-%m-%d') >='@{activity('Get Max Date from Order Detail').output.firstRow.maxdate}'\nAND wd.status = 1 and ws.sale_platform='6' and p.item_code IS NOT NULL\nORDER BY ws.sale_id ASC\n\n\n",
									"type": "Expression"
								}
							},
							"sink": {
								"type": "SqlServerSink",
								"preCopyScript": {
									"value": "Delete from Amazon_OMS_Order_Details_staging where \nconvert(date,order_date) >='@{activity('Get Max Date from Order Detail').output.firstRow.maxdate}'",
									"type": "Expression"
								},
								"tableOption": "autoCreate"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "OMSMySqlTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Amazon_Item_OutPutTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Stored procedure update columns",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy data Amazon Item Data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[USP_Daily_Incremental_Amazon_Order_Deatils]",
							"storedProcedureParameters": {
								"date": {
									"value": {
										"value": "@activity('Get Max Date from Order Detail').output.firstRow.maxdate",
										"type": "Expression"
									},
									"type": "DateTime"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Data360MSSQL",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Get Max Date from Amzaon Order Detail Failure Mail",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Get Max Date from Order Detail",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://prod-03.centralindia.logic.azure.com:443/workflows/464eb5db81654a119fbde64f7815052d/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=mF2jqmQWzHvsdtjGxGf4ajGCuU9BPmu1x3S0gtBtHF8",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "{\n\"Process\":\"Get Max Date from Amzaon Order Detail Failure Mail\",\n\"Pipeline\":\"@{pipeline().Pipeline}\",\n\"DataFactoryName\":\"@{pipeline().DataFactory}\",\n\"ErrorMessage\":\"@{activity('Get Max Date from Order Detail').Error.Message}\",\n\"Runid\":\"@{pipeline().RunId}\"\n}",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Copy data Amazon Item Data Failure Mail",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Copy data Amazon Item Data",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://prod-03.centralindia.logic.azure.com:443/workflows/464eb5db81654a119fbde64f7815052d/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=mF2jqmQWzHvsdtjGxGf4ajGCuU9BPmu1x3S0gtBtHF8",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "{\n\"Process\":\"Copy data Amazon Item Data Failure Mail\",\n\"Pipeline\":\"@{pipeline().Pipeline}\",\n\"DataFactoryName\":\"@{pipeline().DataFactory}\",\n\"ErrorMessage\":\"@{activity('Copy data Amazon Item Data').Error.Message}\",\n\"Runid\":\"@{pipeline().RunId}\"\n}",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Stored procedure update columns Failure Mail",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Stored procedure update columns",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://prod-03.centralindia.logic.azure.com:443/workflows/464eb5db81654a119fbde64f7815052d/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=mF2jqmQWzHvsdtjGxGf4ajGCuU9BPmu1x3S0gtBtHF8",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "{\n\"Process\":\"Stored procedure update columns Failure Mail\",\n\"Pipeline\":\"@{pipeline().Pipeline}\",\n\"DataFactoryName\":\"@{pipeline().DataFactory}\",\n\"ErrorMessage\":\"@{activity('Stored procedure update columns').Error.Message}\",\n\"Runid\":\"@{pipeline().RunId}\"\n}",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Order Details/Incremental Load Pipeline"
				},
				"annotations": [],
				"lastPublishTime": "2022-02-23T11:31:00Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/OMSSqlServerTable')]",
				"[concat(variables('factoryId'), '/datasets/OMSMySqlTable')]",
				"[concat(variables('factoryId'), '/datasets/Amazon_Item_OutPutTable')]",
				"[concat(variables('factoryId'), '/linkedServices/Data360MSSQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Daily T-7 Cancel Order Details Incremental Load')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Max Date from Order Detail",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "Select convert(varchar, DateAdd(DD,-7,max(order_date)), 23)  as maxdate from OMS_Cancel_Order_Details",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "OMSSqlServerTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "MySQL to SQL server Cancel Order",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Get Max Date from Order Detail",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "MySqlSource",
								"query": {
									"value": "SELECT DISTINCT \nws.sale_id AS Order_Id\n,ws.sale_code\n,ws.created_date AS Order_Date\n,STR_TO_DATE(ws.processing_date,'%Y-%m-%d %H:%i:%s') as processing_date\n,STR_TO_DATE(ws.invoice_date,'%Y-%m-%d %H:%i:%s') as invoice_date\n,ws.user_name AS Customer_Name\n,ws.Customer_id\n,ws.store_id\n,wd.rx_type AS RX_type\n,wd.product_id\n,wd.mrp\n,wd.price\n,wd.quantity\n,ws.coupon_discount AS discount_on_order\n,ws.coupon_code\n,ws.grand_total\n,ws.order_invoice_amt\n,ws.txn_status\n,ws.payment_type AS Payment_mode\n,ws.online_TXN\n,ws.ERP_transactionid AS ERP_Id\n,ws.order_invoice_no AS Invoice_no\n,ws.delivery_status AS Order_Status\n,ws.partial_invoice\n,ws.DMS_jobid\n,ws.dman_id\n,ws.dman_name\n,ws.thirdPartyJobStatus\n,ws.three_pl_name\n,STR_TO_DATE(ws.DMS_eta_IST,'%Y-%m-%d %H:%i:%s') AS Actual_Delivery_date\n,STR_TO_DATE(ws.delivered_date,'%Y-%m-%d %H:%i:%s') AS Delivered_date\n,ws.cancel_reason\n,ws.remark\n,ws.MFM_timeframe\n,ws.sale_platform\n,ws.dman_payment_status AS Reconciled\n,ws.collected_amount AS Collected_amount\n,wd.item_code\n,concat(ws.store_id, '/', ws.sale_id, '/', wd.item_code) as brcode_orderid_itemcode_key\n,ws.order_parent_id\n,ws.buyer\nFROM wellnessDB.order_details wd\nLEFT JOIN wellnessDB.sale ws ON wd.sale_id = ws.sale_id\nWHERE \nSTR_TO_DATE(ws.created_date,'%Y-%m-%d') >='@{activity('Get Max Date from Order Detail').output.firstRow.maxdate}'\nAND wd.status = 1 and ws.delivery_status like '%cancel%'\nORDER BY ws.sale_id ASC",
									"type": "Expression"
								}
							},
							"sink": {
								"type": "SqlServerSink",
								"preCopyScript": {
									"value": "Delete from OMS_Cancel_Order_Details where \nconvert(date,order_date) >= '@{activity('Get Max Date from Order Detail').output.firstRow.maxdate}'",
									"type": "Expression"
								},
								"tableOption": "autoCreate"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "OMSMySqlTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "OMS_CancelOrder_Outputtable",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Stored procedure update columns",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "MySQL to SQL server Cancel Order",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[USP_Daily_Incremental_Cancel_Order_Deatils]",
							"storedProcedureParameters": {
								"date": {
									"value": {
										"value": "@activity('Get Max Date from Order Detail').output.firstRow.maxdate",
										"type": "Expression"
									},
									"type": "DateTime"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Data360MSSQL",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Get Max Date from Cancel Order Detail Failure Mail",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Get Max Date from Order Detail",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://prod-03.centralindia.logic.azure.com:443/workflows/464eb5db81654a119fbde64f7815052d/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=mF2jqmQWzHvsdtjGxGf4ajGCuU9BPmu1x3S0gtBtHF8",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "{\n\"Process\":\"Get Max Date from Cancel Order Detail Failure Mail\",\n\"Pipeline\":\"@{pipeline().Pipeline}\",\n\"DataFactoryName\":\"@{pipeline().DataFactory}\",\n\"ErrorMessage\":\"@{activity('Get Max Date from Order Detail').Error.Message}\",\n\"Runid\":\"@{pipeline().RunId}\"\n}",
								"type": "Expression"
							}
						}
					},
					{
						"name": "MySQL to SQL server Cancel Order Failure Mail",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "MySQL to SQL server Cancel Order",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://prod-03.centralindia.logic.azure.com:443/workflows/464eb5db81654a119fbde64f7815052d/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=mF2jqmQWzHvsdtjGxGf4ajGCuU9BPmu1x3S0gtBtHF8",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "{\n\"Process\":\"MySQL to SQL server Cancel Order Failure Mail\",\n\"Pipeline\":\"@{pipeline().Pipeline}\",\n\"DataFactoryName\":\"@{pipeline().DataFactory}\",\n\"ErrorMessage\":\"@{activity('MySQL to SQL server Cancel Order').Error.Message}\",\n\"Runid\":\"@{pipeline().RunId}\"\n}",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Stored procedure update columns Failure Mail",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Stored procedure update columns",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://prod-03.centralindia.logic.azure.com:443/workflows/464eb5db81654a119fbde64f7815052d/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=mF2jqmQWzHvsdtjGxGf4ajGCuU9BPmu1x3S0gtBtHF8",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "{\n\"Process\":\"Stored procedure update columns Failure Mail\",\n\"Pipeline\":\"@{pipeline().Pipeline}\",\n\"DataFactoryName\":\"@{pipeline().DataFactory}\",\n\"ErrorMessage\":\"@{activity('Stored procedure update columns').Error.Message}\",\n\"Runid\":\"@{pipeline().RunId}\"\n}",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Order Details/Incremental Load Pipeline"
				},
				"annotations": [],
				"lastPublishTime": "2022-02-23T11:31:00Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/OMSSqlServerTable')]",
				"[concat(variables('factoryId'), '/datasets/OMSMySqlTable')]",
				"[concat(variables('factoryId'), '/datasets/OMS_CancelOrder_Outputtable')]",
				"[concat(variables('factoryId'), '/linkedServices/Data360MSSQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Daily T-7 Invoice Master Incremental Load')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data inv Det Query into File",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Get Max Date From Invoice Master table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SybaseSource",
								"query": {
									"value": "Select * from dba.inv_det where \nconvert(date,d_date) >='@{activity('Get Max Date From Invoice Master table').output.firstRow.Max_Date}'",
									"type": "Expression"
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "Ds_Ecogreenv2",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "EG_Inv_Det_OutPutFile",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Get Max Date From Invoice Master table",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Delete EG Inv_Det",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Delete EG Inv_Mst",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "Select convert(varchar, DateAdd(DD,-7,max(d_date)), 23)  as Max_Date from inv_Master",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "OMSSqlServerTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Copy data inv Mst Query into File",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Get Max Date From Invoice Master table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SybaseSource",
								"query": {
									"value": "Select * from dba.inv_mst \nwhere convert(date,d_date) >= '@{activity('Get Max Date From Invoice Master table').output.firstRow.Max_Date}'",
									"type": "Expression"
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "Ds_Ecogreenv2",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "EG_Inv_Mst_OutPutFile",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Delete EG Inv_Det",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "EG_Inv_Det_OutPutFile",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "Delete EG Inv_Mst",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "EG_Inv_Mst_OutPutFile",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "Copy data EG Inv_det file to Staging Table",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Copy data inv Det Query into File",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "SqlServerSink",
								"preCopyScript": "Truncate table Inv_Det_Staging",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "c_br_code",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_br_code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "c_year",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_year",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "c_prefix",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_prefix",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "n_srno",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_srno",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_seq",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_seq",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "d_date",
											"type": "DateTime",
											"physicalType": "INT96"
										},
										"sink": {
											"name": "d_date",
											"type": "DateTime",
											"physicalType": "datetime2"
										}
									},
									{
										"source": {
											"name": "c_item_code",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_item_code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "c_batch_no",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_batch_no",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "n_qty",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_qty",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_sch_qty",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_sch_qty",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_sch_disc",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_sch_disc",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_sale_rate",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_sale_rate",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_disc_per",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_disc_per",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_st_per",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_st_per",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_cst_per",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_cst_per",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_rst_per",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_rst_per",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_tax_suffer",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_tax_suffer",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_amount",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_amount",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "c_mf_code",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_mf_code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "n_2nd_sale",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_2nd_sale",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_sp_sale_flag",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_sp_sale_flag",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_cancel_flag",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_cancel_flag",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "d_ldate",
											"type": "DateTime",
											"physicalType": "INT96"
										},
										"sink": {
											"name": "d_ldate",
											"type": "DateTime",
											"physicalType": "datetime2"
										}
									},
									{
										"source": {
											"name": "n_vaton",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_vaton",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_tax_on_sch_qty",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_tax_on_sch_qty",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_vatts_mrp",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_vatts_mrp",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_mrp",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_mrp",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "c_remark",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_remark",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "n_tax_amt",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_tax_amt",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_free_tax_amt",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_free_tax_amt",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "c_print_batch",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_print_batch",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "d_print_exp_dt",
											"type": "DateTime",
											"physicalType": "INT96"
										},
										"sink": {
											"name": "d_print_exp_dt",
											"type": "DateTime",
											"physicalType": "datetime2"
										}
									},
									{
										"source": {
											"name": "n_eff_pur_rate",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_eff_pur_rate",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_shift",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_shift",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "c_remark2",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_remark2",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "n_points",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_points",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "t_ltime",
											"type": "DateTime",
											"physicalType": "INT96"
										},
										"sink": {
											"name": "t_ltime",
											"type": "DateTime",
											"physicalType": "datetime2"
										}
									},
									{
										"source": {
											"name": "n_req_qty",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_req_qty",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_allow_points",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_allow_points",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_qty1",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_qty1",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_card_reverse_dis",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_card_reverse_dis",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "c_dc_br_code",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_dc_br_code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "c_dc_year",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_dc_year",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "c_dc_prefix",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_dc_prefix",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "n_dc_srno",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_dc_srno",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_dc_seq",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_dc_seq",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_remind_days",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_remind_days",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_claim",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_claim",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "c_order_br_code",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_order_br_code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "c_order_year",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_order_year",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "c_order_prefix",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_order_prefix",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "n_order_no",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_order_no",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_order_seq",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_order_seq",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_claim_per",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_claim_per",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "d_print_mfg_dt",
											"type": "DateTime",
											"physicalType": "INT96"
										},
										"sink": {
											"name": "d_print_mfg_dt",
											"type": "DateTime",
											"physicalType": "datetime2"
										}
									},
									{
										"source": {
											"name": "c_ord_br_code",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_ord_br_code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "c_ord_year",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_ord_year",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "c_ord_prefix",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_ord_prefix",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "n_ord_srno",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_ord_srno",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_ord_seq",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_ord_seq",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "c_cont_code",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_cont_code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "n_verified_qty",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_verified_qty",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_claim_qty",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_claim_qty",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_claim_val",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_claim_val",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "c_coupon_code",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_coupon_code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "c_coupon_srno",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_coupon_srno",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "n_store_track",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_store_track",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "c_claim_reason",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_claim_reason",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "c_barcode",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_barcode",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "c_sman_code",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_sman_code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "c_godown_code",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_godown_code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "n_stk_serial",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_stk_serial",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "c_bom_code",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_bom_code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "n_bom_seq",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_bom_seq",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_item_tax_suffer",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_item_tax_suffer",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_item_vatts_flag",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_item_vatts_flag",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_item_vatts_mrp",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_item_vatts_mrp",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_item_tax_on_sch_qty",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_item_tax_on_sch_qty",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "c_tray_Code",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_tray_Code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "n_marketplace_flag",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_marketplace_flag",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "c_quot_no",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_quot_no",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "n_ts_value",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_ts_value",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_pick_seq",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_pick_seq",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_share_disc",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_share_disc",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_ord_rate",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_ord_rate",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_ord_rate_diff",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_ord_rate_diff",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "c_integration_code",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_integration_code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "n_update_stock",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_update_stock",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_adjust",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_adjust",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_currency",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_currency",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_exchange_rate",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_exchange_rate",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_gst_enabled",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_gst_enabled",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_from_gst_type",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_from_gst_type",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "c_hsn_sac_code",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_hsn_sac_code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "n_cgst_per",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_cgst_per",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_cgst_amt",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_cgst_amt",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_sgst_per",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_sgst_per",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_sgst_amt",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_sgst_amt",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_igst_per",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_igst_per",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_igst_amt",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_igst_amt",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_cess_per",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_cess_per",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_cess_amt",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_cess_amt",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_pk",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_pk",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_to_gst_type",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_to_gst_type",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "c_gst_code",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_gst_code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "n_taxable_amt",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_taxable_amt",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_inv_qty",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_inv_qty",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_ref_seq",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_ref_seq",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_ord_pk",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_ord_pk",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_dc_pk",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_dc_pk",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_purord_pk",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_purord_pk",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_std_disc_per",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_std_disc_per",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_total_discount",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_total_discount",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_hold_flag",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_hold_flag",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_print_seq",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_print_seq",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_eb_seq",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_eb_seq",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "c_eb_tray_Code",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_eb_tray_Code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "c_eb_doc_no",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_eb_doc_no",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "c_supp_code",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_supp_code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "n_eb_load",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_eb_load",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_add_cess_per",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_add_cess_per",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_add_cess_rev_excl",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_add_cess_rev_excl",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_cogs_amt",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_cogs_amt",
											"type": "Double",
											"physicalType": "float"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "EG_Inv_Det_OutPutFile",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "InvDetOutputTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Copy data EG inv_mst File to Staging table",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Copy data inv Mst Query into File",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "SqlServerSink",
								"preCopyScript": "Truncate table Inv_Mst_Staging",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "EG_Inv_Mst_OutPutFile",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "InvMstOutputTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Copy data invoice master",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Copy data EG Inv_det file to Staging Table",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Copy data EG inv_mst File to Staging table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "select c_br_code, c_order_id, d_date, c_item_code, [Net Sales]\n,concat(c_br_code,'/', c_order_id, '/', c_item_code) as brcode_orderid_itemcode_key \n,Cost_value,\nconvert(decimal(18,2),([Net Sales]- Cost_value)) as Margin_value,\nconverT(decimal(18,2),(Spl_Disc_Amt + Disc_Amt)) as Tot_Disc_Amt,\ngetDate() as Load_DateTime\nfrom\n(select c_br_code, c_order_id, d_date,\n\tcase when c_item_code = 'COD' then null\n\t\t\telse c_item_code end as c_item_code\n\t\t\t, [Net Sales],Cost_value,Spl_Disc_Amt,Disc_Amt,Load_DateTime    from\n(select\tinv_mst_staging.c_br_code,\n\t\tinv_mst_staging.c_order_id,\n\t\tinv_mst_staging.d_date,\n\t\tinv_det_staging.c_item_code,\n\t\tsum(inv_det_staging.n_taxable_amt) as \"Net Sales\",\n\t\tconvert(decimal(18,2),((n_qty + n_qty1)* n_eff_pur_rate)) as Cost_value,\n\n\t\tcase when inv_det_staging.n_gst_enabled=1 then ((n_mrp *n_qty) -(n_sale_rate*n_qty))\n\t\t\t when ((n_mrp *n_qty) -(n_sale_rate*n_qty)) < 1 then 0 else ((n_mrp *n_qty) -(n_sale_rate*n_qty)) end as Spl_Disc_Amt,\n\n\t\tisnull((n_sale_rate*(n_qty + n_qty1)) * (case when n_non_taxable_ret =0 then 0 else n_disc_rs /n_non_taxable_ret end),0) + convert(decimal(18,2),((n_sale_rate*(n_qty + n_qty1))*n_disc_per/100)) as Disc_Amt,\n\t\tgetDate() as Load_DateTime\n\t\t\nfrom\t\tdbo.inv_det_staging\ninner join \n\t\t\tdbo.inv_mst_staging\n\t\t\ton \n\t\t\tdbo.inv_det_staging.c_br_code = inv_mst_staging.c_br_code\n\tand inv_det_staging.c_prefix = inv_mst_staging.c_prefix\n\tand inv_det_staging.c_year = inv_mst_staging.c_year\n\tand inv_det_staging.n_srno = inv_mst_staging.n_srno\nwhere inv_mst_staging.c_patient IS NOT NULL and  inv_mst_staging.c_cust_code = 'GC93' or inv_mst_staging.c_cust_code = 'GC793' or inv_mst_staging.c_cust_code = '751' and inv_det_staging.n_cancel_flag = 0 \ngroup by inv_mst_staging.c_br_code, \n        inv_mst_staging.c_order_id,\n\t\tinv_mst_staging.d_date,\n\t\t inv_det_staging.c_item_code,\n\t\t n_qty,n_qty1,n_eff_pur_rate,\n\t\t inv_det_staging.n_gst_enabled,n_mrp,n_sale_rate,n_non_taxable_ret,n_disc_rs,n_disc_per) a) b\n",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "SqlServerSink",
								"preCopyScript": {
									"value": "Delete from Inv_master where \nConvert(date,d_date) >= '@{activity('Get Max Date From Invoice Master table').output.firstRow.Max_Date}'",
									"type": "Expression"
								},
								"tableOption": "autoCreate"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "c_br_code",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "c_br_code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "c_order_id",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "c_order_id",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "d_date",
											"type": "DateTime",
											"physicalType": "datetime2"
										},
										"sink": {
											"name": "d_date",
											"type": "DateTime",
											"physicalType": "datetime2"
										}
									},
									{
										"source": {
											"name": "c_item_code",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "c_item_code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Net Sales",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "Net Sales",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "brcode_orderid_itemcode_key",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "brcode_orderid_itemcode_key",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Cost_value",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 2,
											"precision": 18
										},
										"sink": {
											"name": "Cost_value",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "Margin_value",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 2,
											"precision": 18
										},
										"sink": {
											"name": "Margin_value",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "Tot_Disc_Amt",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 2,
											"precision": 18
										},
										"sink": {
											"name": "Tot_Disc_Amt",
											"type": "Double",
											"physicalType": "float"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "InvDetandInvMstInputTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Inv_Master",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Copy data inv Det staging to EG_inv_Det Table",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Copy data invoice master",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "SqlServerSink",
								"preCopyScript": {
									"value": "Delete from EG_Inv_Det where \nconvert(date,d_date) >='@{activity('Get Max Date From Invoice Master table').output.firstRow.Max_Date}'",
									"type": "Expression"
								},
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "c_br_code",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "c_br_code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "c_year",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "c_year",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "c_prefix",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "c_prefix",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "n_srno",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "n_srno",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										}
									},
									{
										"source": {
											"name": "n_seq",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "n_seq",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										}
									},
									{
										"source": {
											"name": "d_date",
											"type": "DateTime",
											"physicalType": "datetime2"
										},
										"sink": {
											"name": "d_date",
											"type": "DateTime",
											"physicalType": "datetime2"
										}
									},
									{
										"source": {
											"name": "c_item_code",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "c_item_code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "c_batch_no",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "c_batch_no",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "n_qty",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "n_qty",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										}
									},
									{
										"source": {
											"name": "n_sch_qty",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "n_sch_qty",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										}
									},
									{
										"source": {
											"name": "n_sch_disc",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "n_sch_disc",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										}
									},
									{
										"source": {
											"name": "n_sale_rate",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "n_sale_rate",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										}
									},
									{
										"source": {
											"name": "n_disc_per",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "n_disc_per",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										}
									},
									{
										"source": {
											"name": "n_st_per",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "n_st_per",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										}
									},
									{
										"source": {
											"name": "n_cst_per",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "n_cst_per",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										}
									},
									{
										"source": {
											"name": "n_rst_per",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "n_rst_per",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										}
									},
									{
										"source": {
											"name": "n_tax_suffer",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "n_tax_suffer",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										}
									},
									{
										"source": {
											"name": "n_amount",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "n_amount",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										}
									},
									{
										"source": {
											"name": "c_mf_code",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "c_mf_code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "n_2nd_sale",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "n_2nd_sale",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										}
									},
									{
										"source": {
											"name": "n_sp_sale_flag",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "n_sp_sale_flag",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										}
									},
									{
										"source": {
											"name": "n_cancel_flag",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "n_cancel_flag",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										}
									},
									{
										"source": {
											"name": "d_ldate",
											"type": "DateTime",
											"physicalType": "datetime2"
										},
										"sink": {
											"name": "d_ldate",
											"type": "DateTime",
											"physicalType": "datetime2"
										}
									},
									{
										"source": {
											"name": "n_vaton",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "n_vaton",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										}
									},
									{
										"source": {
											"name": "n_tax_on_sch_qty",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "n_tax_on_sch_qty",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										}
									},
									{
										"source": {
											"name": "n_vatts_mrp",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "n_vatts_mrp",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										}
									},
									{
										"source": {
											"name": "n_mrp",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "n_mrp",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										}
									},
									{
										"source": {
											"name": "c_remark",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "c_remark",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "n_tax_amt",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "n_tax_amt",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										}
									},
									{
										"source": {
											"name": "n_free_tax_amt",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "n_free_tax_amt",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										}
									},
									{
										"source": {
											"name": "c_print_batch",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "c_print_batch",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "d_print_exp_dt",
											"type": "DateTime",
											"physicalType": "datetime2"
										},
										"sink": {
											"name": "d_print_exp_dt",
											"type": "DateTime",
											"physicalType": "datetime2"
										}
									},
									{
										"source": {
											"name": "n_eff_pur_rate",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "n_eff_pur_rate",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										}
									},
									{
										"source": {
											"name": "n_shift",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "n_shift",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										}
									},
									{
										"source": {
											"name": "c_remark2",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "c_remark2",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "n_points",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "n_points",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										}
									},
									{
										"source": {
											"name": "t_ltime",
											"type": "DateTime",
											"physicalType": "datetime2"
										},
										"sink": {
											"name": "t_ltime",
											"type": "DateTime",
											"physicalType": "datetime2"
										}
									},
									{
										"source": {
											"name": "n_req_qty",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "n_req_qty",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										}
									},
									{
										"source": {
											"name": "n_allow_points",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "n_allow_points",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										}
									},
									{
										"source": {
											"name": "n_qty1",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "n_qty1",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										}
									},
									{
										"source": {
											"name": "n_card_reverse_dis",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "n_card_reverse_dis",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										}
									},
									{
										"source": {
											"name": "c_dc_br_code",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "c_dc_br_code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "c_dc_year",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "c_dc_year",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "c_dc_prefix",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "c_dc_prefix",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "n_dc_srno",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "n_dc_srno",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										}
									},
									{
										"source": {
											"name": "n_dc_seq",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "n_dc_seq",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										}
									},
									{
										"source": {
											"name": "n_remind_days",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "n_remind_days",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										}
									},
									{
										"source": {
											"name": "n_claim",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "n_claim",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										}
									},
									{
										"source": {
											"name": "c_order_br_code",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "c_order_br_code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "c_order_year",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "c_order_year",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "c_order_prefix",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "c_order_prefix",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "n_order_no",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "n_order_no",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										}
									},
									{
										"source": {
											"name": "n_order_seq",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "n_order_seq",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										}
									},
									{
										"source": {
											"name": "n_claim_per",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "n_claim_per",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										}
									},
									{
										"source": {
											"name": "d_print_mfg_dt",
											"type": "DateTime",
											"physicalType": "datetime2"
										},
										"sink": {
											"name": "d_print_mfg_dt",
											"type": "DateTime",
											"physicalType": "datetime2"
										}
									},
									{
										"source": {
											"name": "c_ord_br_code",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "c_ord_br_code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "c_ord_year",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "c_ord_year",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "c_ord_prefix",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "c_ord_prefix",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "n_ord_srno",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "n_ord_srno",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										}
									},
									{
										"source": {
											"name": "n_ord_seq",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "n_ord_seq",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										}
									},
									{
										"source": {
											"name": "c_cont_code",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "c_cont_code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "n_verified_qty",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "n_verified_qty",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										}
									},
									{
										"source": {
											"name": "n_claim_qty",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "n_claim_qty",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										}
									},
									{
										"source": {
											"name": "n_claim_val",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "n_claim_val",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										}
									},
									{
										"source": {
											"name": "c_coupon_code",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "c_coupon_code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "c_coupon_srno",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "c_coupon_srno",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "n_store_track",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "n_store_track",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										}
									},
									{
										"source": {
											"name": "c_claim_reason",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "c_claim_reason",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "c_barcode",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "c_barcode",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "c_sman_code",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "c_sman_code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "c_godown_code",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "c_godown_code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "n_stk_serial",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "n_stk_serial",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										}
									},
									{
										"source": {
											"name": "c_bom_code",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "c_bom_code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "n_bom_seq",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "n_bom_seq",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										}
									},
									{
										"source": {
											"name": "n_item_tax_suffer",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "n_item_tax_suffer",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										}
									},
									{
										"source": {
											"name": "n_item_vatts_flag",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "n_item_vatts_flag",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										}
									},
									{
										"source": {
											"name": "n_item_vatts_mrp",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "n_item_vatts_mrp",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										}
									},
									{
										"source": {
											"name": "n_item_tax_on_sch_qty",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "n_item_tax_on_sch_qty",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										}
									},
									{
										"source": {
											"name": "c_tray_Code",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "c_tray_Code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "n_marketplace_flag",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "n_marketplace_flag",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										}
									},
									{
										"source": {
											"name": "c_quot_no",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "c_quot_no",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "n_ts_value",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "n_ts_value",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										}
									},
									{
										"source": {
											"name": "n_pick_seq",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "n_pick_seq",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										}
									},
									{
										"source": {
											"name": "n_share_disc",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "n_share_disc",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										}
									},
									{
										"source": {
											"name": "n_ord_rate",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "n_ord_rate",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										}
									},
									{
										"source": {
											"name": "n_ord_rate_diff",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "n_ord_rate_diff",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										}
									},
									{
										"source": {
											"name": "c_integration_code",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "c_integration_code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "n_update_stock",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "n_update_stock",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										}
									},
									{
										"source": {
											"name": "n_adjust",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "n_adjust",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										}
									},
									{
										"source": {
											"name": "n_currency",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "n_currency",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										}
									},
									{
										"source": {
											"name": "n_exchange_rate",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "n_exchange_rate",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										}
									},
									{
										"source": {
											"name": "n_gst_enabled",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "n_gst_enabled",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										}
									},
									{
										"source": {
											"name": "n_from_gst_type",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "n_from_gst_type",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										}
									},
									{
										"source": {
											"name": "c_hsn_sac_code",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "c_hsn_sac_code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "n_cgst_per",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "n_cgst_per",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										}
									},
									{
										"source": {
											"name": "n_cgst_amt",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "n_cgst_amt",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										}
									},
									{
										"source": {
											"name": "n_sgst_per",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "n_sgst_per",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										}
									},
									{
										"source": {
											"name": "n_sgst_amt",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "n_sgst_amt",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										}
									},
									{
										"source": {
											"name": "n_igst_per",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "n_igst_per",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										}
									},
									{
										"source": {
											"name": "n_igst_amt",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "n_igst_amt",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										}
									},
									{
										"source": {
											"name": "n_cess_per",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "n_cess_per",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										}
									},
									{
										"source": {
											"name": "n_cess_amt",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "n_cess_amt",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										}
									},
									{
										"source": {
											"name": "n_pk",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "n_pk",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										}
									},
									{
										"source": {
											"name": "n_to_gst_type",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "n_to_gst_type",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										}
									},
									{
										"source": {
											"name": "c_gst_code",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "c_gst_code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "n_taxable_amt",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "n_taxable_amt",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										}
									},
									{
										"source": {
											"name": "n_inv_qty",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "n_inv_qty",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										}
									},
									{
										"source": {
											"name": "n_ref_seq",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "n_ref_seq",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										}
									},
									{
										"source": {
											"name": "n_ord_pk",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "n_ord_pk",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										}
									},
									{
										"source": {
											"name": "n_dc_pk",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "n_dc_pk",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										}
									},
									{
										"source": {
											"name": "n_purord_pk",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "n_purord_pk",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										}
									},
									{
										"source": {
											"name": "n_std_disc_per",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "n_std_disc_per",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										}
									},
									{
										"source": {
											"name": "n_total_discount",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "n_total_discount",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										}
									},
									{
										"source": {
											"name": "n_hold_flag",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "n_hold_flag",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										}
									},
									{
										"source": {
											"name": "n_print_seq",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "n_print_seq",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										}
									},
									{
										"source": {
											"name": "n_eb_seq",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "n_eb_seq",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										}
									},
									{
										"source": {
											"name": "c_eb_tray_Code",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "c_eb_tray_Code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "c_eb_doc_no",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "c_eb_doc_no",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "c_supp_code",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "c_supp_code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "n_eb_load",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "n_eb_load",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										}
									},
									{
										"source": {
											"name": "n_add_cess_per",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "n_add_cess_per",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										}
									},
									{
										"source": {
											"name": "n_add_cess_rev_excl",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "n_add_cess_rev_excl",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										}
									},
									{
										"source": {
											"name": "n_cogs_amt",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "n_cogs_amt",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "InvDetOutputTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "SQL_EG_Inv_Det",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Copy data inv Mst Staging table to EG inv_mst Table",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Copy data invoice master",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "SqlServerSink",
								"preCopyScript": {
									"value": "Delete from EG_Inv_Mst where \nconvert(date,d_date) >='@{activity('Get Max Date From Invoice Master table').output.firstRow.Max_Date}'",
									"type": "Expression"
								},
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "c_br_code",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "c_br_code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "c_year",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "c_year",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "c_prefix",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "c_prefix",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "n_srno",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										},
										"sink": {
											"name": "n_srno",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										}
									},
									{
										"source": {
											"name": "d_date",
											"type": "DateTime",
											"physicalType": "datetime2"
										},
										"sink": {
											"name": "d_date",
											"type": "DateTime",
											"physicalType": "datetime2"
										}
									},
									{
										"source": {
											"name": "t_time",
											"type": "DateTime",
											"physicalType": "datetime2"
										},
										"sink": {
											"name": "t_time",
											"type": "DateTime",
											"physicalType": "datetime2"
										}
									},
									{
										"source": {
											"name": "c_sman_code",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "c_sman_code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "c_dman_code",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "c_dman_code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "c_cust_code",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "c_cust_code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "c_patient",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "c_patient",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "c_doctor_code",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "c_doctor_code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "c_doctor_name",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "c_doctor_name",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "n_total",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										},
										"sink": {
											"name": "n_total",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										}
									},
									{
										"source": {
											"name": "n_st",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										},
										"sink": {
											"name": "n_st",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										}
									},
									{
										"source": {
											"name": "n_cst",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										},
										"sink": {
											"name": "n_cst",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										}
									},
									{
										"source": {
											"name": "n_rst",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										},
										"sink": {
											"name": "n_rst",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										}
									},
									{
										"source": {
											"name": "n_disc_rs",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										},
										"sink": {
											"name": "n_disc_rs",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										}
									},
									{
										"source": {
											"name": "n_discount",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										},
										"sink": {
											"name": "n_discount",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										}
									},
									{
										"source": {
											"name": "n_other_charge",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										},
										"sink": {
											"name": "n_other_charge",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										}
									},
									{
										"source": {
											"name": "n_tax_suffer",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										},
										"sink": {
											"name": "n_tax_suffer",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										}
									},
									{
										"source": {
											"name": "n_discount_per",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										},
										"sink": {
											"name": "n_discount_per",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										}
									},
									{
										"source": {
											"name": "n_taxable_ret",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										},
										"sink": {
											"name": "n_taxable_ret",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										}
									},
									{
										"source": {
											"name": "n_non_taxable_ret",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										},
										"sink": {
											"name": "n_non_taxable_ret",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										}
									},
									{
										"source": {
											"name": "c_credit_act",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "c_credit_act",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "n_round_off",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										},
										"sink": {
											"name": "n_round_off",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										}
									},
									{
										"source": {
											"name": "n_counter_sale",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										},
										"sink": {
											"name": "n_counter_sale",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										}
									},
									{
										"source": {
											"name": "n_cnt_no",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										},
										"sink": {
											"name": "n_cnt_no",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										}
									},
									{
										"source": {
											"name": "n_ok",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										},
										"sink": {
											"name": "n_ok",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										}
									},
									{
										"source": {
											"name": "n_cancel_flag",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										},
										"sink": {
											"name": "n_cancel_flag",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										}
									},
									{
										"source": {
											"name": "d_ldate",
											"type": "DateTime",
											"physicalType": "datetime2"
										},
										"sink": {
											"name": "d_ldate",
											"type": "DateTime",
											"physicalType": "datetime2"
										}
									},
									{
										"source": {
											"name": "n_vaton",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										},
										"sink": {
											"name": "n_vaton",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										}
									},
									{
										"source": {
											"name": "c_order_year",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "c_order_year",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "c_order_prefix",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "c_order_prefix",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "n_order_no",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										},
										"sink": {
											"name": "n_order_no",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										}
									},
									{
										"source": {
											"name": "n_approved",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										},
										"sink": {
											"name": "n_approved",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										}
									},
									{
										"source": {
											"name": "n_shift",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										},
										"sink": {
											"name": "n_shift",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										}
									},
									{
										"source": {
											"name": "c_ipno",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "c_ipno",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "c_remark",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "c_remark",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "c_patient_details",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "c_patient_details",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "c_card_bank_code",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "c_card_bank_code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "c_ref_no",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "c_ref_no",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "c_user",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "c_user",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "n_points",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										},
										"sink": {
											"name": "n_points",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										}
									},
									{
										"source": {
											"name": "n_point_redeem",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										},
										"sink": {
											"name": "n_point_redeem",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										}
									},
									{
										"source": {
											"name": "n_point_value",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										},
										"sink": {
											"name": "n_point_value",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										}
									},
									{
										"source": {
											"name": "n_pcbc_charge",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										},
										"sink": {
											"name": "n_pcbc_charge",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										}
									},
									{
										"source": {
											"name": "t_ltime",
											"type": "DateTime",
											"physicalType": "datetime2"
										},
										"sink": {
											"name": "t_ltime",
											"type": "DateTime",
											"physicalType": "datetime2"
										}
									},
									{
										"source": {
											"name": "d_remind_date",
											"type": "DateTime",
											"physicalType": "datetime2"
										},
										"sink": {
											"name": "d_remind_date",
											"type": "DateTime",
											"physicalType": "datetime2"
										}
									},
									{
										"source": {
											"name": "n_card_reverse_dis",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										},
										"sink": {
											"name": "n_card_reverse_dis",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										}
									},
									{
										"source": {
											"name": "c_doctor_office_code",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "c_doctor_office_code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "c_mobile",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "c_mobile",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "d_ref_dt",
											"type": "DateTime",
											"physicalType": "datetime2"
										},
										"sink": {
											"name": "d_ref_dt",
											"type": "DateTime",
											"physicalType": "datetime2"
										}
									},
									{
										"source": {
											"name": "n_day_seq",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										},
										"sink": {
											"name": "n_day_seq",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										}
									},
									{
										"source": {
											"name": "c_lr_no",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "c_lr_no",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "d_lr_date",
											"type": "DateTime",
											"physicalType": "datetime2"
										},
										"sink": {
											"name": "d_lr_date",
											"type": "DateTime",
											"physicalType": "datetime2"
										}
									},
									{
										"source": {
											"name": "d_stock_sent_date",
											"type": "DateTime",
											"physicalType": "datetime2"
										},
										"sink": {
											"name": "d_stock_sent_date",
											"type": "DateTime",
											"physicalType": "datetime2"
										}
									},
									{
										"source": {
											"name": "n_cases",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										},
										"sink": {
											"name": "n_cases",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										}
									},
									{
										"source": {
											"name": "n_credit_days",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										},
										"sink": {
											"name": "n_credit_days",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										}
									},
									{
										"source": {
											"name": "n_admin_settlement",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										},
										"sink": {
											"name": "n_admin_settlement",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										}
									},
									{
										"source": {
											"name": "c_terms_code",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "c_terms_code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "c_reg_no",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "c_reg_no",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "c_email",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "c_email",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "c_mr_code",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "c_mr_code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "c_transport_code",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "c_transport_code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "n_urgent",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										},
										"sink": {
											"name": "n_urgent",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										}
									},
									{
										"source": {
											"name": "c_modiuser",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "c_modiuser",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "n_tender_amt",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										},
										"sink": {
											"name": "n_tender_amt",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										}
									},
									{
										"source": {
											"name": "c_token_no",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "c_token_no",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "c_coupon_code",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "c_coupon_code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "c_coupon_srno",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "c_coupon_srno",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "n_store_track",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										},
										"sink": {
											"name": "n_store_track",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										}
									},
									{
										"source": {
											"name": "c_ip_br_code",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "c_ip_br_code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "c_tran_type",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "c_tran_type",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "c_currency_code",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "c_currency_code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "n_exchange_rate",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										},
										"sink": {
											"name": "n_exchange_rate",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										}
									},
									{
										"source": {
											"name": "c_computer_name",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "c_computer_name",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "c_sys_user",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "c_sys_user",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "c_sys_ip",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "c_sys_ip",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "n_multi_payment",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										},
										"sink": {
											"name": "n_multi_payment",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										}
									},
									{
										"source": {
											"name": "c_pay_code1",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "c_pay_code1",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "n_pay_amt1",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										},
										"sink": {
											"name": "n_pay_amt1",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										}
									},
									{
										"source": {
											"name": "c_pay_ac_code1",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "c_pay_ac_code1",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "c_pay_code2",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "c_pay_code2",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "n_pay_amt2",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										},
										"sink": {
											"name": "n_pay_amt2",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										}
									},
									{
										"source": {
											"name": "c_pay_ac_code2",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "c_pay_ac_code2",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "c_pay_code3",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "c_pay_code3",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "n_pay_amt3",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										},
										"sink": {
											"name": "n_pay_amt3",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										}
									},
									{
										"source": {
											"name": "c_pay_ac_code3",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "c_pay_ac_code3",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "c_pay_code4",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "c_pay_code4",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "n_pay_amt4",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										},
										"sink": {
											"name": "n_pay_amt4",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										}
									},
									{
										"source": {
											"name": "c_pay_ac_code4",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "c_pay_ac_code4",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "c_pay_code5",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "c_pay_code5",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "n_pay_amt5",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										},
										"sink": {
											"name": "n_pay_amt5",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										}
									},
									{
										"source": {
											"name": "c_pay_ac_code5",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "c_pay_ac_code5",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "n_marketplace_flag",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										},
										"sink": {
											"name": "n_marketplace_flag",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										}
									},
									{
										"source": {
											"name": "c_trader_code",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "c_trader_code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "n_trader_comm_total",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										},
										"sink": {
											"name": "n_trader_comm_total",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										}
									},
									{
										"source": {
											"name": "n_trader_charge_total",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										},
										"sink": {
											"name": "n_trader_charge_total",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										}
									},
									{
										"source": {
											"name": "n_trader_charge1_total",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										},
										"sink": {
											"name": "n_trader_charge1_total",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										}
									},
									{
										"source": {
											"name": "n_inter_pur",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										},
										"sink": {
											"name": "n_inter_pur",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										}
									},
									{
										"source": {
											"name": "c_order_id",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "c_order_id",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "c_debit_act_code",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "c_debit_act_code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "c_vat_act_code",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "c_vat_act_code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "c_purord_no",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "c_purord_no",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "n_share_disc",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										},
										"sink": {
											"name": "n_share_disc",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										}
									},
									{
										"source": {
											"name": "c_integration_code",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "c_integration_code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "c_cst_act_code",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "c_cst_act_code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "c_st_act_code",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "c_st_act_code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "c_amt_act_code",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "c_amt_act_code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "c_disc_act_code",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "c_disc_act_code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "c_discrs_act_code",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "c_discrs_act_code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "c_oth_act_code",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "c_oth_act_code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "n_update_stock",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										},
										"sink": {
											"name": "n_update_stock",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										}
									},
									{
										"source": {
											"name": "t_from_time",
											"type": "DateTime",
											"physicalType": "datetime2"
										},
										"sink": {
											"name": "t_from_time",
											"type": "DateTime",
											"physicalType": "datetime2"
										}
									},
									{
										"source": {
											"name": "t_to_time",
											"type": "DateTime",
											"physicalType": "datetime2"
										},
										"sink": {
											"name": "t_to_time",
											"type": "DateTime",
											"physicalType": "datetime2"
										}
									},
									{
										"source": {
											"name": "c_note",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "c_note",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "n_point_factor",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										},
										"sink": {
											"name": "n_point_factor",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										}
									},
									{
										"source": {
											"name": "n_gst_enabled",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										},
										"sink": {
											"name": "n_gst_enabled",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										}
									},
									{
										"source": {
											"name": "c_from_gst_no",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "c_from_gst_no",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "n_from_gst_type",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										},
										"sink": {
											"name": "n_from_gst_type",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										}
									},
									{
										"source": {
											"name": "c_to_gst_no",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "c_to_gst_no",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "n_sale_type",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										},
										"sink": {
											"name": "n_sale_type",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										}
									},
									{
										"source": {
											"name": "c_cgst_act_code",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "c_cgst_act_code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "n_cgst_amt",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										},
										"sink": {
											"name": "n_cgst_amt",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										}
									},
									{
										"source": {
											"name": "c_sgst_act_code",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "c_sgst_act_code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "n_sgst_amt",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										},
										"sink": {
											"name": "n_sgst_amt",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										}
									},
									{
										"source": {
											"name": "c_igst_act_code",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "c_igst_act_code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "n_igst_amt",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										},
										"sink": {
											"name": "n_igst_amt",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										}
									},
									{
										"source": {
											"name": "c_cess_act_code",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "c_cess_act_code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "n_cess_amt",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										},
										"sink": {
											"name": "n_cess_amt",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										}
									},
									{
										"source": {
											"name": "c_state_code",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "c_state_code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "c_eway_bill_no",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "c_eway_bill_no",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "n_pk",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										},
										"sink": {
											"name": "n_pk",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										}
									},
									{
										"source": {
											"name": "n_to_gst_type",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										},
										"sink": {
											"name": "n_to_gst_type",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										}
									},
									{
										"source": {
											"name": "c_print_format_code",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "c_print_format_code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "c_cess_rev_act_code",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "c_cess_rev_act_code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "c_cgst_rev_act_code",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "c_cgst_rev_act_code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "c_sgst_rev_act_code",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "c_sgst_rev_act_code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "c_igst_rev_act_code",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "c_igst_rev_act_code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "n_service_chg",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										},
										"sink": {
											"name": "n_service_chg",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										}
									},
									{
										"source": {
											"name": "c_port_code",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "c_port_code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "n_taxable_amt",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										},
										"sink": {
											"name": "n_taxable_amt",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										}
									},
									{
										"source": {
											"name": "n_pending_points",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										},
										"sink": {
											"name": "n_pending_points",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										}
									},
									{
										"source": {
											"name": "n_pay_ac1_flag",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										},
										"sink": {
											"name": "n_pay_ac1_flag",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										}
									},
									{
										"source": {
											"name": "n_pay_ac2_flag",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										},
										"sink": {
											"name": "n_pay_ac2_flag",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										}
									},
									{
										"source": {
											"name": "n_pay_ac3_flag",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										},
										"sink": {
											"name": "n_pay_ac3_flag",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										}
									},
									{
										"source": {
											"name": "n_pay_ac4_flag",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										},
										"sink": {
											"name": "n_pay_ac4_flag",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										}
									},
									{
										"source": {
											"name": "n_pay_ac5_flag",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										},
										"sink": {
											"name": "n_pay_ac5_flag",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										}
									},
									{
										"source": {
											"name": "d_eway_bill_date",
											"type": "DateTime",
											"physicalType": "datetime2"
										},
										"sink": {
											"name": "d_eway_bill_date",
											"type": "DateTime",
											"physicalType": "datetime2"
										}
									},
									{
										"source": {
											"name": "c_tran_gst_no",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "c_tran_gst_no",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "n_dist_km",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										},
										"sink": {
											"name": "n_dist_km",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										}
									},
									{
										"source": {
											"name": "c_service_amt_act_code",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "c_service_amt_act_code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "n_ip_det_seq",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										},
										"sink": {
											"name": "n_ip_det_seq",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										}
									},
									{
										"source": {
											"name": "c_aadhar_no",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "c_aadhar_no",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "c_doctor_address",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "c_doctor_address",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "c_act_sman_code",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "c_act_sman_code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "n_advance_amt",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										},
										"sink": {
											"name": "n_advance_amt",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										}
									},
									{
										"source": {
											"name": "c_ord_br_code",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "c_ord_br_code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "c_ord_prefix",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "c_ord_prefix",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "c_ord_year",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "c_ord_year",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "n_ord_no",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										},
										"sink": {
											"name": "n_ord_no",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										}
									},
									{
										"source": {
											"name": "n_ord_pk",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										},
										"sink": {
											"name": "n_ord_pk",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										}
									},
									{
										"source": {
											"name": "n_add_cess_amt",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										},
										"sink": {
											"name": "n_add_cess_amt",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										}
									},
									{
										"source": {
											"name": "c_add_cess_act_code",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "c_add_cess_act_code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "n_cogs_amt",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										},
										"sink": {
											"name": "n_cogs_amt",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										}
									},
									{
										"source": {
											"name": "c_inventory_act_code",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "c_inventory_act_code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "c_cogst_act_code",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "c_cogst_act_code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "c_admin_br_code",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "c_admin_br_code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "n_tcs_per",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										},
										"sink": {
											"name": "n_tcs_per",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										}
									},
									{
										"source": {
											"name": "n_tcs_taxable_amt",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										},
										"sink": {
											"name": "n_tcs_taxable_amt",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										}
									},
									{
										"source": {
											"name": "n_tcs_amt",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										},
										"sink": {
											"name": "n_tcs_amt",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 18,
											"precision": 38
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "InvMstOutputTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "SQL_EG_Inv_Mst",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Get Max Date Failure Mail",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Get Max Date From Invoice Master table",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://prod-03.centralindia.logic.azure.com:443/workflows/464eb5db81654a119fbde64f7815052d/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=mF2jqmQWzHvsdtjGxGf4ajGCuU9BPmu1x3S0gtBtHF8",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "{\n\"Process\":\"Get Max Date Failure Mail\",\n\"Pipeline\":\"@{pipeline().Pipeline}\",\n\"DataFactoryName\":\"@{pipeline().DataFactory}\",\n\"ErrorMessage\":\"@{activity('Get Max Date From Invoice Master table').Error.Message}\",\n\"Runid\":\"@{pipeline().RunId}\"\n}",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Copy data inv Det Query into File Failure Mail",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Copy data inv Det Query into File",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://prod-03.centralindia.logic.azure.com:443/workflows/464eb5db81654a119fbde64f7815052d/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=mF2jqmQWzHvsdtjGxGf4ajGCuU9BPmu1x3S0gtBtHF8",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "{\n\"Process\":\"Copy data inv Det Query into File Failure Mail\",\n\"Pipeline\":\"@{pipeline().Pipeline}\",\n\"DataFactoryName\":\"@{pipeline().DataFactory}\",\n\"ErrorMessage\":\"@{activity('Copy data inv Det Query into File').Error.Message}\",\n\"Runid\":\"@{pipeline().RunId}\"\n}",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Copy data EG Inv_det file to Staging Table Failure Mail",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Copy data EG Inv_det file to Staging Table",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://prod-03.centralindia.logic.azure.com:443/workflows/464eb5db81654a119fbde64f7815052d/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=mF2jqmQWzHvsdtjGxGf4ajGCuU9BPmu1x3S0gtBtHF8",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "{\n\"Process\":\"Copy data EG Inv_det file to Staging Table Failure Mail\",\n\"Pipeline\":\"@{pipeline().Pipeline}\",\n\"DataFactoryName\":\"@{pipeline().DataFactory}\",\n\"ErrorMessage\":\"@{activity('Copy data EG Inv_det file to Staging Table').Error.Message}\",\n\"Runid\":\"@{pipeline().RunId}\"\n}",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Copy data inv Mst Query into File Failure Mail",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Copy data inv Mst Query into File",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://prod-03.centralindia.logic.azure.com:443/workflows/464eb5db81654a119fbde64f7815052d/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=mF2jqmQWzHvsdtjGxGf4ajGCuU9BPmu1x3S0gtBtHF8",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "{\n\"Process\":\"Copy data inv Mst Query into File Failure Mail\",\n\"Pipeline\":\"@{pipeline().Pipeline}\",\n\"DataFactoryName\":\"@{pipeline().DataFactory}\",\n\"ErrorMessage\":\"@{activity('Copy data inv Mst Query into File').Error.Message}\",\n\"Runid\":\"@{pipeline().RunId}\"\n}",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Copy data EG inv_mst File to Staging table Failure Mail",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Copy data EG inv_mst File to Staging table",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://prod-03.centralindia.logic.azure.com:443/workflows/464eb5db81654a119fbde64f7815052d/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=mF2jqmQWzHvsdtjGxGf4ajGCuU9BPmu1x3S0gtBtHF8",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "{\n\"Process\":\"Copy data EG inv_mst File to Staging table Failure Mail\",\n\"Pipeline\":\"@{pipeline().Pipeline}\",\n\"DataFactoryName\":\"@{pipeline().DataFactory}\",\n\"ErrorMessage\":\"@{activity('Copy data EG inv_mst File to Staging table').Error.Message}\",\n\"Runid\":\"@{pipeline().RunId}\"\n}",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Copy data invoice master Failure Mail",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Copy data invoice master",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://prod-03.centralindia.logic.azure.com:443/workflows/464eb5db81654a119fbde64f7815052d/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=mF2jqmQWzHvsdtjGxGf4ajGCuU9BPmu1x3S0gtBtHF8",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "{\n\"Process\":\"Copy data invoice master Failure Mail\",\n\"Pipeline\":\"@{pipeline().Pipeline}\",\n\"DataFactoryName\":\"@{pipeline().DataFactory}\",\n\"ErrorMessage\":\"@{activity('Copy data invoice master').Error.Message}\",\n\"Runid\":\"@{pipeline().RunId}\"\n}",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Copy data inv Det stag to EG_inv_Det Table Failure Mail",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Copy data inv Det staging to EG_inv_Det Table",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://prod-03.centralindia.logic.azure.com:443/workflows/464eb5db81654a119fbde64f7815052d/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=mF2jqmQWzHvsdtjGxGf4ajGCuU9BPmu1x3S0gtBtHF8",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "{\n\"Process\":\"Copy data inv Det stag to EG_inv_Det Table Failure Mail\",\n\"Pipeline\":\"@{pipeline().Pipeline}\",\n\"DataFactoryName\":\"@{pipeline().DataFactory}\",\n\"ErrorMessage\":\"@{activity('Copy data inv Det staging to EG_inv_Det Table').Error.Message}\",\n\"Runid\":\"@{pipeline().RunId}\"\n}",
								"type": "Expression"
							}
						}
					},
					{
						"name": "inv mst Staging table to inv_mst Table Failure Mail",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Copy data inv Mst Staging table to EG inv_mst Table",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://prod-03.centralindia.logic.azure.com:443/workflows/464eb5db81654a119fbde64f7815052d/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=mF2jqmQWzHvsdtjGxGf4ajGCuU9BPmu1x3S0gtBtHF8",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "{\n\"Process\":\"inv mst Staging table to inv_mst Table Failure Mail\",\n\"Pipeline\":\"@{pipeline().Pipeline}\",\n\"DataFactoryName\":\"@{pipeline().DataFactory}\",\n\"ErrorMessage\":\"@{activity('Copy data inv Mst Staging table to EG inv_mst Table').Error.Message}\",\n\"Runid\":\"@{pipeline().RunId}\"\n}",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Invoice/T-7 Incremental Load Pipeline"
				},
				"annotations": [],
				"lastPublishTime": "2022-02-23T11:49:44Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Ds_Ecogreenv2')]",
				"[concat(variables('factoryId'), '/datasets/EG_Inv_Det_OutPutFile')]",
				"[concat(variables('factoryId'), '/datasets/OMSSqlServerTable')]",
				"[concat(variables('factoryId'), '/datasets/EG_Inv_Mst_OutPutFile')]",
				"[concat(variables('factoryId'), '/datasets/InvDetOutputTable')]",
				"[concat(variables('factoryId'), '/datasets/InvMstOutputTable')]",
				"[concat(variables('factoryId'), '/datasets/InvDetandInvMstInputTable')]",
				"[concat(variables('factoryId'), '/datasets/Inv_Master')]",
				"[concat(variables('factoryId'), '/datasets/SQL_EG_Inv_Det')]",
				"[concat(variables('factoryId'), '/datasets/SQL_EG_Inv_Mst')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Daily T-7 OMS Order Details Incremental Load')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Max Date from Order Detail",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "Select convert(varchar, DateAdd(DD,-7,max(order_date)), 23) as maxdate from OMS_Order_Details",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "OMSSqlServerTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "MySQL to SQL server",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Get Max Date from Order Detail",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "MySqlSource",
								"query": {
									"value": "SELECT DISTINCT \nws.sale_id AS Order_Id\n,ws.sale_code\n,ws.created_date AS Order_Date\n,STR_TO_DATE(ws.processing_date,'%Y-%m-%d %H:%i:%s') as processing_date\n,STR_TO_DATE(ws.invoice_date,'%Y-%m-%d %H:%i:%s') as invoice_date\n,ws.user_name AS Customer_Name\n,ws.Customer_id\n,ws.store_id\n,wd.rx_type AS RX_type\n,wd.product_id\n,wd.mrp\n,wd.price\n,wd.quantity\n,ws.coupon_discount AS discount_on_order\n,ws.coupon_code\n,ws.grand_total\n,ws.order_invoice_amt\n,ws.txn_status\n,ws.payment_type AS Payment_mode\n,ws.online_TXN\n,ws.ERP_transactionid AS ERP_Id\n,ws.order_invoice_no AS Invoice_no\n,ws.delivery_status AS Order_Status\n,ws.partial_invoice\n,ws.DMS_jobid\n,ws.dman_id\n,ws.dman_name\n,ws.thirdPartyJobStatus\n,ws.three_pl_name\n,STR_TO_DATE(ws.DMS_eta_IST,'%Y-%m-%d %H:%i:%s') AS Actual_Delivery_date\n,STR_TO_DATE(ws.delivered_date,'%Y-%m-%d %H:%i:%s') AS Delivered_date\n,ws.cancel_reason\n,ws.remark\n,ws.MFM_timeframe\n,ws.sale_platform\n,ws.dman_payment_status AS Reconciled\n,ws.collected_amount AS Collected_amount\n,wd.item_code\n,concat(ws.store_id, '/', ws.sale_id, '/', wd.item_code) as brcode_orderid_itemcode_key\n,ws.order_parent_id\n,ws.buyer\nFROM wellnessDB.order_details wd\nLEFT JOIN wellnessDB.sale ws ON wd.sale_id = ws.sale_id\nWHERE \nSTR_TO_DATE(ws.created_date,'%Y-%m-%d') >='@{activity('Get Max Date from Order Detail').output.firstRow.maxdate}'\nAND wd.status = 1\nORDER BY ws.sale_id ASC",
									"type": "Expression"
								}
							},
							"sink": {
								"type": "SqlServerSink",
								"preCopyScript": {
									"value": "Delete from OMS_Order_Details where \nconvert(date,order_date) >= '@{activity('Get Max Date from Order Detail').output.firstRow.maxdate}'",
									"type": "Expression"
								},
								"tableOption": "autoCreate"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "OMSMySqlTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "OMSSqlServerTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Store Procedure Update Flagging Columns",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "MySQL to SQL server",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[USP_Daily_Incremental_OMS_Order_Details]",
							"storedProcedureParameters": {
								"date": {
									"value": {
										"value": "@activity('Get Max Date from Order Detail').output.firstRow.maxdate",
										"type": "Expression"
									},
									"type": "DateTime"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Data360MSSQL",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Get Max Date from Order Detail Failure Mail",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Get Max Date from Order Detail",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://prod-03.centralindia.logic.azure.com:443/workflows/464eb5db81654a119fbde64f7815052d/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=mF2jqmQWzHvsdtjGxGf4ajGCuU9BPmu1x3S0gtBtHF8",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "{\n\"Process\":\"Get Max Date from Order Detail Failure Mail\",\n\"Pipeline\":\"@{pipeline().Pipeline}\",\n\"DataFactoryName\":\"@{pipeline().DataFactory}\",\n\"ErrorMessage\":\"@{activity('Get Max Date from Order Detail').Error.Message}\",\n\"Runid\":\"@{pipeline().RunId}\"\n}",
								"type": "Expression"
							}
						}
					},
					{
						"name": "MySQL to SQL OMS Order Details Failure Mail",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "MySQL to SQL server",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://prod-03.centralindia.logic.azure.com:443/workflows/464eb5db81654a119fbde64f7815052d/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=mF2jqmQWzHvsdtjGxGf4ajGCuU9BPmu1x3S0gtBtHF8",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "{\n\"Process\":\"MySQL to SQL OMS Order Details Failure Mail\",\n\"Pipeline\":\"@{pipeline().Pipeline}\",\n\"DataFactoryName\":\"@{pipeline().DataFactory}\",\n\"ErrorMessage\":\"@{activity('MySQL to SQL server').Error.Message}\",\n\"Runid\":\"@{pipeline().RunId}\"\n}",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Store Procedure Update Flagging Columns Failure Mail",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Store Procedure Update Flagging Columns",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://prod-03.centralindia.logic.azure.com:443/workflows/464eb5db81654a119fbde64f7815052d/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=mF2jqmQWzHvsdtjGxGf4ajGCuU9BPmu1x3S0gtBtHF8",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "{\n\"Process\":\"Store Procedure Update Flagging Columns Failure Mail\",\n\"Pipeline\":\"@{pipeline().Pipeline}\",\n\"DataFactoryName\":\"@{pipeline().DataFactory}\",\n\"ErrorMessage\":\"@{activity('Store Procedure Update Flagging Columns').Error.Message}\",\n\"Runid\":\"@{pipeline().RunId}\"\n}",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Order Details/Incremental Load Pipeline"
				},
				"annotations": [],
				"lastPublishTime": "2022-02-23T11:31:00Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/OMSSqlServerTable')]",
				"[concat(variables('factoryId'), '/datasets/OMSMySqlTable')]",
				"[concat(variables('factoryId'), '/linkedServices/Data360MSSQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Excel Dump Files')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data into Excel",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SybaseSource",
								"query": "Select ( cogs.c_br_code ) as c_br_code,\n\t\t( cogs.c_year ) as c_year,   \n\t\t( cogs.c_prefix ) as c_prefix,   \n\t\t( cogs.n_tran_no ) as n_tran_no,   \n\t\t( cogs.c_act_code ) as c_act_code,   \n\t\t( cogs.d_date ) as d_date,   \n\t\tSUM( cogs.n_amount ) as n_amount,   \n\t\t( cogs.c_opp_act_code ) as c_opp_act_code,   \n\t\t( cogs.c_ref_br_code ) as c_ref_br_code,\n\t\t( cogs.c_ref_no ) as c_ref_no,   \n\t\t( cogs.d_chq_date) as d_chq_date,   \n\t\t( cogs.c_remark ) as c_remark,   \n\t\t( cogs.c_act_name ) as c_act_name,   \n\t\t( cogs.c_opp_act_name ) as c_opp_act_name,\n\t\t( cogs.c_add_1 ) as c_add_1,\n\t\t( cogs.c_add_2 ) as c_add_2, \n\t\t( cogs.c_add_3 ) as c_add_3,\n\t\t( cogs.c_city ) as c_city,\n\t\t( cogs.n_ref_srno ) as n_ref_srno,\n\t\t( cogs.n_order_no ) as n_order_no,\n\t\t( cogs.recon_dt) as recon_dt,\n\t\t( if recon_dt is null then 0 else 1 endif ) as chq_pass,\n\t\t( cogs.multi_act_name) as multi_act_name,\n\t\tisnull( case when n_amount  > 0 then n_amount else 0 end,0) as Debit,\n\t\tisnull( case when n_amount  < 0 then n_amount else 0 end,0) as credit\nFrom\n(\n\tSELECT ( ledger.c_br_code ) as c_br_code,\n\t\t\t( ledger.c_year ) as c_year,   \n\t\t\t( ledger.c_prefix ) as c_prefix,   \n\t\t\t( ledger.n_tran_no ) as n_tran_no,   \n\t\t\t( ledger.c_act_code ) as c_act_code,   \n\t\t\t( ledger.d_date ) as d_date,   \n\t\t\t( ledger.n_amount ) as n_amount,   \n\t\t\t( ledger.c_opp_act_code ) as c_opp_act_code,   \n\t\t\t( ledger.c_ref_br_code ) as c_ref_br_code,\n\t\t\t( settle_mst_header.c_ref_no ) as c_ref_no,   \n\t\t\tdate(settle_mst_header.d_ref_date) as d_chq_date,   \n\t\t\t( settle_mst_header.c_remark ) as c_remark,   \n\t\t\t( act_mst_a.c_name ) as c_act_name,   \n\t\t\t( act_mst_b.c_name ) as c_opp_act_name,\n\t\t\t( act_mst_a.c_add_1 ) as c_add_1,\n\t\t\t( act_mst_a.c_add_2 ) as c_add_2, \n\t\t\t( act_mst_a.c_add_3 ) as c_add_3,\n\t\t\t( act_mst_a.c_city ) as c_city,\n\t\t\t( grn_mst.n_ref_srno ) as n_ref_srno,\n\t\t\t( gdn_mst.n_order_no ) as n_order_no,\n\t\t\t(d_reconcile_date) as recon_dt,\n\t\t\t(if recon_dt is null then 0 else 1 endif) as chq_pass,\n\t\t\tif ledger.c_opp_act_code='~~~~~~~~~~~~' then \n\t\t\t\t(select list(ac.c_name+' : '+string(n_amount),char(13)) from ledger ll , act_mst ac  where ac.c_code=ll.c_act_code and\n\t\t\t\t\t\tll.c_br_code=ledger.c_br_code and ll.c_year=ledger.c_year\n\t\t\t\t\t\tand ll.c_prefix=ledger.c_prefix and ll.n_tran_no=ledger.n_tran_no and \n\t\t\t\t\t\t(ledger.n_amount<0 and ll.n_amount>0 or ledger.n_amount>0 and ll.n_amount<0))\n\t\t\telse '' endif as multi_act_name\n    FROM ledger\n\t\t\t\tinner join (select c_br_code as brcode from branch_group_det where length('701') = 6 and c_code = '701' and  branch_group_det.n_cancel_flag = 0 \n            union \n            select c_code from act_mst where length('701')<> 6 and c_code >= (if '701' = 'zzz' then '701' else '701' endif ) and ( c_code <= '701' ) \n            ) brlist on brlist.brcode=ledger.c_ref_br_code  \n\t\t\tleft outer join settle_mst_header  on  ledger.c_br_code = settle_mst_header.c_br_code  and \n\t\t\t ledger.c_year = settle_mst_header.c_year  and \n          ledger.c_prefix = settle_mst_header.c_prefix  and \n          ledger.n_tran_no = settle_mst_header.n_srno  \n          left outer join grn_mst on  ledger.c_br_code = grn_mst.c_br_code  and \n\t\t\t\tledger.c_year = grn_mst.c_year  and \n\t\t\t\tledger.c_prefix = grn_mst.c_prefix  and \n\t\t\t\tledger.n_tran_no = grn_mst.n_srno\n\t\t\tleft outer join gdn_mst  on  ledger.c_br_code = gdn_mst.c_br_code  and \n\t\t\t\tledger.c_year = gdn_mst.c_year  and \n\t\t\t\tledger.c_prefix = gdn_mst.c_prefix  and \n\t\t\t\tledger.n_tran_no = gdn_mst.n_srno\n\t\t\t\tleft outer join reconcile_mst  on  ledger.c_br_code= reconcile_mst.c_br_code and ledger.c_year = reconcile_mst.c_year and\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  ledger.c_prefix = reconcile_mst.c_prefix and  ledger.n_tran_no = reconcile_mst.n_srno, \n          act_mst act_mst_a,   \n         act_mst act_mst_b  \n   WHERE \n         ( act_mst_a.c_code = ledger.c_act_code ) and \n         ( act_mst_b.c_code = ledger.c_opp_act_code ) and\t\n         ( ( ledger.d_date >= '2021-10-01' ) and\t\n         ( ledger.d_date <= getDate() ) and \n         ( ledger.c_act_code >= 'GC794' ) and \n         ( ledger.c_act_code <= 'GC794' )   and\n\t\t\t( ledger.n_amount <> 0) )\n\tUnion All\n\t SELECT ( ledger.c_br_code ) as c_br_code,\n\t\t\t( ledger.c_year ) as c_year,   \n\t\t\t( ledger.c_prefix ) as c_prefix,   \n\t\t\t( ledger.n_tran_no ) as n_tran_no,   \n\t\t\t( ledger.c_act_code ) as c_act_code,   \n\t\t\t( ledger.d_date ) as d_date,   \n\t\t\t( ledger.n_amount ) as n_amount,   \n\t\t\t( ledger.c_opp_act_code ) as c_opp_act_code,   \n\t\t\t( ledger.c_ref_br_code ) as c_ref_br_code,\n\t\t\t( settle_mst_header.c_ref_no ) as c_ref_no,   \n\t\t\tdate(settle_mst_header.d_ref_date) as d_chq_date,   \n\t\t\t( settle_mst_header.c_remark ) as c_remark,   \n\t\t\t( act_mst_a.c_name ) as c_act_name,   \n\t\t\t( act_mst_b.c_name ) as c_opp_act_name,\n\t\t\t( act_mst_a.c_add_1 ) as c_add_1,\n\t\t\t( act_mst_a.c_add_2 ) as c_add_2, \n\t\t\t( act_mst_a.c_add_3 ) as c_add_3,\n\t\t\t( act_mst_a.c_city ) as c_city,\n\t\t\t( grn_mst.n_ref_srno ) as n_ref_srno,\n\t\t\t( gdn_mst.n_order_no ) as n_order_no,\n\t\t\t(d_reconcile_date) as recon_dt,\n\t\t\t(if recon_dt is null then 0 else 1 endif) as chq_pass,\n\t\t\tif ledger.c_opp_act_code='~~~~~~~~~~~~' then \n\t\t\t\t(select list(ac.c_name+' : '+string(n_amount),char(13)) from ledger ll , act_mst ac  where ac.c_code=ll.c_act_code and\n\t\t\t\t\t\tll.c_br_code=ledger.c_br_code and ll.c_year=ledger.c_year\n\t\t\t\t\t\tand ll.c_prefix=ledger.c_prefix and ll.n_tran_no=ledger.n_tran_no and \n\t\t\t\t\t\t(ledger.n_amount<0 and ll.n_amount>0 or ledger.n_amount>0 and ll.n_amount<0))\n\t\t\telse '' endif as multi_act_name\n    FROM cogs_ledger as ledger\n\t\t\t\tinner join (select c_br_code as brcode from branch_group_det where length('701') = 6 and c_code = '701' and  branch_group_det.n_cancel_flag = 0 \n            union \n            select c_code from act_mst where length('701')<> 6 and c_code >= (if '701' = 'zzz' then '701' else '701' endif ) and ( c_code <= '701' ) \n            ) brlist on brlist.brcode=ledger.c_ref_br_code  \n\t\t\tleft outer join settle_mst_header  on  ledger.c_br_code = settle_mst_header.c_br_code  and \n\t\t\t ledger.c_year = settle_mst_header.c_year  and \n          ledger.c_prefix = settle_mst_header.c_prefix  and \n          ledger.n_tran_no = settle_mst_header.n_srno  \n          left outer join grn_mst on  ledger.c_br_code = grn_mst.c_br_code  and \n\t\t\t\tledger.c_year = grn_mst.c_year  and \n\t\t\t\tledger.c_prefix = grn_mst.c_prefix  and \n\t\t\t\tledger.n_tran_no = grn_mst.n_srno\n\t\t\tleft outer join gdn_mst  on  ledger.c_br_code = gdn_mst.c_br_code  and \n\t\t\t\tledger.c_year = gdn_mst.c_year  and \n\t\t\t\tledger.c_prefix = gdn_mst.c_prefix  and \n\t\t\t\tledger.n_tran_no = gdn_mst.n_srno\n\t\t\t\tleft outer join reconcile_mst  on  ledger.c_br_code= reconcile_mst.c_br_code and ledger.c_year = reconcile_mst.c_year and\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  ledger.c_prefix = reconcile_mst.c_prefix and  ledger.n_tran_no = reconcile_mst.n_srno, \n          act_mst act_mst_a,   \n         act_mst act_mst_b  \n   WHERE \n         ( act_mst_a.c_code = ledger.c_act_code ) and \n         ( act_mst_b.c_code = ledger.c_opp_act_code ) and\t\n         ( ( ledger.d_date >= '2021-10-01' ) and\t\n         ( ledger.d_date <= getDate() ) and \n         ( ledger.c_act_code >= 'GC794' ) and \n         ( ledger.c_act_code <= 'GC794' )   and\n\t\t\t( ledger.n_amount <> 0) ) --and :li_cogs =1\n) as cogs \nGroup By c_br_code,c_year,c_prefix,n_tran_no,c_act_code,d_date,c_opp_act_code,c_ref_br_code,c_ref_no,   \n\t\td_chq_date,c_remark,c_act_name,c_opp_act_name,c_add_1,c_add_2,c_add_3,c_city,n_ref_srno,\n\t\tn_order_no,recon_dt,multi_act_name\nUNION   ALL\n  SELECT ('') as c_br_code,\n\t\t\t('00') as c_year,   \n         ('OP') as c_prefix,   \n         ( 0 ) as c_tran_no,   \n         ( ledger.c_act_code ) as c_act_code,   \n         ( date('2021-10-21')) as d_date,   \n         sum(ledger.n_amount) as n_amount,   \n         ( '' ) as c_opp_act_code,   \n         ( '' ) as c_ref_br_code,   \n         ( '' ) as c_ref_no,   \n         date('2021-10-21') as d_chq_date,   \n         ( '' ) as c_remark,   \n         ( act_mst.c_name ) as c_act_name,   \n         ( 'Opening Balance' ) as c_opp_act_name,\n\t\t\t( act_mst.c_add_1 )  as c_add_1,\n\t\t\t( act_mst.c_add_2 )  as c_add_2, \n\t\t\t( act_mst.c_add_3 )  as c_add_3,\n\t\t\t( act_mst.c_city ) as c_city,\n\t\t\t(0) as n_ref_srno,\n\t\t\t(0) as n_order_no,\n\t\t\t( null )  as recon_dt,\n\t\t\t( 0 )  \tas chq_pass,\n\t\t\t( '' ) as multi_act_name\t,\n\t\tisnull( case when n_amount  > 0 then n_amount else 0 end,0) as Debit,\n\t\tisnull( case when n_amount  < 0 then n_amount else 0 end,0) as credit\n    FROM dba.ledger\n\t\t\t\tinner join (select c_br_code as brcode from dba.branch_group_det where length('701') = 6 and c_code = '701' and  branch_group_det.n_cancel_flag = 0 \n            union \n            select c_code from dba.act_mst where length('701')<> 6 and c_code >= (if '701' = 'zzz' then '701' else '701' endif ) and ( c_code <= '701' ) \n            ) brlist on brlist.brcode=ledger.c_ref_br_code,  \n         act_mst  \n   WHERE ( act_mst.c_code = ledger.c_act_code ) and  \n         ( ( ledger.d_date <= getDate() ) and\t\n         ( ledger.c_act_code >= 'GC794' ) and\t\n         ( ledger.c_act_code <= 'GC794' ) )   \nGROUP BY c_act_code,c_act_name,c_add_1,c_add_2,c_add_3,c_city\n\n\nUNION\n\n\nSelect ( cogs.c_br_code ) as c_br_code,\n\t\t( cogs.c_year ) as c_year,   \n\t\t( cogs.c_prefix ) as c_prefix,   \n\t\t( cogs.n_tran_no ) as n_tran_no,   \n\t\t( cogs.c_act_code ) as c_act_code,   \n\t\t( cogs.d_date ) as d_date,   \n\t\tSUM( cogs.n_amount ) as n_amount,   \n\t\t( cogs.c_opp_act_code ) as c_opp_act_code,   \n\t\t( cogs.c_ref_br_code ) as c_ref_br_code,\n\t\t( cogs.c_ref_no ) as c_ref_no,   \n\t\t( cogs.d_chq_date) as d_chq_date,   \n\t\t( cogs.c_remark ) as c_remark,   \n\t\t( cogs.c_act_name ) as c_act_name,   \n\t\t( cogs.c_opp_act_name ) as c_opp_act_name,\n\t\t( cogs.c_add_1 ) as c_add_1,\n\t\t( cogs.c_add_2 ) as c_add_2, \n\t\t( cogs.c_add_3 ) as c_add_3,\n\t\t( cogs.c_city ) as c_city,\n\t\t( cogs.n_ref_srno ) as n_ref_srno,\n\t\t( cogs.n_order_no ) as n_order_no,\n\t\t( cogs.recon_dt) as recon_dt,\n\t\t( if recon_dt is null then 0 else 1 endif ) as chq_pass,\n\t\t( cogs.multi_act_name) as multi_act_name,\n\t\tisnull( case when n_amount  > 0 then n_amount else 0 end,0) as Debit,\n\t\tisnull( case when n_amount  < 0 then n_amount else 0 end,0) as credit\nFrom\n(\n\tSELECT ( ledger.c_br_code ) as c_br_code,\n\t\t\t( ledger.c_year ) as c_year,   \n\t\t\t( ledger.c_prefix ) as c_prefix,   \n\t\t\t( ledger.n_tran_no ) as n_tran_no,   \n\t\t\t( ledger.c_act_code ) as c_act_code,   \n\t\t\t( ledger.d_date ) as d_date,   \n\t\t\t( ledger.n_amount ) as n_amount,   \n\t\t\t( ledger.c_opp_act_code ) as c_opp_act_code,   \n\t\t\t( ledger.c_ref_br_code ) as c_ref_br_code,\n\t\t\t( settle_mst_header.c_ref_no ) as c_ref_no,   \n\t\t\tdate(settle_mst_header.d_ref_date) as d_chq_date,   \n\t\t\t( settle_mst_header.c_remark ) as c_remark,   \n\t\t\t( act_mst_a.c_name ) as c_act_name,   \n\t\t\t( act_mst_b.c_name ) as c_opp_act_name,\n\t\t\t( act_mst_a.c_add_1 ) as c_add_1,\n\t\t\t( act_mst_a.c_add_2 ) as c_add_2, \n\t\t\t( act_mst_a.c_add_3 ) as c_add_3,\n\t\t\t( act_mst_a.c_city ) as c_city,\n\t\t\t( grn_mst.n_ref_srno ) as n_ref_srno,\n\t\t\t( gdn_mst.n_order_no ) as n_order_no,\n\t\t\t(d_reconcile_date) as recon_dt,\n\t\t\t(if recon_dt is null then 0 else 1 endif) as chq_pass,\n\t\t\tif ledger.c_opp_act_code='~~~~~~~~~~~~' then \n\t\t\t\t(select list(ac.c_name+' : '+string(n_amount),char(13)) from ledger ll , act_mst ac  where ac.c_code=ll.c_act_code and\n\t\t\t\t\t\tll.c_br_code=ledger.c_br_code and ll.c_year=ledger.c_year\n\t\t\t\t\t\tand ll.c_prefix=ledger.c_prefix and ll.n_tran_no=ledger.n_tran_no and \n\t\t\t\t\t\t(ledger.n_amount<0 and ll.n_amount>0 or ledger.n_amount>0 and ll.n_amount<0))\n\t\t\telse '' endif as multi_act_name\n    FROM ledger\n\t\t\t\tinner join (select c_br_code as brcode from branch_group_det where length('751') = 6 and c_code = '751' and  branch_group_det.n_cancel_flag = 0 \n            union \n            select c_code from act_mst where length('751')<> 6 and c_code >= (if '751' = 'zzz' then '751' else '751' endif ) and ( c_code <= '751' ) \n            ) brlist on brlist.brcode=ledger.c_ref_br_code  \n\t\t\tleft outer join settle_mst_header  on  ledger.c_br_code = settle_mst_header.c_br_code  and \n\t\t\t ledger.c_year = settle_mst_header.c_year  and \n          ledger.c_prefix = settle_mst_header.c_prefix  and \n          ledger.n_tran_no = settle_mst_header.n_srno  \n          left outer join grn_mst on  ledger.c_br_code = grn_mst.c_br_code  and \n\t\t\t\tledger.c_year = grn_mst.c_year  and \n\t\t\t\tledger.c_prefix = grn_mst.c_prefix  and \n\t\t\t\tledger.n_tran_no = grn_mst.n_srno\n\t\t\tleft outer join gdn_mst  on  ledger.c_br_code = gdn_mst.c_br_code  and \n\t\t\t\tledger.c_year = gdn_mst.c_year  and \n\t\t\t\tledger.c_prefix = gdn_mst.c_prefix  and \n\t\t\t\tledger.n_tran_no = gdn_mst.n_srno\n\t\t\t\tleft outer join reconcile_mst  on  ledger.c_br_code= reconcile_mst.c_br_code and ledger.c_year = reconcile_mst.c_year and\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  ledger.c_prefix = reconcile_mst.c_prefix and  ledger.n_tran_no = reconcile_mst.n_srno, \n          act_mst act_mst_a,   \n         act_mst act_mst_b  \n   WHERE \n         ( act_mst_a.c_code = ledger.c_act_code ) and \n         ( act_mst_b.c_code = ledger.c_opp_act_code ) and\t\n         ( ( ledger.d_date >= '2021-10-01' ) and\t\n         ( ledger.d_date <= getDate() ) and \n         ( ledger.c_act_code >= 'GC794' ) and \n         ( ledger.c_act_code <= 'GC794' )   and\n\t\t\t( ledger.n_amount <> 0) )\n\tUnion All\n\t SELECT ( ledger.c_br_code ) as c_br_code,\n\t\t\t( ledger.c_year ) as c_year,   \n\t\t\t( ledger.c_prefix ) as c_prefix,   \n\t\t\t( ledger.n_tran_no ) as n_tran_no,   \n\t\t\t( ledger.c_act_code ) as c_act_code,   \n\t\t\t( ledger.d_date ) as d_date,   \n\t\t\t( ledger.n_amount ) as n_amount,   \n\t\t\t( ledger.c_opp_act_code ) as c_opp_act_code,   \n\t\t\t( ledger.c_ref_br_code ) as c_ref_br_code,\n\t\t\t( settle_mst_header.c_ref_no ) as c_ref_no,   \n\t\t\tdate(settle_mst_header.d_ref_date) as d_chq_date,   \n\t\t\t( settle_mst_header.c_remark ) as c_remark,   \n\t\t\t( act_mst_a.c_name ) as c_act_name,   \n\t\t\t( act_mst_b.c_name ) as c_opp_act_name,\n\t\t\t( act_mst_a.c_add_1 ) as c_add_1,\n\t\t\t( act_mst_a.c_add_2 ) as c_add_2, \n\t\t\t( act_mst_a.c_add_3 ) as c_add_3,\n\t\t\t( act_mst_a.c_city ) as c_city,\n\t\t\t( grn_mst.n_ref_srno ) as n_ref_srno,\n\t\t\t( gdn_mst.n_order_no ) as n_order_no,\n\t\t\t(d_reconcile_date) as recon_dt,\n\t\t\t(if recon_dt is null then 0 else 1 endif) as chq_pass,\n\t\t\tif ledger.c_opp_act_code='~~~~~~~~~~~~' then \n\t\t\t\t(select list(ac.c_name+' : '+string(n_amount),char(13)) from ledger ll , act_mst ac  where ac.c_code=ll.c_act_code and\n\t\t\t\t\t\tll.c_br_code=ledger.c_br_code and ll.c_year=ledger.c_year\n\t\t\t\t\t\tand ll.c_prefix=ledger.c_prefix and ll.n_tran_no=ledger.n_tran_no and \n\t\t\t\t\t\t(ledger.n_amount<0 and ll.n_amount>0 or ledger.n_amount>0 and ll.n_amount<0))\n\t\t\telse '' endif as multi_act_name\n    FROM cogs_ledger as ledger\n\t\t\t\tinner join (select c_br_code as brcode from branch_group_det where length('751') = 6 and c_code = '751' and  branch_group_det.n_cancel_flag = 0 \n            union \n            select c_code from act_mst where length('751')<> 6 and c_code >= (if '751' = 'zzz' then '751' else '751' endif ) and ( c_code <= '751' ) \n            ) brlist on brlist.brcode=ledger.c_ref_br_code  \n\t\t\tleft outer join settle_mst_header  on  ledger.c_br_code = settle_mst_header.c_br_code  and \n\t\t\t ledger.c_year = settle_mst_header.c_year  and \n          ledger.c_prefix = settle_mst_header.c_prefix  and \n          ledger.n_tran_no = settle_mst_header.n_srno  \n          left outer join grn_mst on  ledger.c_br_code = grn_mst.c_br_code  and \n\t\t\t\tledger.c_year = grn_mst.c_year  and \n\t\t\t\tledger.c_prefix = grn_mst.c_prefix  and \n\t\t\t\tledger.n_tran_no = grn_mst.n_srno\n\t\t\tleft outer join gdn_mst  on  ledger.c_br_code = gdn_mst.c_br_code  and \n\t\t\t\tledger.c_year = gdn_mst.c_year  and \n\t\t\t\tledger.c_prefix = gdn_mst.c_prefix  and \n\t\t\t\tledger.n_tran_no = gdn_mst.n_srno\n\t\t\t\tleft outer join reconcile_mst  on  ledger.c_br_code= reconcile_mst.c_br_code and ledger.c_year = reconcile_mst.c_year and\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  ledger.c_prefix = reconcile_mst.c_prefix and  ledger.n_tran_no = reconcile_mst.n_srno, \n          act_mst act_mst_a,   \n         act_mst act_mst_b  \n   WHERE \n         ( act_mst_a.c_code = ledger.c_act_code ) and \n         ( act_mst_b.c_code = ledger.c_opp_act_code ) and\t\n         ( ( ledger.d_date >= '2021-10-01' ) and\t\n         ( ledger.d_date <= getDate() ) and \n         ( ledger.c_act_code >= 'GC794' ) and \n         ( ledger.c_act_code <= 'GC794' )   and\n\t\t\t( ledger.n_amount <> 0) ) --and :li_cogs =1\n) as cogs \nGroup By c_br_code,c_year,c_prefix,n_tran_no,c_act_code,d_date,c_opp_act_code,c_ref_br_code,c_ref_no,   \n\t\td_chq_date,c_remark,c_act_name,c_opp_act_name,c_add_1,c_add_2,c_add_3,c_city,n_ref_srno,\n\t\tn_order_no,recon_dt,multi_act_name\nUNION   ALL\n  SELECT ('') as c_br_code,\n\t\t\t('00') as c_year,   \n         ('OP') as c_prefix,   \n         ( 0 ) as c_tran_no,   \n         ( ledger.c_act_code ) as c_act_code,   \n         ( date('2021-10-21')) as d_date,   \n         sum(ledger.n_amount) as n_amount,   \n         ( '' ) as c_opp_act_code,   \n         ( '' ) as c_ref_br_code,   \n         ( '' ) as c_ref_no,   \n         date('2021-10-21') as d_chq_date,   \n         ( '' ) as c_remark,   \n         ( act_mst.c_name ) as c_act_name,   \n         ( 'Opening Balance' ) as c_opp_act_name,\n\t\t\t( act_mst.c_add_1 )  as c_add_1,\n\t\t\t( act_mst.c_add_2 )  as c_add_2, \n\t\t\t( act_mst.c_add_3 )  as c_add_3,\n\t\t\t( act_mst.c_city ) as c_city,\n\t\t\t(0) as n_ref_srno,\n\t\t\t(0) as n_order_no,\n\t\t\t( null )  as recon_dt,\n\t\t\t( 0 )  \tas chq_pass,\n\t\t\t( '' ) as multi_act_name\t,\n\t\tisnull( case when n_amount  > 0 then n_amount else 0 end,0) as Debit,\n\t\tisnull( case when n_amount  < 0 then n_amount else 0 end,0) as credit\n    FROM dba.ledger\n\t\t\t\tinner join (select c_br_code as brcode from dba.branch_group_det where length('751') = 6 and c_code = '751' and  branch_group_det.n_cancel_flag = 0 \n            union \n            select c_code from dba.act_mst where length('751')<> 6 and c_code >= (if '751' = 'zzz' then '751' else '751' endif ) and ( c_code <= '751' ) \n            ) brlist on brlist.brcode=ledger.c_ref_br_code,  \n         act_mst  \n   WHERE ( act_mst.c_code = ledger.c_act_code ) and  \n         ( ( ledger.d_date <= getDate() ) and\t\n         ( ledger.c_act_code >= 'GC794' ) and\t\n         ( ledger.c_act_code <= 'GC794' ) )   \nGROUP BY c_act_code,c_act_name,c_add_1,c_add_2,c_add_3,c_city"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "Ds_Ecogreenv2",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ExcelOutPutFile",
								"type": "DatasetReference",
								"parameters": {
									"FileName": "paytemMPR"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Excel OR CSV Dump"
				},
				"annotations": [],
				"lastPublishTime": "2022-02-04T06:15:13Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Ds_Ecogreenv2')]",
				"[concat(variables('factoryId'), '/datasets/ExcelOutPutFile')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Fill Ratio Backup')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Metadata",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "InventoryFolder",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "ForEachFolder",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Metadata",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadata').output.childItems",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Copy data inv det",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Copy data Gdn Det",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [
										{
											"name": "Source",
											"value": "inventory/@{item().name}/grn_det"
										},
										{
											"name": "Destination",
											"value": "dbo.grn_det"
										}
									],
									"typeProperties": {
										"source": {
											"type": "ParquetSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"modifiedDatetimeStart": "2021-08-01T00:00:00Z",
												"modifiedDatetimeEnd": "2021-08-17T00:00:00Z",
												"enablePartitionDiscovery": false
											}
										},
										"sink": {
											"type": "SqlServerSink",
											"tableOption": "autoCreate"
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "c_br_code",
														"type": "String",
														"physicalType": "UTF8"
													},
													"sink": {
														"name": "c_br_code",
														"type": "Int32",
														"physicalType": "int"
													}
												},
												{
													"source": {
														"name": "c_item_code",
														"type": "String",
														"physicalType": "UTF8"
													},
													"sink": {
														"name": "grn_item_code",
														"type": "Int64",
														"physicalType": "bigint"
													}
												},
												{
													"source": {
														"name": "c_year",
														"type": "String",
														"physicalType": "UTF8"
													},
													"sink": {
														"name": "c_year",
														"type": "Int32",
														"physicalType": "int"
													}
												},
												{
													"source": {
														"name": "c_prefix",
														"type": "String",
														"physicalType": "UTF8"
													},
													"sink": {
														"name": "c_prefix",
														"type": "String",
														"physicalType": "nvarchar"
													}
												},
												{
													"source": {
														"name": "n_srno",
														"type": "Decimal",
														"physicalType": "DECIMAL"
													},
													"sink": {
														"name": "n_srno",
														"type": "Int64",
														"physicalType": "bigint"
													}
												},
												{
													"source": {
														"name": "d_date",
														"type": "DateTime",
														"physicalType": "INT96"
													},
													"sink": {
														"name": "d_date",
														"type": "DateTime",
														"physicalType": "datetime"
													}
												},
												{
													"source": {
														"name": "n_qty",
														"type": "Decimal",
														"physicalType": "DECIMAL"
													},
													"sink": {
														"name": "grn_qty",
														"type": "Double",
														"physicalType": "float"
													}
												},
												{
													"source": {
														"name": "n_amount",
														"type": "Decimal",
														"physicalType": "DECIMAL"
													},
													"sink": {
														"name": "grn_amount",
														"type": "Double",
														"physicalType": "float"
													}
												}
											],
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "InvDetInputFile",
											"type": "DatasetReference",
											"parameters": {
												"FolderName": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "InvDetOutputTable",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								},
								{
									"name": "Copy data Gdn Det",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ParquetSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"modifiedDatetimeStart": "2021-08-01T00:00:00Z",
												"modifiedDatetimeEnd": "2021-08-17T00:00:00Z",
												"enablePartitionDiscovery": false
											}
										},
										"sink": {
											"type": "SqlServerSink",
											"preCopyScript": "truncate table dbo.gdn_det_staging"
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "c_br_code",
														"type": "String",
														"physicalType": "UTF8"
													},
													"sink": {
														"name": "c_br_code",
														"type": "Int32",
														"physicalType": "int"
													}
												},
												{
													"source": {
														"name": "c_item_code",
														"type": "String",
														"physicalType": "UTF8"
													},
													"sink": {
														"name": "gdn_item_code",
														"type": "Int64",
														"physicalType": "bigint"
													}
												},
												{
													"source": {
														"name": "d_ldate",
														"type": "DateTime",
														"physicalType": "INT96"
													},
													"sink": {
														"name": "d_idate",
														"type": "DateTime",
														"physicalType": "datetime"
													}
												},
												{
													"source": {
														"name": "c_year",
														"type": "String",
														"physicalType": "UTF8"
													},
													"sink": {
														"name": "c_year",
														"type": "Int32",
														"physicalType": "int"
													}
												},
												{
													"source": {
														"name": "c_prefix",
														"type": "String",
														"physicalType": "UTF8"
													},
													"sink": {
														"name": "c_prefix",
														"type": "String",
														"physicalType": "nvarchar"
													}
												},
												{
													"source": {
														"name": "n_srno",
														"type": "Decimal",
														"physicalType": "DECIMAL"
													},
													"sink": {
														"name": "n_srno",
														"type": "Int64",
														"physicalType": "bigint"
													}
												},
												{
													"source": {
														"name": "n_seq",
														"type": "Decimal",
														"physicalType": "DECIMAL"
													},
													"sink": {
														"name": "n_seq",
														"type": "Int32",
														"physicalType": "int"
													}
												},
												{
													"source": {
														"name": "d_date",
														"type": "DateTime",
														"physicalType": "INT96"
													},
													"sink": {
														"name": "d_date",
														"type": "DateTime",
														"physicalType": "datetime"
													}
												},
												{
													"source": {
														"name": "n_qty",
														"type": "Decimal",
														"physicalType": "DECIMAL"
													},
													"sink": {
														"name": "gdn_qty",
														"type": "Double",
														"physicalType": "float"
													}
												},
												{
													"source": {
														"name": "n_pur_rate",
														"type": "Decimal",
														"physicalType": "DECIMAL"
													},
													"sink": {
														"name": "n_pur_rate",
														"type": "Double",
														"physicalType": "float"
													}
												},
												{
													"source": {
														"name": "n_amount",
														"type": "Decimal",
														"physicalType": "DECIMAL"
													},
													"sink": {
														"name": "gdn_amount",
														"type": "Double",
														"physicalType": "float"
													}
												},
												{
													"source": {
														"name": "n_sale_rate",
														"type": "Decimal",
														"physicalType": "DECIMAL"
													},
													"sink": {
														"name": "n_sale_rate",
														"type": "Double",
														"physicalType": "float"
													}
												},
												{
													"source": {
														"name": "n_taxable_amt",
														"type": "Decimal",
														"physicalType": "DECIMAL"
													},
													"sink": {
														"name": "n_taxable_amt",
														"type": "Double",
														"physicalType": "float"
													}
												},
												{
													"source": {
														"name": "n_cogs_amt",
														"type": "Decimal",
														"physicalType": "DECIMAL"
													},
													"sink": {
														"name": "n_cogs_amt",
														"type": "Double",
														"physicalType": "float"
													}
												}
											],
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "GdnDetInputFile",
											"type": "DatasetReference",
											"parameters": {
												"FolderName": "@item().name"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "GdnDetOutputTable",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								},
								{
									"name": "Copy data Order Det",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Copy data inv det",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ParquetSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"modifiedDatetimeStart": "2021-08-01T00:00:00Z",
												"modifiedDatetimeEnd": "2021-08-17T00:00:00Z",
												"enablePartitionDiscovery": false
											}
										},
										"sink": {
											"type": "SqlServerSink",
											"tableOption": "autoCreate"
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "OrderDetInputFile",
											"type": "DatasetReference",
											"parameters": {
												"FolderName": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "OrderDetOutputTable",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								},
								{
									"name": "Copy data Order Mst",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Copy data Order Det",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ParquetSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"modifiedDatetimeStart": "2021-08-01T00:00:00Z",
												"modifiedDatetimeEnd": "2021-08-17T00:00:00Z",
												"enablePartitionDiscovery": false
											}
										},
										"sink": {
											"type": "SqlServerSink",
											"tableOption": "autoCreate"
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "OrderMstInputFile",
											"type": "DatasetReference",
											"parameters": {
												"FolderName": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "OrderMstOutputTable",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2021-08-17T09:50:22Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/InventoryFolder')]",
				"[concat(variables('factoryId'), '/datasets/InvDetInputFile')]",
				"[concat(variables('factoryId'), '/datasets/InvDetOutputTable')]",
				"[concat(variables('factoryId'), '/datasets/GdnDetInputFile')]",
				"[concat(variables('factoryId'), '/datasets/GdnDetOutputTable')]",
				"[concat(variables('factoryId'), '/datasets/OrderDetInputFile')]",
				"[concat(variables('factoryId'), '/datasets/OrderDetOutputTable')]",
				"[concat(variables('factoryId'), '/datasets/OrderMstInputFile')]",
				"[concat(variables('factoryId'), '/datasets/OrderMstOutputTable')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Fill Ratio')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.FolderNameArray",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Order Det_copy1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ParquetSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"sink": {
											"type": "SqlServerSink",
											"tableOption": "autoCreate"
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "OrderDetInputFile",
											"type": "DatasetReference",
											"parameters": {
												"FolderName": {
													"value": "@item()",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "OrderDetOutputTable",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								},
								{
									"name": "Order Mst_copy1",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Inv Det_copy1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ParquetSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"sink": {
											"type": "SqlServerSink",
											"tableOption": "autoCreate"
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "OrderMstInputFile",
											"type": "DatasetReference",
											"parameters": {
												"FolderName": {
													"value": "@item()",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "OrderMstOutputTable",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								},
								{
									"name": "Inv Det_copy1",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Gdn Det_copy1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ParquetSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"sink": {
											"type": "SqlServerSink",
											"tableOption": "autoCreate"
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "InvDetInputFile",
											"type": "DatasetReference",
											"parameters": {
												"FolderName": {
													"value": "@item()",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "InvDetOutputTable",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								},
								{
									"name": "Gdn Det_copy1",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Order Det_copy1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ParquetSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"sink": {
											"type": "SqlServerSink",
											"tableOption": "autoCreate"
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "GdnDetInputFile",
											"type": "DatasetReference",
											"parameters": {
												"FolderName": {
													"value": "@item()",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "GdnDetOutputTable",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								},
								{
									"name": "Copy data Inv Mst",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Order Mst_copy1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ParquetSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"sink": {
											"type": "SqlServerSink",
											"tableOption": "autoCreate"
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "InvMstInputFile",
											"type": "DatasetReference",
											"parameters": {
												"FolderName": {
													"value": "@item()",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "InvMstOutputTable",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"FolderNameArray": {
						"type": "array",
						"defaultValue": [
							"2021-08-01",
							"2021-08-02Sync",
							"2021-08-03",
							"2021-08-04",
							"2021-08-05Sync",
							"2021-08-06",
							"2021-08-07",
							"2021-08-08Sync",
							"2021-08-09",
							"2021-08-10",
							"2021-08-11",
							"2021-08-12",
							"2021-08-13",
							"2021-08-14",
							"2021-08-15",
							"2021-08-16",
							"2021-08-17"
						]
					}
				},
				"annotations": [],
				"lastPublishTime": "2021-08-18T18:45:21Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/OrderDetInputFile')]",
				"[concat(variables('factoryId'), '/datasets/OrderDetOutputTable')]",
				"[concat(variables('factoryId'), '/datasets/OrderMstInputFile')]",
				"[concat(variables('factoryId'), '/datasets/OrderMstOutputTable')]",
				"[concat(variables('factoryId'), '/datasets/InvDetInputFile')]",
				"[concat(variables('factoryId'), '/datasets/InvDetOutputTable')]",
				"[concat(variables('factoryId'), '/datasets/GdnDetInputFile')]",
				"[concat(variables('factoryId'), '/datasets/GdnDetOutputTable')]",
				"[concat(variables('factoryId'), '/datasets/InvMstInputFile')]",
				"[concat(variables('factoryId'), '/datasets/InvMstOutputTable')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Full Load Amazon Data')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data Amazon Item Data",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "MySqlSource",
								"query": "SELECT \nDISTINCT \nws.sale_id AS Order_Id\n,ws.sale_code\n,ws.created_date AS Order_Date\n,STR_TO_DATE(ws.processing_date,'%Y-%m-%d %H:%i:%s') as processing_date\n,STR_TO_DATE(ws.invoice_date,'%Y-%m-%d %H:%i:%s') as invoice_date\n,ws.user_name AS Customer_Name\n,ws.Customer_id\n,ws.store_id\n,wd.rx_type AS RX_type\n,wd.product_id\n,wd.mrp\n,wd.price\n,wd.quantity\n,ws.coupon_discount AS discount_on_order\n,ws.coupon_code\n,ws.grand_total\n,ws.order_invoice_amt\n,ws.txn_status\n,ws.payment_type AS Payment_mode\n,ws.online_TXN\n,ws.ERP_transactionid AS ERP_Id\n,ws.order_invoice_no AS Invoice_no\n,ws.delivery_status AS Order_Status\n,ws.partial_invoice\n,ws.DMS_jobid\n,ws.dman_id\n,ws.dman_name\n,ws.thirdPartyJobStatus\n,ws.three_pl_name\n,STR_TO_DATE(ws.DMS_eta_IST,'%Y-%m-%d %H:%i:%s') AS Actual_Delivery_date\n,STR_TO_DATE(ws.delivered_date,'%Y-%m-%d %H:%i:%s') AS Delivered_date\n,ws.cancel_reason\n,ws.remark\n,ws.MFM_timeframe\n,ws.sale_platform\n,ws.dman_payment_status AS Reconciled\n,ws.collected_amount AS Collected_amount\n,p.item_code\n,concat(ws.store_id, '/', ws.sale_id, '/', p.item_code) as brcode_orderid_itemcode_key\n,ws.order_parent_id\n,ws.buyer\nFROM wellnessDB.order_details wd\nLEFT JOIN wellnessDB.sale ws ON wd.sale_id = ws.sale_id\nleft JOIN setproduct_items sp ON sp.set_id=wd.product_id\nleft JOIN product p ON sp.product_id=p.product_id\nWHERE ws.created_date BETWEEN ('2021-04-01') AND ('2021-12-14')\nAND wd.status = 1 and ws.sale_platform='6' \nand p.item_code IS NOT NULL\nORDER BY ws.sale_id ASC\n"
							},
							"sink": {
								"type": "SqlServerSink",
								"preCopyScript": "truncate table Amazon_OMS_Order_Details_staging",
								"tableOption": "autoCreate"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "OMSMySqlTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Amazon_Item_OutPutTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Stored procedure update columns",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy data Amazon Item Data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[usp_Amazon_Order_deatils_update_columns]"
						},
						"linkedServiceName": {
							"referenceName": "Data360MSSQL",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Order Details"
				},
				"annotations": [],
				"lastPublishTime": "2022-02-12T14:45:54Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/OMSMySqlTable')]",
				"[concat(variables('factoryId'), '/datasets/Amazon_Item_OutPutTable')]",
				"[concat(variables('factoryId'), '/linkedServices/Data360MSSQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Full Load AppsFlyer Data')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Loads Customer Master",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[usp_appsflyer_customer_master]"
						},
						"linkedServiceName": {
							"referenceName": "Data360MSSQL",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Load Appsflyer flags",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Loads Customer Master",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[usp_Appsflyer_update_flags]"
						},
						"linkedServiceName": {
							"referenceName": "Data360MSSQL",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "AppsFlyer"
				},
				"annotations": [],
				"lastPublishTime": "2021-10-13T03:59:51Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Data360MSSQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Full Load Cancel Order Details')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "MySQL to SQL server Cancel Order",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "MySqlSource",
								"query": "SELECT DISTINCT\n ws.sale_id AS Order_Id\n,ws.sale_code\n,ws.created_date AS Order_Date\n,STR_TO_DATE(ws.processing_date,'%Y-%m-%d %H:%i:%s') as processing_date\n,STR_TO_DATE(ws.invoice_date,'%Y-%m-%d %H:%i:%s') as invoice_date\n,ws.user_name AS Customer_Name\n,ws.Customer_id\n,ws.store_id\n,wd.rx_type AS RX_type\n,wd.product_id\n,wd.mrp\n,wd.price\n,wd.quantity\n,ws.coupon_discount AS discount_on_order\n,ws.coupon_code\n,ws.grand_total\n,ws.order_invoice_amt\n,ws.txn_status\n,ws.payment_type AS Payment_mode\n,ws.online_TXN\n,ws.ERP_transactionid AS ERP_Id\n,ws.order_invoice_no AS Invoice_no\n,ws.delivery_status AS Order_Status\n,ws.partial_invoice\n,ws.DMS_jobid\n,ws.dman_id\n,ws.dman_name\n,ws.thirdPartyJobStatus\n,ws.three_pl_name\n,STR_TO_DATE(ws.DMS_eta_IST,'%Y-%m-%d %H:%i:%s') AS Actual_Delivery_date\n,STR_TO_DATE(ws.delivered_date,'%Y-%m-%d %H:%i:%s') AS Delivered_date\n,ws.cancel_reason\n,ws.remark\n,ws.MFM_timeframe\n,ws.sale_platform\n,ws.dman_payment_status AS Reconciled\n,ws.collected_amount AS Collected_amount\n,wd.item_code\n,concat(ws.store_id, '/', ws.sale_id, '/', wd.item_code) as brcode_orderid_itemcode_key\n,ws.order_parent_id\n,ws.buyer\nFROM  wellnessDB.order_details wd\nLEFT JOIN wellnessDB.sale ws ON wd.sale_id = ws.sale_id\nWHERE ws.created_date BETWEEN ('2021-04-01') AND ('2021-12-14')\nAND wd.status = 1 and ws.delivery_status like '%cancel%'\nORDER BY ws.sale_id ASC;"
							},
							"sink": {
								"type": "SqlServerSink",
								"preCopyScript": "truncate table OMS_Cancel_Order_Details;",
								"tableOption": "autoCreate"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "OMSMySqlTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "OMS_CancelOrder_Outputtable",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Stored procedure update columns",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "MySQL to SQL server Cancel Order",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[usp_Cancel_Order_deatils_update_columns]"
						},
						"linkedServiceName": {
							"referenceName": "Data360MSSQL",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Order Details"
				},
				"annotations": [],
				"lastPublishTime": "2021-12-14T15:44:53Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/OMSMySqlTable')]",
				"[concat(variables('factoryId'), '/datasets/OMS_CancelOrder_Outputtable')]",
				"[concat(variables('factoryId'), '/linkedServices/Data360MSSQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Full Load Channel Master')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data Channel Master",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "MySqlSource",
								"query": "select * from channel_master;"
							},
							"sink": {
								"type": "SqlServerSink",
								"preCopyScript": "drop table OMS_Channel_Master",
								"tableOption": "autoCreate"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "OMSMySqlTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ChannelMaster_OutPutTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Copy data Channel Master Failure Mail",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Copy data Channel Master",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://prod-03.centralindia.logic.azure.com:443/workflows/464eb5db81654a119fbde64f7815052d/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=mF2jqmQWzHvsdtjGxGf4ajGCuU9BPmu1x3S0gtBtHF8",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "{\n\"Process\":\"Copy data Channel Master Failure Mail\",\n\"Pipeline\":\"@{pipeline().Pipeline}\",\n\"DataFactoryName\":\"@{pipeline().DataFactory}\",\n\"ErrorMessage\":\"@{activity('Copy data Channel Master').Error.Message}\",\n\"Runid\":\"@{pipeline().RunId}\"\n}",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Master"
				},
				"annotations": [],
				"lastPublishTime": "2021-10-26T03:55:32Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/OMSMySqlTable')]",
				"[concat(variables('factoryId'), '/datasets/ChannelMaster_OutPutTable')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Full Load Customer Retention')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Update Customer Retention Data",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[USP_Customer_Retention]"
						},
						"linkedServiceName": {
							"referenceName": "Data360MSSQL",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Customer Retention Failure Mail",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Update Customer Retention Data",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://prod-03.centralindia.logic.azure.com:443/workflows/464eb5db81654a119fbde64f7815052d/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=mF2jqmQWzHvsdtjGxGf4ajGCuU9BPmu1x3S0gtBtHF8",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "{\n\"Process\":\"Copy data into Excel\",\n\"Pipeline\":\"@{pipeline().Pipeline}\",\n\"DataFactoryName\":\"@{pipeline().DataFactory}\",\n\"ErrorMessage\":\"@{activity('Update Customer Retention Data').Error.Message}\",\n\"Runid\":\"@{pipeline().RunId}\"\n}",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "AppsFlyer"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Data360MSSQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Full Load EG Product Master')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data Product Master",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "MySqlSource",
								"query": "SELECT wp.item_code\n,wp.item_fullname\n,wp.mrp\n,cm.channel_name\n,cp.publish_status\nFROM wellnessDB.product wp\nJOIN wellnessDB.channel_publish cp ON wp.product_id = cp.product_id\nJOIN wellnessDB.channel_master cm ON cp.channel_id = cm.channel_id\nWHERE wp.is_main_product = 0;"
							},
							"sink": {
								"type": "SqlServerSink",
								"preCopyScript": "truncate table Eco_Green_Product_Master;",
								"tableOption": "autoCreate"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "OMSMySqlTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ProductMasterOutputTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Copy data Product Master Failure Mail",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Copy data Product Master",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://prod-03.centralindia.logic.azure.com:443/workflows/464eb5db81654a119fbde64f7815052d/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=mF2jqmQWzHvsdtjGxGf4ajGCuU9BPmu1x3S0gtBtHF8",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "{\n\"Process\":\"Copy data Product Master Failure Mail\",\n\"Pipeline\":\"@{pipeline().Pipeline}\",\n\"DataFactoryName\":\"@{pipeline().DataFactory}\",\n\"ErrorMessage\":\"@{activity('Copy data Product Master').Error.Message}\",\n\"Runid\":\"@{pipeline().RunId}\"\n}",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "ECO Green"
				},
				"annotations": [],
				"lastPublishTime": "2022-02-24T03:46:47Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/OMSMySqlTable')]",
				"[concat(variables('factoryId'), '/datasets/ProductMasterOutputTable')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Full Load EG pur det')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data Eco Green Pur Det",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SybaseSource",
								"query": "Select * ,\n(c_br_code+'/'+c_year+'/'+c_prefix+'/'+ cast(cast(n_Order_no as float) as varchar) ) 'brcode_year_prefix_orderno_key'\n from pur_det where c_mf_code in ('MF0764','MF4649','MF5885','MF1235','MF1432','MF1861')"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "Ds_Ecogreenv2",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "EG_Pur_Det_OutPutFile",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Copy data eco green pur det file to table",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Copy data Eco Green Pur Det",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "SqlServerSink",
								"tableOption": "autoCreate"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "EG_Pur_Det_OutPutFile",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "EG_Pur_Det_OutPutTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "ECO Green"
				},
				"annotations": [],
				"lastPublishTime": "2021-11-18T13:24:49Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Ds_Ecogreenv2')]",
				"[concat(variables('factoryId'), '/datasets/EG_Pur_Det_OutPutFile')]",
				"[concat(variables('factoryId'), '/datasets/EG_Pur_Det_OutPutTable')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Full Load HelthTech GC238 Credit')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data HelthTech GC238 Credit",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Delete File",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SybaseSource",
								"query": "Select ( cogs.c_br_code ) as c_br_code,\n\t\t( cogs.c_year ) as c_year,   \n\t\t( cogs.c_prefix ) as c_prefix,   \n\t\t( cogs.n_tran_no ) as n_tran_no,   \n\t\t( cogs.c_act_code ) as c_act_code,   \n\t\t( cogs.d_date ) as d_date,   \n\t\tSUM( cogs.n_amount ) as n_amount,   \n\t\t( cogs.c_opp_act_code ) as c_opp_act_code,   \n\t\t( cogs.c_ref_br_code ) as c_ref_br_code,\n\t\t( cogs.c_ref_no ) as c_ref_no,   \n\t\t( cogs.d_chq_date) as d_chq_date,   \n\t\t( cogs.c_remark ) as c_remark,   \n\t\t( cogs.c_act_name ) as c_act_name,   \n\t\t( cogs.c_opp_act_name ) as c_opp_act_name,\n\t\t( cogs.c_add_1 ) as c_add_1,\n\t\t( cogs.c_add_2 ) as c_add_2, \n\t\t( cogs.c_add_3 ) as c_add_3,\n\t\t( cogs.c_city ) as c_city,\n\t\t( cogs.n_ref_srno ) as n_ref_srno,\n\t\t( cogs.n_order_no ) as n_order_no,\n\t\t( cogs.recon_dt) as recon_dt,\n\t\t( if recon_dt is null then 0 else 1 endif ) as chq_pass,\n\t\t( cogs.multi_act_name) as multi_act_name,\n\t\tisnull( case when n_amount  > 0 then n_amount else 0 end,0) as Debit,\n\t\tisnull( case when n_amount  < 0 then n_amount else 0 end,0) as credit\nFrom\n(\n\tSELECT ( ledger.c_br_code ) as c_br_code,\n\t\t\t( ledger.c_year ) as c_year,   \n\t\t\t( ledger.c_prefix ) as c_prefix,   \n\t\t\t( ledger.n_tran_no ) as n_tran_no,   \n\t\t\t( ledger.c_act_code ) as c_act_code,   \n\t\t\t( ledger.d_date ) as d_date,   \n\t\t\t( ledger.n_amount ) as n_amount,   \n\t\t\t( ledger.c_opp_act_code ) as c_opp_act_code,   \n\t\t\t( ledger.c_ref_br_code ) as c_ref_br_code,\n\t\t\t( settle_mst_header.c_ref_no ) as c_ref_no,   \n\t\t\tdate(settle_mst_header.d_ref_date) as d_chq_date,   \n\t\t\t( settle_mst_header.c_remark ) as c_remark,   \n\t\t\t( act_mst_a.c_name ) as c_act_name,   \n\t\t\t( act_mst_b.c_name ) as c_opp_act_name,\n\t\t\t( act_mst_a.c_add_1 ) as c_add_1,\n\t\t\t( act_mst_a.c_add_2 ) as c_add_2, \n\t\t\t( act_mst_a.c_add_3 ) as c_add_3,\n\t\t\t( act_mst_a.c_city ) as c_city,\n\t\t\t( grn_mst.n_ref_srno ) as n_ref_srno,\n\t\t\t( gdn_mst.n_order_no ) as n_order_no,\n\t\t\t(d_reconcile_date) as recon_dt,\n\t\t\t(if recon_dt is null then 0 else 1 endif) as chq_pass,\n\t\t\tif ledger.c_opp_act_code='~~~~~~~~~~~~' then \n\t\t\t\t(select list(ac.c_name+' : '+string(n_amount),char(13)) from ledger ll , act_mst ac  where ac.c_code=ll.c_act_code and\n\t\t\t\t\t\tll.c_br_code=ledger.c_br_code and ll.c_year=ledger.c_year\n\t\t\t\t\t\tand ll.c_prefix=ledger.c_prefix and ll.n_tran_no=ledger.n_tran_no and \n\t\t\t\t\t\t(ledger.n_amount<0 and ll.n_amount>0 or ledger.n_amount>0 and ll.n_amount<0))\n\t\t\telse '' endif as multi_act_name\n    FROM ledger\n\t\t\t\tinner join (select c_br_code as brcode from branch_group_det where length('751') = 6 and c_code = '751' and  branch_group_det.n_cancel_flag = 0 \n            union \n            select c_code from act_mst where length('751')<> 6 and c_code >= (if '751' = 'zzz' then '751' else '751' endif ) and ( c_code <= '751' ) \n            ) brlist on brlist.brcode=ledger.c_ref_br_code  \n\t\t\tleft outer join settle_mst_header  on  ledger.c_br_code = settle_mst_header.c_br_code  and \n\t\t\t ledger.c_year = settle_mst_header.c_year  and \n          ledger.c_prefix = settle_mst_header.c_prefix  and \n          ledger.n_tran_no = settle_mst_header.n_srno  \n          left outer join grn_mst on  ledger.c_br_code = grn_mst.c_br_code  and \n\t\t\t\tledger.c_year = grn_mst.c_year  and \n\t\t\t\tledger.c_prefix = grn_mst.c_prefix  and \n\t\t\t\tledger.n_tran_no = grn_mst.n_srno\n\t\t\tleft outer join gdn_mst  on  ledger.c_br_code = gdn_mst.c_br_code  and \n\t\t\t\tledger.c_year = gdn_mst.c_year  and \n\t\t\t\tledger.c_prefix = gdn_mst.c_prefix  and \n\t\t\t\tledger.n_tran_no = gdn_mst.n_srno\n\t\t\t\tleft outer join reconcile_mst  on  ledger.c_br_code= reconcile_mst.c_br_code and ledger.c_year = reconcile_mst.c_year and\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  ledger.c_prefix = reconcile_mst.c_prefix and  ledger.n_tran_no = reconcile_mst.n_srno, \n          act_mst act_mst_a,   \n         act_mst act_mst_b  \n   WHERE \n         ( act_mst_a.c_code = ledger.c_act_code ) and \n         ( act_mst_b.c_code = ledger.c_opp_act_code ) and\t\n         ( ( ledger.d_date >= '2021-10-01' ) and\t\n         ( ledger.d_date <= getDate() ) and \n         ( ledger.c_act_code >= 'GC238' ) and \n         ( ledger.c_act_code <= 'GC238' )   and\n\t\t\t( ledger.n_amount <> 0) )\n\tUnion All\n\t SELECT ( ledger.c_br_code ) as c_br_code,\n\t\t\t( ledger.c_year ) as c_year,   \n\t\t\t( ledger.c_prefix ) as c_prefix,   \n\t\t\t( ledger.n_tran_no ) as n_tran_no,   \n\t\t\t( ledger.c_act_code ) as c_act_code,   \n\t\t\t( ledger.d_date ) as d_date,   \n\t\t\t( ledger.n_amount ) as n_amount,   \n\t\t\t( ledger.c_opp_act_code ) as c_opp_act_code,   \n\t\t\t( ledger.c_ref_br_code ) as c_ref_br_code,\n\t\t\t( settle_mst_header.c_ref_no ) as c_ref_no,   \n\t\t\tdate(settle_mst_header.d_ref_date) as d_chq_date,   \n\t\t\t( settle_mst_header.c_remark ) as c_remark,   \n\t\t\t( act_mst_a.c_name ) as c_act_name,   \n\t\t\t( act_mst_b.c_name ) as c_opp_act_name,\n\t\t\t( act_mst_a.c_add_1 ) as c_add_1,\n\t\t\t( act_mst_a.c_add_2 ) as c_add_2, \n\t\t\t( act_mst_a.c_add_3 ) as c_add_3,\n\t\t\t( act_mst_a.c_city ) as c_city,\n\t\t\t( grn_mst.n_ref_srno ) as n_ref_srno,\n\t\t\t( gdn_mst.n_order_no ) as n_order_no,\n\t\t\t(d_reconcile_date) as recon_dt,\n\t\t\t(if recon_dt is null then 0 else 1 endif) as chq_pass,\n\t\t\tif ledger.c_opp_act_code='~~~~~~~~~~~~' then \n\t\t\t\t(select list(ac.c_name+' : '+string(n_amount),char(13)) from ledger ll , act_mst ac  where ac.c_code=ll.c_act_code and\n\t\t\t\t\t\tll.c_br_code=ledger.c_br_code and ll.c_year=ledger.c_year\n\t\t\t\t\t\tand ll.c_prefix=ledger.c_prefix and ll.n_tran_no=ledger.n_tran_no and \n\t\t\t\t\t\t(ledger.n_amount<0 and ll.n_amount>0 or ledger.n_amount>0 and ll.n_amount<0))\n\t\t\telse '' endif as multi_act_name\n    FROM cogs_ledger as ledger\n\t\t\t\tinner join (select c_br_code as brcode from branch_group_det where length('751') = 6 and c_code = '751' and  branch_group_det.n_cancel_flag = 0 \n            union \n            select c_code from act_mst where length('751')<> 6 and c_code >= (if '751' = 'zzz' then '751' else '751' endif ) and ( c_code <= '751' ) \n            ) brlist on brlist.brcode=ledger.c_ref_br_code  \n\t\t\tleft outer join settle_mst_header  on  ledger.c_br_code = settle_mst_header.c_br_code  and \n\t\t\t ledger.c_year = settle_mst_header.c_year  and \n          ledger.c_prefix = settle_mst_header.c_prefix  and \n          ledger.n_tran_no = settle_mst_header.n_srno  \n          left outer join grn_mst on  ledger.c_br_code = grn_mst.c_br_code  and \n\t\t\t\tledger.c_year = grn_mst.c_year  and \n\t\t\t\tledger.c_prefix = grn_mst.c_prefix  and \n\t\t\t\tledger.n_tran_no = grn_mst.n_srno\n\t\t\tleft outer join gdn_mst  on  ledger.c_br_code = gdn_mst.c_br_code  and \n\t\t\t\tledger.c_year = gdn_mst.c_year  and \n\t\t\t\tledger.c_prefix = gdn_mst.c_prefix  and \n\t\t\t\tledger.n_tran_no = gdn_mst.n_srno\n\t\t\t\tleft outer join reconcile_mst  on  ledger.c_br_code= reconcile_mst.c_br_code and ledger.c_year = reconcile_mst.c_year and\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  ledger.c_prefix = reconcile_mst.c_prefix and  ledger.n_tran_no = reconcile_mst.n_srno, \n          act_mst act_mst_a,   \n         act_mst act_mst_b  \n   WHERE \n         ( act_mst_a.c_code = ledger.c_act_code ) and \n         ( act_mst_b.c_code = ledger.c_opp_act_code ) and\t\n         ( ( ledger.d_date >= '2021-10-01' ) and\t\n         ( ledger.d_date <= getDate() ) and \n         ( ledger.c_act_code >= 'GC238' ) and \n         ( ledger.c_act_code <= 'GC238' )   and\n\t\t\t( ledger.n_amount <> 0) ) --and :li_cogs =1\n) as cogs\nGroup By c_br_code,c_year,c_prefix,n_tran_no,c_act_code,d_date,c_opp_act_code,c_ref_br_code,c_ref_no,   \n\t\td_chq_date,c_remark,c_act_name,c_opp_act_name,c_add_1,c_add_2,c_add_3,c_city,n_ref_srno,\n\t\tn_order_no,recon_dt,multi_act_name\nUNION   ALL\n  SELECT ('') as c_br_code,\n\t\t\t('00') as c_year,   \n         ('OP') as c_prefix,   \n         ( 0 ) as c_tran_no,   \n         ( ledger.c_act_code ) as c_act_code,   \n         ( date('2021-10-21')) as d_date,   \n         sum(ledger.n_amount) as n_amount,   \n         ( '' ) as c_opp_act_code,   \n         ( '' ) as c_ref_br_code,   \n         ( '' ) as c_ref_no,   \n         date('2021-10-21') as d_chq_date,   \n         ( '' ) as c_remark,   \n         ( act_mst.c_name ) as c_act_name,   \n         ( 'Opening Balance' ) as c_opp_act_name,\n\t\t\t( act_mst.c_add_1 )  as c_add_1,\n\t\t\t( act_mst.c_add_2 )  as c_add_2, \n\t\t\t( act_mst.c_add_3 )  as c_add_3,\n\t\t\t( act_mst.c_city ) as c_city,\n\t\t\t(0) as n_ref_srno,\n\t\t\t(0) as n_order_no,\n\t\t\t( null )  as recon_dt,\n\t\t\t( 0 )  \tas chq_pass,\n\t\t\t( '' ) as multi_act_name\t,\n\t\tisnull( case when n_amount  > 0 then n_amount else 0 end,0) as Debit,\n\t\tisnull( case when n_amount  < 0 then n_amount else 0 end,0) as credit\n    FROM dba.ledger\n\t\t\t\tinner join (select c_br_code as brcode from dba.branch_group_det where length('751') = 6 and c_code = '751' and  branch_group_det.n_cancel_flag = 0 \n            union \n            select c_code from dba.act_mst where length('751')<> 6 and c_code >= (if '751' = 'zzz' then '751' else '751' endif ) and ( c_code <= '751' ) \n            ) brlist on brlist.brcode=ledger.c_ref_br_code,  \n         act_mst  \n   WHERE ( act_mst.c_code = ledger.c_act_code ) and  \n         ( ( ledger.d_date <= getDate() ) and\t\n         ( ledger.c_act_code >= 'GC238' ) and\t\n         ( ledger.c_act_code <= 'GC238' ) )   \nGROUP BY c_act_code,c_act_name,c_add_1,c_add_2,c_add_3,c_city"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "Ds_Ecogreenv2",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "RL_HelthTech_GC238_Credit",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Copy data HelthTech GC238 File to Table",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Copy data HelthTech GC238 Credit",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "SqlServerSink",
								"preCopyScript": "truncate table HelthTech_GC238_Credit_Staging",
								"tableOption": "autoCreate"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "RL_HelthTech_GC238_Credit",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "SQL_HelthTech_GC238_Credit",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Delete File",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "RL_HelthTech_GC238_Credit",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Reconciliation Ledgers"
				},
				"annotations": [],
				"lastPublishTime": "2022-01-05T10:19:51Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Ds_Ecogreenv2')]",
				"[concat(variables('factoryId'), '/datasets/RL_HelthTech_GC238_Credit')]",
				"[concat(variables('factoryId'), '/datasets/SQL_HelthTech_GC238_Credit')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Full Load HelthTech JO-JV 751 and 701 Credit')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data HelthTech JO-JV 751 and 701 Credit",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SybaseSource",
								"query": "Select ( cogs.c_br_code ) as c_br_code,\n\t\t( cogs.c_year ) as c_year,   \n\t\t( cogs.c_prefix ) as c_prefix,   \n\t\t( cogs.n_tran_no ) as n_tran_no,   \n\t\t( cogs.c_act_code ) as c_act_code,   \n\t\t( cogs.d_date ) as d_date,   \n\t\tSUM( cogs.n_amount ) as n_amount,   \n\t\t( cogs.c_opp_act_code ) as c_opp_act_code,   \n\t\t( cogs.c_ref_br_code ) as c_ref_br_code,\n\t\t( cogs.c_ref_no ) as c_ref_no,   \n\t\t( cogs.d_chq_date) as d_chq_date,   \n\t\t( cogs.c_remark ) as c_remark,   \n\t\t( cogs.c_act_name ) as c_act_name,   \n\t\t( cogs.c_opp_act_name ) as c_opp_act_name,\n\t\t( cogs.c_add_1 ) as c_add_1,\n\t\t( cogs.c_add_2 ) as c_add_2, \n\t\t( cogs.c_add_3 ) as c_add_3,\n\t\t( cogs.c_city ) as c_city,\n\t\t( cogs.n_ref_srno ) as n_ref_srno,\n\t\t( cogs.n_order_no ) as n_order_no,\n\t\t( cogs.recon_dt) as recon_dt,\n\t\t( if recon_dt is null then 0 else 1 endif ) as chq_pass,\n\t\t( cogs.multi_act_name) as multi_act_name,\n\t\tisnull( case when n_amount  > 0 then n_amount else 0 end,0) as Debit,\n\t\tisnull( case when n_amount  < 0 then n_amount else 0 end,0) as credit\nFrom\n(\n\tSELECT ( ledger.c_br_code ) as c_br_code,\n\t\t\t( ledger.c_year ) as c_year,   \n\t\t\t( ledger.c_prefix ) as c_prefix,   \n\t\t\t( ledger.n_tran_no ) as n_tran_no,   \n\t\t\t( ledger.c_act_code ) as c_act_code,   \n\t\t\t( ledger.d_date ) as d_date,   \n\t\t\t( ledger.n_amount ) as n_amount,   \n\t\t\t( ledger.c_opp_act_code ) as c_opp_act_code,   \n\t\t\t( ledger.c_ref_br_code ) as c_ref_br_code,\n\t\t\t( settle_mst_header.c_ref_no ) as c_ref_no,   \n\t\t\tdate(settle_mst_header.d_ref_date) as d_chq_date,   \n\t\t\t( settle_mst_header.c_remark ) as c_remark,   \n\t\t\t( act_mst_a.c_name ) as c_act_name,   \n\t\t\t( act_mst_b.c_name ) as c_opp_act_name,\n\t\t\t( act_mst_a.c_add_1 ) as c_add_1,\n\t\t\t( act_mst_a.c_add_2 ) as c_add_2, \n\t\t\t( act_mst_a.c_add_3 ) as c_add_3,\n\t\t\t( act_mst_a.c_city ) as c_city,\n\t\t\t( grn_mst.n_ref_srno ) as n_ref_srno,\n\t\t\t( gdn_mst.n_order_no ) as n_order_no,\n\t\t\t(d_reconcile_date) as recon_dt,\n\t\t\t(if recon_dt is null then 0 else 1 endif) as chq_pass,\n\t\t\tif ledger.c_opp_act_code='~~~~~~~~~~~~' then \n\t\t\t\t(select list(ac.c_name+' : '+string(n_amount),char(13)) from ledger ll , act_mst ac  where ac.c_code=ll.c_act_code and\n\t\t\t\t\t\tll.c_br_code=ledger.c_br_code and ll.c_year=ledger.c_year\n\t\t\t\t\t\tand ll.c_prefix=ledger.c_prefix and ll.n_tran_no=ledger.n_tran_no and \n\t\t\t\t\t\t(ledger.n_amount<0 and ll.n_amount>0 or ledger.n_amount>0 and ll.n_amount<0))\n\t\t\telse '' endif as multi_act_name\n    FROM ledger\n\t\t\t\tinner join (select c_br_code as brcode from branch_group_det where length('701') = 6 and c_code = '701' and  branch_group_det.n_cancel_flag = 0 \n            union \n            select c_code from act_mst where length('701')<> 6 and c_code >= (if '701' = 'zzz' then '701' else '701' endif ) and ( c_code <= '701' ) \n            ) brlist on brlist.brcode=ledger.c_ref_br_code  \n\t\t\tleft outer join settle_mst_header  on  ledger.c_br_code = settle_mst_header.c_br_code  and \n\t\t\t ledger.c_year = settle_mst_header.c_year  and \n          ledger.c_prefix = settle_mst_header.c_prefix  and \n          ledger.n_tran_no = settle_mst_header.n_srno  \n          left outer join grn_mst on  ledger.c_br_code = grn_mst.c_br_code  and \n\t\t\t\tledger.c_year = grn_mst.c_year  and \n\t\t\t\tledger.c_prefix = grn_mst.c_prefix  and \n\t\t\t\tledger.n_tran_no = grn_mst.n_srno\n\t\t\tleft outer join gdn_mst  on  ledger.c_br_code = gdn_mst.c_br_code  and \n\t\t\t\tledger.c_year = gdn_mst.c_year  and \n\t\t\t\tledger.c_prefix = gdn_mst.c_prefix  and \n\t\t\t\tledger.n_tran_no = gdn_mst.n_srno\n\t\t\t\tleft outer join reconcile_mst  on  ledger.c_br_code= reconcile_mst.c_br_code and ledger.c_year = reconcile_mst.c_year and\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  ledger.c_prefix = reconcile_mst.c_prefix and  ledger.n_tran_no = reconcile_mst.n_srno, \n          act_mst act_mst_a,   \n         act_mst act_mst_b  \n   WHERE \n         ( act_mst_a.c_code = ledger.c_act_code ) and \n         ( act_mst_b.c_code = ledger.c_opp_act_code ) and\t\n         ( ( ledger.d_date >= '2021-10-01' ) and\t\n         ( ledger.d_date <= getDate() ) and \n         ( ledger.c_act_code >= 'GC793' ) and \n         ( ledger.c_act_code <= 'GC793' )   and\n\t\t\t( ledger.n_amount <> 0) )\n\tUnion All\n\t SELECT ( ledger.c_br_code ) as c_br_code,\n\t\t\t( ledger.c_year ) as c_year,   \n\t\t\t( ledger.c_prefix ) as c_prefix,   \n\t\t\t( ledger.n_tran_no ) as n_tran_no,   \n\t\t\t( ledger.c_act_code ) as c_act_code,   \n\t\t\t( ledger.d_date ) as d_date,   \n\t\t\t( ledger.n_amount ) as n_amount,   \n\t\t\t( ledger.c_opp_act_code ) as c_opp_act_code,   \n\t\t\t( ledger.c_ref_br_code ) as c_ref_br_code,\n\t\t\t( settle_mst_header.c_ref_no ) as c_ref_no,   \n\t\t\tdate(settle_mst_header.d_ref_date) as d_chq_date,   \n\t\t\t( settle_mst_header.c_remark ) as c_remark,   \n\t\t\t( act_mst_a.c_name ) as c_act_name,   \n\t\t\t( act_mst_b.c_name ) as c_opp_act_name,\n\t\t\t( act_mst_a.c_add_1 ) as c_add_1,\n\t\t\t( act_mst_a.c_add_2 ) as c_add_2, \n\t\t\t( act_mst_a.c_add_3 ) as c_add_3,\n\t\t\t( act_mst_a.c_city ) as c_city,\n\t\t\t( grn_mst.n_ref_srno ) as n_ref_srno,\n\t\t\t( gdn_mst.n_order_no ) as n_order_no,\n\t\t\t(d_reconcile_date) as recon_dt,\n\t\t\t(if recon_dt is null then 0 else 1 endif) as chq_pass,\n\t\t\tif ledger.c_opp_act_code='~~~~~~~~~~~~' then \n\t\t\t\t(select list(ac.c_name+' : '+string(n_amount),char(13)) from ledger ll , act_mst ac  where ac.c_code=ll.c_act_code and\n\t\t\t\t\t\tll.c_br_code=ledger.c_br_code and ll.c_year=ledger.c_year\n\t\t\t\t\t\tand ll.c_prefix=ledger.c_prefix and ll.n_tran_no=ledger.n_tran_no and \n\t\t\t\t\t\t(ledger.n_amount<0 and ll.n_amount>0 or ledger.n_amount>0 and ll.n_amount<0))\n\t\t\telse '' endif as multi_act_name\n    FROM cogs_ledger as ledger\n\t\t\t\tinner join (select c_br_code as brcode from branch_group_det where length('701') = 6 and c_code = '701' and  branch_group_det.n_cancel_flag = 0 \n            union \n            select c_code from act_mst where length('701')<> 6 and c_code >= (if '701' = 'zzz' then '701' else '701' endif ) and ( c_code <= '701' ) \n            ) brlist on brlist.brcode=ledger.c_ref_br_code  \n\t\t\tleft outer join settle_mst_header  on  ledger.c_br_code = settle_mst_header.c_br_code  and \n\t\t\t ledger.c_year = settle_mst_header.c_year  and \n          ledger.c_prefix = settle_mst_header.c_prefix  and \n          ledger.n_tran_no = settle_mst_header.n_srno  \n          left outer join grn_mst on  ledger.c_br_code = grn_mst.c_br_code  and \n\t\t\t\tledger.c_year = grn_mst.c_year  and \n\t\t\t\tledger.c_prefix = grn_mst.c_prefix  and \n\t\t\t\tledger.n_tran_no = grn_mst.n_srno\n\t\t\tleft outer join gdn_mst  on  ledger.c_br_code = gdn_mst.c_br_code  and \n\t\t\t\tledger.c_year = gdn_mst.c_year  and \n\t\t\t\tledger.c_prefix = gdn_mst.c_prefix  and \n\t\t\t\tledger.n_tran_no = gdn_mst.n_srno\n\t\t\t\tleft outer join reconcile_mst  on  ledger.c_br_code= reconcile_mst.c_br_code and ledger.c_year = reconcile_mst.c_year and\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  ledger.c_prefix = reconcile_mst.c_prefix and  ledger.n_tran_no = reconcile_mst.n_srno, \n          act_mst act_mst_a,   \n         act_mst act_mst_b  \n   WHERE \n         ( act_mst_a.c_code = ledger.c_act_code ) and \n         ( act_mst_b.c_code = ledger.c_opp_act_code ) and\t\n         ( ( ledger.d_date >= '2021-10-01' ) and\t\n         ( ledger.d_date <= getDate() ) and \n         ( ledger.c_act_code >= 'GC793' ) and \n         ( ledger.c_act_code <= 'GC793' )   and\n\t\t\t( ledger.n_amount <> 0) ) --and :li_cogs =1\n) as cogs \nGroup By c_br_code,c_year,c_prefix,n_tran_no,c_act_code,d_date,c_opp_act_code,c_ref_br_code,c_ref_no,   \n\t\td_chq_date,c_remark,c_act_name,c_opp_act_name,c_add_1,c_add_2,c_add_3,c_city,n_ref_srno,\n\t\tn_order_no,recon_dt,multi_act_name\nUNION   ALL\n  SELECT ('') as c_br_code,\n\t\t\t('00') as c_year,   \n         ('OP') as c_prefix,   \n         ( 0 ) as c_tran_no,   \n         ( ledger.c_act_code ) as c_act_code,   \n         ( date('2021-10-21')) as d_date,   \n         sum(ledger.n_amount) as n_amount,   \n         ( '' ) as c_opp_act_code,   \n         ( '' ) as c_ref_br_code,   \n         ( '' ) as c_ref_no,   \n         date('2021-10-21') as d_chq_date,   \n         ( '' ) as c_remark,   \n         ( act_mst.c_name ) as c_act_name,   \n         ( 'Opening Balance' ) as c_opp_act_name,\n\t\t\t( act_mst.c_add_1 )  as c_add_1,\n\t\t\t( act_mst.c_add_2 )  as c_add_2, \n\t\t\t( act_mst.c_add_3 )  as c_add_3,\n\t\t\t( act_mst.c_city ) as c_city,\n\t\t\t(0) as n_ref_srno,\n\t\t\t(0) as n_order_no,\n\t\t\t( null )  as recon_dt,\n\t\t\t( 0 )  \tas chq_pass,\n\t\t\t( '' ) as multi_act_name\t,\n\t\tisnull( case when n_amount  > 0 then n_amount else 0 end,0) as Debit,\n\t\tisnull( case when n_amount  < 0 then n_amount else 0 end,0) as credit\n    FROM dba.ledger\n\t\t\t\tinner join (select c_br_code as brcode from dba.branch_group_det where length('701') = 6 and c_code = '701' and  branch_group_det.n_cancel_flag = 0 \n            union \n            select c_code from dba.act_mst where length('701')<> 6 and c_code >= (if '701' = 'zzz' then '701' else '701' endif ) and ( c_code <= '701' ) \n            ) brlist on brlist.brcode=ledger.c_ref_br_code,  \n         act_mst  \n   WHERE ( act_mst.c_code = ledger.c_act_code ) and  \n         ( ( ledger.d_date <= getDate() ) and\t\n         ( ledger.c_act_code >= 'GC793' ) and\t\n         ( ledger.c_act_code <= 'GC793' ) )   \nGROUP BY c_act_code,c_act_name,c_add_1,c_add_2,c_add_3,c_city\n\n\nUNION\n\n\nSelect ( cogs.c_br_code ) as c_br_code,\n\t\t( cogs.c_year ) as c_year,   \n\t\t( cogs.c_prefix ) as c_prefix,   \n\t\t( cogs.n_tran_no ) as n_tran_no,   \n\t\t( cogs.c_act_code ) as c_act_code,   \n\t\t( cogs.d_date ) as d_date,   \n\t\tSUM( cogs.n_amount ) as n_amount,   \n\t\t( cogs.c_opp_act_code ) as c_opp_act_code,   \n\t\t( cogs.c_ref_br_code ) as c_ref_br_code,\n\t\t( cogs.c_ref_no ) as c_ref_no,   \n\t\t( cogs.d_chq_date) as d_chq_date,   \n\t\t( cogs.c_remark ) as c_remark,   \n\t\t( cogs.c_act_name ) as c_act_name,   \n\t\t( cogs.c_opp_act_name ) as c_opp_act_name,\n\t\t( cogs.c_add_1 ) as c_add_1,\n\t\t( cogs.c_add_2 ) as c_add_2, \n\t\t( cogs.c_add_3 ) as c_add_3,\n\t\t( cogs.c_city ) as c_city,\n\t\t( cogs.n_ref_srno ) as n_ref_srno,\n\t\t( cogs.n_order_no ) as n_order_no,\n\t\t( cogs.recon_dt) as recon_dt,\n\t\t( if recon_dt is null then 0 else 1 endif ) as chq_pass,\n\t\t( cogs.multi_act_name) as multi_act_name,\n\t\tisnull( case when n_amount  > 0 then n_amount else 0 end,0) as Debit,\n\t\tisnull( case when n_amount  < 0 then n_amount else 0 end,0) as credit\nFrom\n(\n\tSELECT ( ledger.c_br_code ) as c_br_code,\n\t\t\t( ledger.c_year ) as c_year,   \n\t\t\t( ledger.c_prefix ) as c_prefix,   \n\t\t\t( ledger.n_tran_no ) as n_tran_no,   \n\t\t\t( ledger.c_act_code ) as c_act_code,   \n\t\t\t( ledger.d_date ) as d_date,   \n\t\t\t( ledger.n_amount ) as n_amount,   \n\t\t\t( ledger.c_opp_act_code ) as c_opp_act_code,   \n\t\t\t( ledger.c_ref_br_code ) as c_ref_br_code,\n\t\t\t( settle_mst_header.c_ref_no ) as c_ref_no,   \n\t\t\tdate(settle_mst_header.d_ref_date) as d_chq_date,   \n\t\t\t( settle_mst_header.c_remark ) as c_remark,   \n\t\t\t( act_mst_a.c_name ) as c_act_name,   \n\t\t\t( act_mst_b.c_name ) as c_opp_act_name,\n\t\t\t( act_mst_a.c_add_1 ) as c_add_1,\n\t\t\t( act_mst_a.c_add_2 ) as c_add_2, \n\t\t\t( act_mst_a.c_add_3 ) as c_add_3,\n\t\t\t( act_mst_a.c_city ) as c_city,\n\t\t\t( grn_mst.n_ref_srno ) as n_ref_srno,\n\t\t\t( gdn_mst.n_order_no ) as n_order_no,\n\t\t\t(d_reconcile_date) as recon_dt,\n\t\t\t(if recon_dt is null then 0 else 1 endif) as chq_pass,\n\t\t\tif ledger.c_opp_act_code='~~~~~~~~~~~~' then \n\t\t\t\t(select list(ac.c_name+' : '+string(n_amount),char(13)) from ledger ll , act_mst ac  where ac.c_code=ll.c_act_code and\n\t\t\t\t\t\tll.c_br_code=ledger.c_br_code and ll.c_year=ledger.c_year\n\t\t\t\t\t\tand ll.c_prefix=ledger.c_prefix and ll.n_tran_no=ledger.n_tran_no and \n\t\t\t\t\t\t(ledger.n_amount<0 and ll.n_amount>0 or ledger.n_amount>0 and ll.n_amount<0))\n\t\t\telse '' endif as multi_act_name\n    FROM ledger\n\t\t\t\tinner join (select c_br_code as brcode from branch_group_det where length('751') = 6 and c_code = '751' and  branch_group_det.n_cancel_flag = 0 \n            union \n            select c_code from act_mst where length('751')<> 6 and c_code >= (if '751' = 'zzz' then '751' else '751' endif ) and ( c_code <= '751' ) \n            ) brlist on brlist.brcode=ledger.c_ref_br_code  \n\t\t\tleft outer join settle_mst_header  on  ledger.c_br_code = settle_mst_header.c_br_code  and \n\t\t\t ledger.c_year = settle_mst_header.c_year  and \n          ledger.c_prefix = settle_mst_header.c_prefix  and \n          ledger.n_tran_no = settle_mst_header.n_srno  \n          left outer join grn_mst on  ledger.c_br_code = grn_mst.c_br_code  and \n\t\t\t\tledger.c_year = grn_mst.c_year  and \n\t\t\t\tledger.c_prefix = grn_mst.c_prefix  and \n\t\t\t\tledger.n_tran_no = grn_mst.n_srno\n\t\t\tleft outer join gdn_mst  on  ledger.c_br_code = gdn_mst.c_br_code  and \n\t\t\t\tledger.c_year = gdn_mst.c_year  and \n\t\t\t\tledger.c_prefix = gdn_mst.c_prefix  and \n\t\t\t\tledger.n_tran_no = gdn_mst.n_srno\n\t\t\t\tleft outer join reconcile_mst  on  ledger.c_br_code= reconcile_mst.c_br_code and ledger.c_year = reconcile_mst.c_year and\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  ledger.c_prefix = reconcile_mst.c_prefix and  ledger.n_tran_no = reconcile_mst.n_srno, \n          act_mst act_mst_a,   \n         act_mst act_mst_b  \n   WHERE \n         ( act_mst_a.c_code = ledger.c_act_code ) and \n         ( act_mst_b.c_code = ledger.c_opp_act_code ) and\t\n         ( ( ledger.d_date >= '2021-10-01' ) and\t\n         ( ledger.d_date <= getDate() ) and \n         ( ledger.c_act_code >= 'GC793' ) and \n         ( ledger.c_act_code <= 'GC793' )   and\n\t\t\t( ledger.n_amount <> 0) )\n\tUnion All\n\t SELECT ( ledger.c_br_code ) as c_br_code,\n\t\t\t( ledger.c_year ) as c_year,   \n\t\t\t( ledger.c_prefix ) as c_prefix,   \n\t\t\t( ledger.n_tran_no ) as n_tran_no,   \n\t\t\t( ledger.c_act_code ) as c_act_code,   \n\t\t\t( ledger.d_date ) as d_date,   \n\t\t\t( ledger.n_amount ) as n_amount,   \n\t\t\t( ledger.c_opp_act_code ) as c_opp_act_code,   \n\t\t\t( ledger.c_ref_br_code ) as c_ref_br_code,\n\t\t\t( settle_mst_header.c_ref_no ) as c_ref_no,   \n\t\t\tdate(settle_mst_header.d_ref_date) as d_chq_date,   \n\t\t\t( settle_mst_header.c_remark ) as c_remark,   \n\t\t\t( act_mst_a.c_name ) as c_act_name,   \n\t\t\t( act_mst_b.c_name ) as c_opp_act_name,\n\t\t\t( act_mst_a.c_add_1 ) as c_add_1,\n\t\t\t( act_mst_a.c_add_2 ) as c_add_2, \n\t\t\t( act_mst_a.c_add_3 ) as c_add_3,\n\t\t\t( act_mst_a.c_city ) as c_city,\n\t\t\t( grn_mst.n_ref_srno ) as n_ref_srno,\n\t\t\t( gdn_mst.n_order_no ) as n_order_no,\n\t\t\t(d_reconcile_date) as recon_dt,\n\t\t\t(if recon_dt is null then 0 else 1 endif) as chq_pass,\n\t\t\tif ledger.c_opp_act_code='~~~~~~~~~~~~' then \n\t\t\t\t(select list(ac.c_name+' : '+string(n_amount),char(13)) from ledger ll , act_mst ac  where ac.c_code=ll.c_act_code and\n\t\t\t\t\t\tll.c_br_code=ledger.c_br_code and ll.c_year=ledger.c_year\n\t\t\t\t\t\tand ll.c_prefix=ledger.c_prefix and ll.n_tran_no=ledger.n_tran_no and \n\t\t\t\t\t\t(ledger.n_amount<0 and ll.n_amount>0 or ledger.n_amount>0 and ll.n_amount<0))\n\t\t\telse '' endif as multi_act_name\n    FROM cogs_ledger as ledger\n\t\t\t\tinner join (select c_br_code as brcode from branch_group_det where length('751') = 6 and c_code = '751' and  branch_group_det.n_cancel_flag = 0 \n            union \n            select c_code from act_mst where length('751')<> 6 and c_code >= (if '751' = 'zzz' then '751' else '751' endif ) and ( c_code <= '751' ) \n            ) brlist on brlist.brcode=ledger.c_ref_br_code  \n\t\t\tleft outer join settle_mst_header  on  ledger.c_br_code = settle_mst_header.c_br_code  and \n\t\t\t ledger.c_year = settle_mst_header.c_year  and \n          ledger.c_prefix = settle_mst_header.c_prefix  and \n          ledger.n_tran_no = settle_mst_header.n_srno  \n          left outer join grn_mst on  ledger.c_br_code = grn_mst.c_br_code  and \n\t\t\t\tledger.c_year = grn_mst.c_year  and \n\t\t\t\tledger.c_prefix = grn_mst.c_prefix  and \n\t\t\t\tledger.n_tran_no = grn_mst.n_srno\n\t\t\tleft outer join gdn_mst  on  ledger.c_br_code = gdn_mst.c_br_code  and \n\t\t\t\tledger.c_year = gdn_mst.c_year  and \n\t\t\t\tledger.c_prefix = gdn_mst.c_prefix  and \n\t\t\t\tledger.n_tran_no = gdn_mst.n_srno\n\t\t\t\tleft outer join reconcile_mst  on  ledger.c_br_code= reconcile_mst.c_br_code and ledger.c_year = reconcile_mst.c_year and\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  ledger.c_prefix = reconcile_mst.c_prefix and  ledger.n_tran_no = reconcile_mst.n_srno, \n          act_mst act_mst_a,   \n         act_mst act_mst_b  \n   WHERE \n         ( act_mst_a.c_code = ledger.c_act_code ) and \n         ( act_mst_b.c_code = ledger.c_opp_act_code ) and\t\n         ( ( ledger.d_date >= '2021-10-01' ) and\t\n         ( ledger.d_date <= getDate() ) and \n         ( ledger.c_act_code >= 'GC793' ) and \n         ( ledger.c_act_code <= 'GC793' )   and\n\t\t\t( ledger.n_amount <> 0) ) --and :li_cogs =1\n) as cogs \nGroup By c_br_code,c_year,c_prefix,n_tran_no,c_act_code,d_date,c_opp_act_code,c_ref_br_code,c_ref_no,   \n\t\td_chq_date,c_remark,c_act_name,c_opp_act_name,c_add_1,c_add_2,c_add_3,c_city,n_ref_srno,\n\t\tn_order_no,recon_dt,multi_act_name\nUNION   ALL\n  SELECT ('') as c_br_code,\n\t\t\t('00') as c_year,   \n         ('OP') as c_prefix,   \n         ( 0 ) as c_tran_no,   \n         ( ledger.c_act_code ) as c_act_code,   \n         ( date('2021-10-21')) as d_date,   \n         sum(ledger.n_amount) as n_amount,   \n         ( '' ) as c_opp_act_code,   \n         ( '' ) as c_ref_br_code,   \n         ( '' ) as c_ref_no,   \n         date('2021-10-21') as d_chq_date,   \n         ( '' ) as c_remark,   \n         ( act_mst.c_name ) as c_act_name,   \n         ( 'Opening Balance' ) as c_opp_act_name,\n\t\t\t( act_mst.c_add_1 )  as c_add_1,\n\t\t\t( act_mst.c_add_2 )  as c_add_2, \n\t\t\t( act_mst.c_add_3 )  as c_add_3,\n\t\t\t( act_mst.c_city ) as c_city,\n\t\t\t(0) as n_ref_srno,\n\t\t\t(0) as n_order_no,\n\t\t\t( null )  as recon_dt,\n\t\t\t( 0 )  \tas chq_pass,\n\t\t\t( '' ) as multi_act_name\t,\n\t\tisnull( case when n_amount  > 0 then n_amount else 0 end,0) as Debit,\n\t\tisnull( case when n_amount  < 0 then n_amount else 0 end,0) as credit\n    FROM dba.ledger\n\t\t\t\tinner join (select c_br_code as brcode from dba.branch_group_det where length('751') = 6 and c_code = '751' and  branch_group_det.n_cancel_flag = 0 \n            union \n            select c_code from dba.act_mst where length('751')<> 6 and c_code >= (if '751' = 'zzz' then '751' else '751' endif ) and ( c_code <= '751' ) \n            ) brlist on brlist.brcode=ledger.c_ref_br_code,  \n         act_mst  \n   WHERE ( act_mst.c_code = ledger.c_act_code ) and  \n         ( ( ledger.d_date <= getDate() ) and\t\n         ( ledger.c_act_code >= 'GC793' ) and\t\n         ( ledger.c_act_code <= 'GC793' ) )   \nGROUP BY c_act_code,c_act_name,c_add_1,c_add_2,c_add_3,c_city"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "Ds_Ecogreenv2",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "RL_HelthTech_JO_JV_751_701_Credit",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Copy data HelthTech JO-JV 751 and 701 File to Table",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Copy data HelthTech JO-JV 751 and 701 Credit",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "SqlServerSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "RL_HelthTech_JO_JV_751_701_Credit",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "SQL_HelthTech_JO_JV_751_701_Credit",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Reconciliation Ledgers"
				},
				"annotations": [],
				"lastPublishTime": "2022-02-01T04:57:15Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Ds_Ecogreenv2')]",
				"[concat(variables('factoryId'), '/datasets/RL_HelthTech_JO_JV_751_701_Credit')]",
				"[concat(variables('factoryId'), '/datasets/SQL_HelthTech_JO_JV_751_701_Credit')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Full Load HelthTech Purchase 751 Credit')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data HelthTech Purchase 751 Credit",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Delete File",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SybaseSource",
								"query": "SELECT c_br_code,c_year,c_prefix,n_srno,d_date,n_subtotal,n_total,d_ldate,c_order_id,n_taxable_amt FROM dba.pur_mst where c_br_code = '751' and n_cancel_flag=0 and\n n_post = 1 and c_prefix in('K','KO') and convert(date,d_date) > '2021-10-01'"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "Ds_Ecogreenv2",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "RL_HelthTech_Purchase_751_Credit",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Copy data HelthTech 751 File to Table",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Copy data HelthTech Purchase 751 Credit",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "SqlServerSink",
								"preCopyScript": "truncate table HelthTech_Purchase_751_Credit_Staging;",
								"tableOption": "autoCreate"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "RL_HelthTech_Purchase_751_Credit",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "SQL_HelthTech_Purchase_751_Credit",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Delete File",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "RL_HelthTech_Purchase_751_Credit",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Reconciliation Ledgers"
				},
				"annotations": [],
				"lastPublishTime": "2022-02-11T04:02:48Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Ds_Ecogreenv2')]",
				"[concat(variables('factoryId'), '/datasets/RL_HelthTech_Purchase_751_Credit')]",
				"[concat(variables('factoryId'), '/datasets/SQL_HelthTech_Purchase_751_Credit')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Full Load HelthTech Sale 751 and 701 Debit')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data HelthTech Sale 751  and 701 to File",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SybaseSource",
								"query": "SELECT c_br_code,c_year,c_prefix,n_srno,d_date,c_cust_code,c_order_id,n_total FROM dba.inv_mst where c_br_code in ('751' ,'701') and c_cust_code = 'GC793' and convert(date,d_date) > '2021-10-01'"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "Ds_Ecogreenv2",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "RL_HelthTech_Sale_751_701_Debit",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Copy dataHelthTech Sale 751 and 701 Debit File to Table",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Copy data HelthTech Sale 751  and 701 to File",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "SqlServerSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "RL_HelthTech_Sale_751_701_Debit",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "SQL_HelthTech_Sale_751_701_Debit",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Reconciliation Ledgers"
				},
				"annotations": [],
				"lastPublishTime": "2022-01-31T05:51:59Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Ds_Ecogreenv2')]",
				"[concat(variables('factoryId'), '/datasets/RL_HelthTech_Sale_751_701_Debit')]",
				"[concat(variables('factoryId'), '/datasets/SQL_HelthTech_Sale_751_701_Debit')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Full Load HelthTech Sale Return 751 and 701')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data HelthTech Sale Return 751 and 701 File",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SybaseSource",
								"query": "SELECT c_br_code,c_year,c_prefix,n_srno,d_date,c_cust_code,n_total,n_non_taxable_ret\n,c_order_id FROM dba.CRNT_MST where c_br_code in ('751','701') and c_cust_code = 'GC793' and convert(date,d_date) > '2021-10-01'"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "Ds_Ecogreenv2",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "RL_HelthTech_Sale_Return_751_701_Credit",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Copy data HelthTech Sale Return 751_701 File to Table",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Copy data HelthTech Sale Return 751 and 701 File",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "SqlServerSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "RL_HelthTech_Sale_Return_751_701_Credit",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "SQL_HelthTech_Sale_Return_751_701_Credit",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Reconciliation Ledgers"
				},
				"annotations": [],
				"lastPublishTime": "2022-02-01T05:01:49Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Ds_Ecogreenv2')]",
				"[concat(variables('factoryId'), '/datasets/RL_HelthTech_Sale_Return_751_701_Credit')]",
				"[concat(variables('factoryId'), '/datasets/SQL_HelthTech_Sale_Return_751_701_Credit')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Full Load Helthtech Sale GC793 Debit')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data HelthTech Sale GC793 Debit",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Delete File",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SybaseSource",
								"query": "SELECT c_br_code,c_year,c_prefix,n_srno,d_date,c_cust_code,c_order_id,n_total FROM dba.inv_mst where c_br_code = '751' and c_cust_code = 'GC793' and convert(date,d_date) > '2021-10-01'"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "Ds_Ecogreenv2",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "RL_HelthTech_Sale_GC793_Debit",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Copy data HelthTech Sale GC793 File to Table",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Copy data HelthTech Sale GC793 Debit",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "SqlServerSink",
								"tableOption": "autoCreate"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "RL_HelthTech_Sale_GC793_Debit",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "SQL_HelthTech_Sale_GC793_Debit",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Delete File",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "RL_HelthTech_Sale_GC793_Debit",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Reconciliation Ledgers"
				},
				"annotations": [],
				"lastPublishTime": "2022-01-05T04:33:12Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Ds_Ecogreenv2')]",
				"[concat(variables('factoryId'), '/datasets/RL_HelthTech_Sale_GC793_Debit')]",
				"[concat(variables('factoryId'), '/datasets/SQL_HelthTech_Sale_GC793_Debit')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Full Load Inv_Det_Staging')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data invDet File",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "SqlServerSink",
								"writeBatchTimeout": "18:00:00",
								"preCopyScript": "truncate table inv_det_staging"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "c_br_code",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_br_code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "c_year",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_year",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "c_prefix",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_prefix",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "n_srno",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_srno",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_seq",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_seq",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "d_date",
											"type": "DateTime",
											"physicalType": "INT96"
										},
										"sink": {
											"name": "d_date",
											"type": "DateTime",
											"physicalType": "datetime2"
										}
									},
									{
										"source": {
											"name": "c_item_code",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_item_code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "c_batch_no",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_batch_no",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "n_qty",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_qty",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_sch_qty",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_sch_qty",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_sch_disc",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_sch_disc",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_sale_rate",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_sale_rate",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_disc_per",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_disc_per",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_st_per",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_st_per",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_cst_per",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_cst_per",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_rst_per",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_rst_per",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_tax_suffer",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_tax_suffer",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_amount",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_amount",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "c_mf_code",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_mf_code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "n_2nd_sale",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_2nd_sale",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_sp_sale_flag",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_sp_sale_flag",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_cancel_flag",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_cancel_flag",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "d_ldate",
											"type": "DateTime",
											"physicalType": "INT96"
										},
										"sink": {
											"name": "d_ldate",
											"type": "DateTime",
											"physicalType": "datetime2"
										}
									},
									{
										"source": {
											"name": "n_vaton",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_vaton",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_tax_on_sch_qty",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_tax_on_sch_qty",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_vatts_mrp",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_vatts_mrp",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_mrp",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_mrp",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "c_remark",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_remark",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "n_tax_amt",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_tax_amt",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_free_tax_amt",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_free_tax_amt",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "c_print_batch",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_print_batch",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "d_print_exp_dt",
											"type": "DateTime",
											"physicalType": "INT96"
										},
										"sink": {
											"name": "d_print_exp_dt",
											"type": "DateTime",
											"physicalType": "datetime2"
										}
									},
									{
										"source": {
											"name": "n_eff_pur_rate",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_eff_pur_rate",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_shift",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_shift",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "c_remark2",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_remark2",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "n_points",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_points",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "t_ltime",
											"type": "DateTime",
											"physicalType": "INT96"
										},
										"sink": {
											"name": "t_ltime",
											"type": "DateTime",
											"physicalType": "datetime2"
										}
									},
									{
										"source": {
											"name": "n_req_qty",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_req_qty",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_allow_points",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_allow_points",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_qty1",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_qty1",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_card_reverse_dis",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_card_reverse_dis",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "c_dc_br_code",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_dc_br_code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "c_dc_year",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_dc_year",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "c_dc_prefix",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_dc_prefix",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "n_dc_srno",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_dc_srno",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_dc_seq",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_dc_seq",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_remind_days",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_remind_days",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_claim",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_claim",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "c_order_br_code",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_order_br_code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "c_order_year",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_order_year",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "c_order_prefix",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_order_prefix",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "n_order_no",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_order_no",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_order_seq",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_order_seq",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_claim_per",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_claim_per",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "d_print_mfg_dt",
											"type": "DateTime",
											"physicalType": "INT96"
										},
										"sink": {
											"name": "d_print_mfg_dt",
											"type": "DateTime",
											"physicalType": "datetime2"
										}
									},
									{
										"source": {
											"name": "c_ord_br_code",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_ord_br_code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "c_ord_year",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_ord_year",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "c_ord_prefix",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_ord_prefix",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "n_ord_srno",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_ord_srno",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_ord_seq",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_ord_seq",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "c_cont_code",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_cont_code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "n_verified_qty",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_verified_qty",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_claim_qty",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_claim_qty",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_claim_val",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_claim_val",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "c_coupon_code",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_coupon_code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "c_coupon_srno",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_coupon_srno",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "n_store_track",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_store_track",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "c_claim_reason",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_claim_reason",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "c_barcode",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_barcode",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "c_sman_code",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_sman_code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "c_godown_code",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_godown_code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "n_stk_serial",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_stk_serial",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "c_bom_code",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_bom_code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "n_bom_seq",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_bom_seq",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_item_tax_suffer",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_item_tax_suffer",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_item_vatts_flag",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_item_vatts_flag",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_item_vatts_mrp",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_item_vatts_mrp",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_item_tax_on_sch_qty",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_item_tax_on_sch_qty",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "c_tray_Code",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_tray_Code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "n_marketplace_flag",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_marketplace_flag",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "c_quot_no",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_quot_no",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "n_ts_value",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_ts_value",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_pick_seq",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_pick_seq",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_share_disc",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_share_disc",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_ord_rate",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_ord_rate",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_ord_rate_diff",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_ord_rate_diff",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "c_integration_code",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_integration_code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "n_update_stock",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_update_stock",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_adjust",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_adjust",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_currency",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_currency",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_exchange_rate",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_exchange_rate",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_gst_enabled",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_gst_enabled",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_from_gst_type",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_from_gst_type",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "c_hsn_sac_code",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_hsn_sac_code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "n_cgst_per",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_cgst_per",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_cgst_amt",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_cgst_amt",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_sgst_per",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_sgst_per",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_sgst_amt",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_sgst_amt",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_igst_per",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_igst_per",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_igst_amt",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_igst_amt",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_cess_per",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_cess_per",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_cess_amt",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_cess_amt",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_pk",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_pk",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_to_gst_type",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_to_gst_type",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "c_gst_code",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_gst_code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "n_taxable_amt",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_taxable_amt",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_inv_qty",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_inv_qty",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_ref_seq",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_ref_seq",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_ord_pk",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_ord_pk",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_dc_pk",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_dc_pk",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_purord_pk",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_purord_pk",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_std_disc_per",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_std_disc_per",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_total_discount",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_total_discount",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_hold_flag",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_hold_flag",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_print_seq",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_print_seq",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_eb_seq",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_eb_seq",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "c_eb_tray_Code",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_eb_tray_Code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "c_eb_doc_no",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_eb_doc_no",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "c_supp_code",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_supp_code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "n_eb_load",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_eb_load",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_add_cess_per",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_add_cess_per",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_add_cess_rev_excl",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_add_cess_rev_excl",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_cogs_amt",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_cogs_amt",
											"type": "Double",
											"physicalType": "float"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "InvDetInputFile",
								"type": "DatasetReference",
								"parameters": {
									"FolderName": "FullLoad"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "InvDetOutputTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Invoice"
				},
				"annotations": [],
				"lastPublishTime": "2022-02-23T11:49:43Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/InvDetInputFile')]",
				"[concat(variables('factoryId'), '/datasets/InvDetOutputTable')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Full Load Inv_Master')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data invoice master",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "select c_br_code, c_order_id, d_date, c_item_code, [Net Sales]\n,concat(c_br_code,'/', c_order_id, '/', c_item_code) as brcode_orderid_itemcode_key \n,Cost_value,\nconvert(decimal(18,2),([Net Sales]- Cost_value)) as Margin_value,\nconverT(decimal(18,2),(Spl_Disc_Amt + Disc_Amt)) as Tot_Disc_Amt,\ngetDate() as Load_DateTime\nfrom\n(select c_br_code, c_order_id, d_date,\n\tcase when c_item_code = 'COD' then null\n\t\t\telse c_item_code end as c_item_code\n\t\t\t, [Net Sales],Cost_value,Spl_Disc_Amt,Disc_Amt,Load_DateTime    from\n(select\tinv_mst_staging.c_br_code,\n\t\tinv_mst_staging.c_order_id,\n\t\tinv_mst_staging.d_date,\n\t\tinv_det_staging.c_item_code,\n\t\tsum(inv_det_staging.n_taxable_amt) as \"Net Sales\",\n\t\tconvert(decimal(18,2),((n_qty + n_qty1)* n_eff_pur_rate)) as Cost_value,\n\n\t\tcase when inv_det_staging.n_gst_enabled=1 then ((n_mrp *n_qty) -(n_sale_rate*n_qty))\n\t\t\t when ((n_mrp *n_qty) -(n_sale_rate*n_qty)) < 1 then 0 else ((n_mrp *n_qty) -(n_sale_rate*n_qty)) end as Spl_Disc_Amt,\n\n\t\tisnull((n_sale_rate*(n_qty + n_qty1)) * (case when n_non_taxable_ret =0 then 0 else n_disc_rs /n_non_taxable_ret end),0) + convert(decimal(18,2),((n_sale_rate*(n_qty + n_qty1))*n_disc_per/100)) as Disc_Amt,\n\t\tgetDate() as Load_DateTime\n\t\t\nfrom\t\tdbo.inv_det_staging\ninner join \n\t\t\tdbo.inv_mst_staging\n\t\t\ton \n\t\t\tdbo.inv_det_staging.c_br_code = inv_mst_staging.c_br_code\n\tand inv_det_staging.c_prefix = inv_mst_staging.c_prefix\n\tand inv_det_staging.c_year = inv_mst_staging.c_year\n\tand inv_det_staging.n_srno = inv_mst_staging.n_srno\nwhere inv_mst_staging.c_patient IS NOT NULL and  inv_mst_staging.c_cust_code = 'GC93' or inv_mst_staging.c_cust_code = 'GC793' or inv_mst_staging.c_cust_code = '751' and inv_det_staging.n_cancel_flag = 0 \ngroup by inv_mst_staging.c_br_code, \n        inv_mst_staging.c_order_id,\n\t\tinv_mst_staging.d_date,\n\t\t inv_det_staging.c_item_code,\n\t\t n_qty,n_qty1,n_eff_pur_rate,\n\t\t inv_det_staging.n_gst_enabled,n_mrp,n_sale_rate,n_non_taxable_ret,n_disc_rs,n_disc_per) a) b\n",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "SqlServerSink",
								"writeBatchTimeout": "18:00:00",
								"tableOption": "autoCreate"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "c_br_code",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "c_br_code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "c_order_id",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "c_order_id",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "d_date",
											"type": "DateTime",
											"physicalType": "datetime2"
										},
										"sink": {
											"name": "d_date",
											"type": "DateTime",
											"physicalType": "datetime2"
										}
									},
									{
										"source": {
											"name": "c_item_code",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "c_item_code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Net Sales",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "Net Sales",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "brcode_orderid_itemcode_key",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "brcode_orderid_itemcode_key",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Cost_value",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 2,
											"precision": 18
										},
										"sink": {
											"name": "Cost_value",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "Margin_value",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 2,
											"precision": 18
										},
										"sink": {
											"name": "Margin_value",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "Tot_Disc_Amt",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 2,
											"precision": 18
										},
										"sink": {
											"name": "Tot_Disc_Amt",
											"type": "Double",
											"physicalType": "float"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "InvDetandInvMstInputTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Inv_Master",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Copy data Inv_Mst_Staging to Inv_Mst",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Copy data invoice master",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "SqlServerSink",
								"tableOption": "autoCreate"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "InvMstOutputTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "InvMstTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Copy data Inv_Det_Staging to Inv_Det",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Copy data invoice master",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "SqlServerSink",
								"tableOption": "autoCreate"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "InvDetOutputTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "InvDetTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Invoice"
				},
				"annotations": [],
				"lastPublishTime": "2022-02-23T11:49:43Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/InvDetandInvMstInputTable')]",
				"[concat(variables('factoryId'), '/datasets/Inv_Master')]",
				"[concat(variables('factoryId'), '/datasets/InvMstOutputTable')]",
				"[concat(variables('factoryId'), '/datasets/InvMstTable')]",
				"[concat(variables('factoryId'), '/datasets/InvDetOutputTable')]",
				"[concat(variables('factoryId'), '/datasets/InvDetTable')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Full Load Inv_Mst_Staging')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data from Inv Mst file to inv Mst staging Table",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "SqlServerSink",
								"writeBatchTimeout": "18:00:00",
								"preCopyScript": "truncate table inv_mst_staging"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "InvMstInputFile",
								"type": "DatasetReference",
								"parameters": {
									"FolderName": "FullLoad"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "InvMstOutputTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Invoice"
				},
				"annotations": [],
				"lastPublishTime": "2022-02-23T11:49:43Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/InvMstInputFile')]",
				"[concat(variables('factoryId'), '/datasets/InvMstOutputTable')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Full Load Item Master _Live_SKU')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data Item Master",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Copy data EG Get Item",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "SqlServerSink",
								"preCopyScript": "truncate TABLE  Eco_Green_Item_Master",
								"tableOption": "autoCreate"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "Ecogreen_Itemmaster_OutputFile",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ItemMasterOutPutTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Copy data EG Get Item",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Delete Item Master CSV File",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SybaseSource",
								"query": "SELECT Item_mst.c_code AS Item_Code,\n       Item_mst.c_name AS Item_Name,\n       item_mst.d_adate as Created_date,\ncase when item_category_class_mst.c_code='ICL003' or item_category_class_mst.c_code='L1P001' or item_category_class_mst.c_code='L1P002' then 'PHARMA'\n\t when  item_category_class_mst.c_code='ICL004' then 'SURGICAL'\n\t when item_category_class_mst.c_code='ICL007' then 'CONSUMABLE'\n\t when item_category_class_mst.c_code='L1P005' then 'OPRS'\nelse 'FMCG' end  As Main_Category,\n     \n       item_category_mst.c_name AS category,\n       item_category_class_mst.c_name As Category_Class,\n       item_category_head_mst.c_name As Category_Head,\n     \n       item_group_mst.c_name AS Group_Name,\n     \n       Item_mst.n_lock_po AS Lock_PO,\n      Item_mst.n_lock AS n_lock\nFROM dba.Item_mst\n     \nINNER JOIN dba.item_category_mst ON Item_mst.c_cat_code = item_category_mst.c_code\nINNER JOIN dba.item_category_head_mst ON item_category_mst.c_item_category_head_code = item_category_head_mst.c_code\nINNER JOIN dba.item_category_class_mst ON item_category_head_mst.c_item_category_class_code = item_category_class_mst.c_code\ninner join dba.item_group_mst on item_group_mst.c_code = item_mst.c_group_code"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "Ds_Ecogreenv2",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Ecogreen_Itemmaster_OutputFile",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Stored procedure Update Column",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy data Item Master",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[usp_Eco_Green_Update_Columns]"
						},
						"linkedServiceName": {
							"referenceName": "Data360MSSQL",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Delete Item Master CSV File",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "Ecogreen_Itemmaster_OutputFile",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "Copy data EG Get Item Failure Mail",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Copy data EG Get Item",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://prod-03.centralindia.logic.azure.com:443/workflows/464eb5db81654a119fbde64f7815052d/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=mF2jqmQWzHvsdtjGxGf4ajGCuU9BPmu1x3S0gtBtHF8",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "{\n\"Process\":\"Copy data EG Get Item Failure Mail\",\n\"Pipeline\":\"@{pipeline().Pipeline}\",\n\"DataFactoryName\":\"@{pipeline().DataFactory}\",\n\"ErrorMessage\":\"@{activity('Copy data EG Get Item').Error.Message}\",\n\"Runid\":\"@{pipeline().RunId}\"\n}",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Copy data Item Master Failure Mail",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Copy data Item Master",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://prod-03.centralindia.logic.azure.com:443/workflows/464eb5db81654a119fbde64f7815052d/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=mF2jqmQWzHvsdtjGxGf4ajGCuU9BPmu1x3S0gtBtHF8",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "{\n\"Process\":\"Copy data Item Master Failure Mail\",\n\"Pipeline\":\"@{pipeline().Pipeline}\",\n\"DataFactoryName\":\"@{pipeline().DataFactory}\",\n\"ErrorMessage\":\"@{activity('Copy data Item Master').Error.Message}\",\n\"Runid\":\"@{pipeline().RunId}\"\n}",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Stored procedure Update Column Failure Mail",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Stored procedure Update Column",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://prod-03.centralindia.logic.azure.com:443/workflows/464eb5db81654a119fbde64f7815052d/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=mF2jqmQWzHvsdtjGxGf4ajGCuU9BPmu1x3S0gtBtHF8",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "{\n\"Process\":\"Stored procedure Update Column Failure Mail\",\n\"Pipeline\":\"@{pipeline().Pipeline}\",\n\"DataFactoryName\":\"@{pipeline().DataFactory}\",\n\"ErrorMessage\":\"@{activity('Stored procedure Update Column').Error.Message}\",\n\"Runid\":\"@{pipeline().RunId}\"\n}",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "ECO Green"
				},
				"annotations": [],
				"lastPublishTime": "2021-11-09T04:24:11Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Ecogreen_Itemmaster_OutputFile')]",
				"[concat(variables('factoryId'), '/datasets/ItemMasterOutPutTable')]",
				"[concat(variables('factoryId'), '/datasets/Ds_Ecogreenv2')]",
				"[concat(variables('factoryId'), '/linkedServices/Data360MSSQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Full Load MRP Variance')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data MRP Variance to File",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Delete MRP Variance  File",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SybaseSource",
								"query": "select \nstock.c_br_code,\nstock_mst.c_item_code,\nstock_mst.c_batch_no,\nstock_mst.c_item_code + '|' + stock_mst.c_batch_no  as \"Item_Batch\",\nstock_mst.d_exp_dt,\nstock_mst.n_mrp,\nstock_mst.n_mrp_box,\nstock_mst.n_qty_per_box,\nstock_mst.d_ldate,\nstock_mst.d_adate,\nstock_mst.c_createuser,\nitem_mst.n_mrp_box as \"Base_Mrp\",\nmin(stock_mst.n_mrp_box) as \"Min_Mrp\",\nmax(stock_mst.n_mrp_box) as \"Max_Mrp\",\nitem_mst.n_lock as \"Permanent_Lock\",\nitem_mst.n_lock_po as \"Lock_Po\",\nsum(stock.n_bal_qty/item_mst.n_qty_per_box) as \"Stock_Qty\",\n((stock.n_bal_qty/item_mst.n_qty_per_box)*(stock_mst.n_eff_pur_rate*item_mst.n_qty_per_box)) as \"Stock_Value\",\nt.n_mrp_box as 'Mode_Mrp'\n\nfrom dba.stock_mst inner join dba.stock on stock_mst.c_item_code = stock.c_item_code\nand stock_mst.c_batch_no = stock.c_batch_no\ninner join dba.item_mst on stock_mst.c_item_code = item_mst.c_code\n\n inner join\n(Select * from\n(select n_mrp_box, count(*) as cnt,c_item_code,\n             row_number() over (partition by c_item_code order by count(*) desc) as seqnum\n      from dba.stock_mst t\n      group by n_mrp_box,c_item_code) mode_mrp where seqnum=1) t \n\t  on t.c_item_code=stock_mst.c_item_code \n \n\nwhere stock.n_bal_qty <> 0\n\ngroup by\nstock.c_br_code,\nstock_mst.c_item_code,\nstock_mst.c_batch_no,\nstock_mst.c_item_code + '|' + stock_mst.c_batch_no,\nstock_mst.d_exp_dt,\nstock_mst.n_mrp,\nstock_mst.n_mrp_box,\nstock_mst.n_qty_per_box,\nstock_mst.d_ldate,\nstock_mst.d_adate,\nstock_mst.c_createuser,\nitem_mst.n_lock,item_mst.n_mrp_box,stock_mst.n_eff_pur_rate,\nitem_mst.n_qty_per_box,\nstock.n_bal_qty,\nitem_mst.n_lock_po,\nt.n_mrp_box;"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "Ds_Ecogreenv2",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "MRP_Variance_OutputFile",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Copy data MRP Variance File to table",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Copy data MRP Variance to File",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "SqlServerSink",
								"preCopyScript": "truncate table MRP_Variance_Final",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": true,
								"tableOption": "autoCreate"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "MRP_Variance_OutputFile",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "SQL_MRP_Variance",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Delete MRP Variance  File",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "MRP_Variance_OutputFile",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "Copy data MRP Variance to File Failure Mail",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Copy data MRP Variance to File",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://prod-03.centralindia.logic.azure.com:443/workflows/464eb5db81654a119fbde64f7815052d/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=mF2jqmQWzHvsdtjGxGf4ajGCuU9BPmu1x3S0gtBtHF8",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "{\n\"Process\":\"Copy data MRP Variance to File\",\n\"Pipeline\":\"@{pipeline().Pipeline}\",\n\"DataFactoryName\":\"@{pipeline().DataFactory}\",\n\"ErrorMessage\":\"@{activity('Copy data MRP Variance to File').Error.Message}\",\n\"Runid\":\"@{pipeline().RunId}\"\n}",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Copy data MRP Variance File to table Failure Mail",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Copy data MRP Variance File to table",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://prod-03.centralindia.logic.azure.com:443/workflows/464eb5db81654a119fbde64f7815052d/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=mF2jqmQWzHvsdtjGxGf4ajGCuU9BPmu1x3S0gtBtHF8",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "{\n\"Process\":\"Copy data MRP Variance File to table\",\n\"Pipeline\":\"@{pipeline().Pipeline}\",\n\"DataFactoryName\":\"@{pipeline().DataFactory}\",\n\"ErrorMessage\":\"@{activity('Copy data MRP Variance File to table').Error.Message}\",\n\"Runid\":\"@{pipeline().RunId}\"\n}",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "ECO Green"
				},
				"annotations": [],
				"lastPublishTime": "2022-02-18T08:31:04Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Ds_Ecogreenv2')]",
				"[concat(variables('factoryId'), '/datasets/MRP_Variance_OutputFile')]",
				"[concat(variables('factoryId'), '/datasets/SQL_MRP_Variance')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Full Load Mega Menu Updated')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data Mega Menu Query to Staging",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "MySqlSource",
								"query": "SELECT DISTINCT(wp.`item_code`)\n,wp.`item_fullname`\n,wp.product_id\n,wc.`category_id`\n,ccm.channel_id\n,wc.`category_name`\n,wc.`level`\nFROM wellnessDB.`product` wp\nLEFT JOIN wellnessDB.`channel_publish` cp ON wp.`product_id` = cp.`product_id`\nLEFT JOIN wellnessDB.`category_channel_mappings` ccm ON wp.`product_id` = ccm.`product_id`\nLEFT JOIN wellnessDB.`category` wc ON ccm.`category_id` = wc.`category_id`\nWHERE wp.`is_main_product` = 0 AND ccm.channel_id IN(1,2) \nORDER BY wp.`item_fullname` ASC"
							},
							"sink": {
								"type": "SqlServerSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "OMSMySqlTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "SQL_MegaMenuStag",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Mega Menu"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/OMSMySqlTable')]",
				"[concat(variables('factoryId'), '/datasets/SQL_MegaMenuStag')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Full Load Mega Menu')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data mega menu",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "MySqlSource",
								"query": "SELECT DISTINCT(wp.`item_code`)\n,wp.`item_fullname`\n,cm.channel_id\n,wc.`category_name`\n,wc.`level`\nFROM wellnessDB.`product` wp\nLEFT JOIN wellnessDB.`channel_publish` cp ON wp.`product_id` = cp.`product_id`\nLEFT JOIN wellnessDB.`channel_master` cm ON cp.`channel_id` = cm.`channel_id`\nLEFT JOIN wellnessDB.`category_channel_mappings` ccm ON wp.`product_id` = ccm.`product_id`\nLEFT JOIN wellnessDB.`category` wc ON ccm.`category_id` = wc.`category_id`\nWHERE wp.`is_main_product` = 0 and cm.channel_id in(1,2) and wc.`category_name` not like 'DEFAULT%'\nORDER BY wp.`item_fullname` ASC"
							},
							"sink": {
								"type": "SqlServerSink",
								"preCopyScript": "truncate table Mega_Menu_Staging;",
								"tableOption": "autoCreate"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "OMSMySqlTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Mega_Menu_OutputTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Copy data mega menu Failure Mail",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Copy data mega menu",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://prod-03.centralindia.logic.azure.com:443/workflows/464eb5db81654a119fbde64f7815052d/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=mF2jqmQWzHvsdtjGxGf4ajGCuU9BPmu1x3S0gtBtHF8",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "{\n\"Process\":\"Copy data mega menu Failure Mail\",\n\"Pipeline\":\"@{pipeline().Pipeline}\",\n\"DataFactoryName\":\"@{pipeline().DataFactory}\",\n\"ErrorMessage\":\"@{activity('Copy data mega menu').Error.Message}\",\n\"Runid\":\"@{pipeline().RunId}\"\n}",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Mega Menu"
				},
				"annotations": [],
				"lastPublishTime": "2021-12-13T08:22:34Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/OMSMySqlTable')]",
				"[concat(variables('factoryId'), '/datasets/Mega_Menu_OutputTable')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Full Load OMS Order Details')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "MySQL to SQL server",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "MySqlSource",
								"query": "SELECT DISTINCT\n ws.sale_id AS Order_Id\n,ws.sale_code\n,ws.created_date AS Order_Date\n,STR_TO_DATE(ws.processing_date,'%Y-%m-%d %H:%i:%s') as processing_date\n,STR_TO_DATE(ws.invoice_date,'%Y-%m-%d %H:%i:%s') as invoice_date\n,ws.user_name AS Customer_Name\n,ws.Customer_id\n,ws.store_id\n,wd.rx_type AS RX_type\n,wd.product_id\n,wd.mrp\n,wd.price\n,wd.quantity\n,ws.coupon_discount AS discount_on_order\n,ws.coupon_code\n,ws.grand_total\n,ws.order_invoice_amt\n,ws.txn_status\n,ws.payment_type AS Payment_mode\n,ws.online_TXN\n,ws.ERP_transactionid AS ERP_Id\n,ws.order_invoice_no AS Invoice_no\n,ws.delivery_status AS Order_Status\n,ws.partial_invoice\n,ws.DMS_jobid\n,ws.dman_id\n,ws.dman_name\n,ws.thirdPartyJobStatus\n,ws.three_pl_name\n,STR_TO_DATE(ws.DMS_eta_IST,'%Y-%m-%d %H:%i:%s') AS Actual_Delivery_date\n,STR_TO_DATE(ws.delivered_date,'%Y-%m-%d %H:%i:%s') AS Delivered_date\n,ws.cancel_reason\n,ws.remark\n,ws.MFM_timeframe\n,ws.sale_platform\n,ws.dman_payment_status AS Reconciled\n,ws.collected_amount AS Collected_amount\n,wd.item_code\n,concat(ws.store_id, '/', ws.sale_id, '/', wd.item_code) as brcode_orderid_itemcode_key\n,ws.order_parent_id\n,ws.buyer\nFROM  wellnessDB.order_details wd\nLEFT JOIN wellnessDB.sale ws ON wd.sale_id = ws.sale_id\nWHERE ws.created_date BETWEEN ('2020-04-01') AND ('2021-12-14')\nAND wd.status = 1\nORDER BY ws.sale_id ASC;"
							},
							"sink": {
								"type": "SqlServerSink",
								"preCopyScript": "truncate table oms_order_details",
								"tableOption": "autoCreate"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "OMSMySqlTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "OMSSqlServerTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Add columns",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "MySQL to SQL server",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[oms_order_details_add_column]"
						},
						"linkedServiceName": {
							"referenceName": "Data360MSSQL",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "SP Update Hour Bucket",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Update Order Revised Status",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[usp_OMS_Order_Details_Update_Hour_Bucket]"
						},
						"linkedServiceName": {
							"referenceName": "Data360MSSQL",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Update Order Revised Status",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Add columns",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[USP_Update_Revised_Status]"
						},
						"linkedServiceName": {
							"referenceName": "Data360MSSQL",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Order Details"
				},
				"annotations": [],
				"lastPublishTime": "2021-12-14T15:44:53Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/OMSMySqlTable')]",
				"[concat(variables('factoryId'), '/datasets/OMSSqlServerTable')]",
				"[concat(variables('factoryId'), '/linkedServices/Data360MSSQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Full Load Order det')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data order det",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SybaseSource",
								"query": "select * ,\n(c_br_code+'/'+c_year+'/'+c_prefix+'/'+ cast(cast(n_srno as float) as varchar) ) 'brcode_year_prefix_srno_key'\n from Order_det"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "Ds_Ecogreenv2",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "EG_Order_det_OutPutFile",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Copy data EG_Order_det file to table",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Copy data order det",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "SqlServerSink",
								"tableOption": "autoCreate"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "EG_Order_det_OutPutFile",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "EG_Order_Det_OutPutTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "ECO Green"
				},
				"annotations": [],
				"lastPublishTime": "2021-11-12T07:24:00Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Ds_Ecogreenv2')]",
				"[concat(variables('factoryId'), '/datasets/EG_Order_det_OutPutFile')]",
				"[concat(variables('factoryId'), '/datasets/EG_Order_Det_OutPutTable')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Full Load Product Master')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data Product",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "MySqlSource",
								"query": "select * from product;"
							},
							"sink": {
								"type": "SqlServerSink",
								"preCopyScript": "drop table OMS_Product;",
								"tableOption": "autoCreate"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "OMSMySqlTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Product_OutPutTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Copy data Product Failure Mail",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Copy data Product",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://prod-03.centralindia.logic.azure.com:443/workflows/464eb5db81654a119fbde64f7815052d/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=mF2jqmQWzHvsdtjGxGf4ajGCuU9BPmu1x3S0gtBtHF8",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "{\n\"Process\":\"Copy data Product Failure Mail\",\n\"Pipeline\":\"@{pipeline().Pipeline}\",\n\"DataFactoryName\":\"@{pipeline().DataFactory}\",\n\"ErrorMessage\":\"@{activity('Copy data Product').Error.Message}\",\n\"Runid\":\"@{pipeline().RunId}\"\n}",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Master"
				},
				"annotations": [],
				"lastPublishTime": "2021-10-26T03:55:32Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/OMSMySqlTable')]",
				"[concat(variables('factoryId'), '/datasets/Product_OutPutTable')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Full Load Pur_Det')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data pur_Det",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "SqlServerSink",
								"preCopyScript": "Truncate table Pur_Det",
								"tableOption": "autoCreate"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "Pur_Det_InputFile",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Pur_Det_OutPutTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Stored procedure Insert Final Data",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy data pur_Det",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[usp_pur_Det_final_data_insert]"
						},
						"linkedServiceName": {
							"referenceName": "Data360MSSQL",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Expiry Analysis"
				},
				"annotations": [],
				"lastPublishTime": "2021-09-20T10:39:37Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Pur_Det_InputFile')]",
				"[concat(variables('factoryId'), '/datasets/Pur_Det_OutPutTable')]",
				"[concat(variables('factoryId'), '/linkedServices/Data360MSSQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Full Load Stock Godown')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data stock godown",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "SqlServerSink",
								"tableOption": "autoCreate"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "Stock_Godown_InputFile",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "stock_godown_OutputTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Expiry Analysis"
				},
				"annotations": [],
				"lastPublishTime": "2021-11-03T04:26:53Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Stock_Godown_InputFile')]",
				"[concat(variables('factoryId'), '/datasets/stock_godown_OutputTable')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Full Load Stock mst and Stock')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data stock_mst",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "SqlServerSink",
								"preCopyScript": "truncate table Ex_Stock_Mst_Staging;",
								"tableOption": "autoCreate"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "c_item_code",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_item_code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "c_batch_no",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_batch_no",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "d_exp_dt",
											"type": "DateTime",
											"physicalType": "INT96"
										},
										"sink": {
											"name": "d_exp_dt",
											"type": "DateTime",
											"physicalType": "datetime2"
										}
									},
									{
										"source": {
											"name": "n_mrp",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_mrp",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_pur_rate",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_pur_rate",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_sale_rate",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_sale_rate",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_eff_pur_rate",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_eff_pur_rate",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_tax_suffer",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_tax_suffer",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_inc_exc_tax",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_inc_exc_tax",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_add_val",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_add_val",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_lock",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_lock",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_mrp_box",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_mrp_box",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_pur_rate_box",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_pur_rate_box",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_qty_per_box",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_qty_per_box",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "d_ldate",
											"type": "DateTime",
											"physicalType": "INT96"
										},
										"sink": {
											"name": "d_ldate",
											"type": "DateTime",
											"physicalType": "datetime2"
										}
									},
									{
										"source": {
											"name": "d_adate",
											"type": "DateTime",
											"physicalType": "INT96"
										},
										"sink": {
											"name": "d_adate",
											"type": "DateTime",
											"physicalType": "datetime2"
										}
									},
									{
										"source": {
											"name": "c_createuser",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_createuser",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "n_audited",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_audited",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_predefined",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_predefined",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_ptr_box",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_ptr_box",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_ptr",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_ptr",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "t_ltime",
											"type": "DateTime",
											"physicalType": "INT96"
										},
										"sink": {
											"name": "t_ltime",
											"type": "DateTime",
											"physicalType": "datetime2"
										}
									},
									{
										"source": {
											"name": "c_mfac_sh_name",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_mfac_sh_name",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "n_permanent_lock",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_permanent_lock",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "c_note",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_note",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "c_brand_name",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_brand_name",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "c_mfac_name",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_mfac_name",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "d_mfg_dt",
											"type": "DateTime",
											"physicalType": "INT96"
										},
										"sink": {
											"name": "d_mfg_dt",
											"type": "DateTime",
											"physicalType": "datetime2"
										}
									},
									{
										"source": {
											"name": "c_modiuser",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_modiuser",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "n_qc_per1",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_qc_per1",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_qc_per2",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_qc_per2",
											"type": "Double",
											"physicalType": "float"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "Stock_Mst_InputFile",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "EAStock_MstOutPutTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Copy data Stock",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Copy data stock_mst",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "SqlServerSink",
								"preCopyScript": "Truncate table Ex_Stock_Staging;",
								"tableOption": "autoCreate"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "EAStockInputFile",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "EAStockOutPutTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Stored procedure update Column",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy data Stock",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[usp_Expiry_Stock_Mst_Update_Column]"
						},
						"linkedServiceName": {
							"referenceName": "Data360MSSQL",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Stored procedure update column_copy1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Stored procedure update Column",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[usp_Expiry_Stock_Update_Column]"
						},
						"linkedServiceName": {
							"referenceName": "Data360MSSQL",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Expiry Analysis"
				},
				"annotations": [],
				"lastPublishTime": "2021-12-02T09:10:07Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Stock_Mst_InputFile')]",
				"[concat(variables('factoryId'), '/datasets/EAStock_MstOutPutTable')]",
				"[concat(variables('factoryId'), '/datasets/EAStockInputFile')]",
				"[concat(variables('factoryId'), '/datasets/EAStockOutPutTable')]",
				"[concat(variables('factoryId'), '/linkedServices/Data360MSSQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Full Load Stock')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data Stock",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "SqlServerSink",
								"preCopyScript": "Truncate table Ex_Stock_Staging;",
								"tableOption": "autoCreate"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "EAStockInputFile",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "EAStockOutPutTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Stored procedure update column",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy data Stock",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[usp_Expiry_Stock_Update_Column]"
						},
						"linkedServiceName": {
							"referenceName": "Data360MSSQL",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Expiry Analysis"
				},
				"annotations": [],
				"lastPublishTime": "2021-11-13T06:47:20Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/EAStockInputFile')]",
				"[concat(variables('factoryId'), '/datasets/EAStockOutPutTable')]",
				"[concat(variables('factoryId'), '/linkedServices/Data360MSSQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Full Load Store Master')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data Store Master",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "MySqlSource",
								"query": "select * from store;"
							},
							"sink": {
								"type": "SqlServerSink",
								"preCopyScript": "truncate table OMS_Store;",
								"tableOption": "autoCreate"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "id",
											"type": "Int32"
										},
										"sink": {
											"name": "id",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "store_id",
											"type": "String"
										},
										"sink": {
											"name": "store_id",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "store_name",
											"type": "String"
										},
										"sink": {
											"name": "store_name",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "branch",
											"type": "String"
										},
										"sink": {
											"name": "branch",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "fax",
											"type": "String"
										},
										"sink": {
											"name": "fax",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "email",
											"type": "String"
										},
										"sink": {
											"name": "email",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "password",
											"type": "String"
										},
										"sink": {
											"name": "password",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "phone",
											"type": "String"
										},
										"sink": {
											"name": "phone",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "fcm_token",
											"type": "String"
										},
										"sink": {
											"name": "fcm_token",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "device_type",
											"type": "String"
										},
										"sink": {
											"name": "device_type",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "store_address",
											"type": "String"
										},
										"sink": {
											"name": "store_address",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "device_id",
											"type": "String"
										},
										"sink": {
											"name": "device_id",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "country",
											"type": "String"
										},
										"sink": {
											"name": "country",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "state",
											"type": "String"
										},
										"sink": {
											"name": "state",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "city",
											"type": "String"
										},
										"sink": {
											"name": "city",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "pincode",
											"type": "Int32"
										},
										"sink": {
											"name": "pincode",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "vendor_id",
											"type": "Int32"
										},
										"sink": {
											"name": "vendor_id",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "lattitude",
											"type": "Decimal"
										},
										"sink": {
											"name": "lattitude",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 8,
											"precision": 10
										}
									},
									{
										"source": {
											"name": "longitude",
											"type": "Decimal"
										},
										"sink": {
											"name": "longitude",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 8,
											"precision": 10
										}
									},
									{
										"source": {
											"name": "status",
											"type": "Int32"
										},
										"sink": {
											"name": "status",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "deliver_phase",
											"type": "String"
										},
										"sink": {
											"name": "deliver_phase",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "grid_id",
											"type": "String"
										},
										"sink": {
											"name": "grid_id",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "vendorCode",
											"type": "String"
										},
										"sink": {
											"name": "vendorCode",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "landmark",
											"type": "String"
										},
										"sink": {
											"name": "landmark",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "nodeTypeName",
											"type": "String"
										},
										"sink": {
											"name": "nodeTypeName",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "parentNodeType",
											"type": "String"
										},
										"sink": {
											"name": "parentNodeType",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "rank",
											"type": "String"
										},
										"sink": {
											"name": "rank",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "special",
											"type": "String"
										},
										"sink": {
											"name": "special",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "dropShipmentVendorList",
											"type": "String"
										},
										"sink": {
											"name": "dropShipmentVendorList",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "createdBy",
											"type": "String"
										},
										"sink": {
											"name": "createdBy",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "updatedBy",
											"type": "String"
										},
										"sink": {
											"name": "updatedBy",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "created_at",
											"type": "DateTime"
										},
										"sink": {
											"name": "created_at",
											"type": "DateTime",
											"physicalType": "datetime2"
										}
									},
									{
										"source": {
											"name": "updatedAt",
											"type": "DateTime"
										},
										"sink": {
											"name": "updatedAt",
											"type": "DateTime",
											"physicalType": "datetime2"
										}
									},
									{
										"source": {
											"name": "store_hartbeat_status",
											"type": "Int32"
										},
										"sink": {
											"name": "store_hartbeat_status",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "heartbeat_update_date",
											"type": "String"
										},
										"sink": {
											"name": "heartbeat_update_date",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "area_manager",
											"type": "String"
										},
										"sink": {
											"name": "area_manager",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "area_manager_phone",
											"type": "String"
										},
										"sink": {
											"name": "area_manager_phone",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "territory_manager",
											"type": "String"
										},
										"sink": {
											"name": "territory_manager",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "territory_manager_phone",
											"type": "String"
										},
										"sink": {
											"name": "territory_manager_phone",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "store_manager",
											"type": "String"
										},
										"sink": {
											"name": "store_manager",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "store_manager_phone",
											"type": "String"
										},
										"sink": {
											"name": "store_manager_phone",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "shipping_providers",
											"type": "String"
										},
										"sink": {
											"name": "shipping_providers",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "last_syncdate",
											"type": "String"
										},
										"sink": {
											"name": "last_syncdate",
											"type": "String",
											"physicalType": "nvarchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "OMSMySqlTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "StoreMaster_OutPutTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Copy data Store Master Failure Mail",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Copy data Store Master",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://prod-03.centralindia.logic.azure.com:443/workflows/464eb5db81654a119fbde64f7815052d/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=mF2jqmQWzHvsdtjGxGf4ajGCuU9BPmu1x3S0gtBtHF8",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "{\n\"Process\":\"Copy data Store Master Failure Mail\",\n\"Pipeline\":\"@{pipeline().Pipeline}\",\n\"DataFactoryName\":\"@{pipeline().DataFactory}\",\n\"ErrorMessage\":\"@{activity('Copy data Store Master').Error.Message}\",\n\"Runid\":\"@{pipeline().RunId}\"\n}",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Master"
				},
				"annotations": [],
				"lastPublishTime": "2021-12-24T03:58:00Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/OMSMySqlTable')]",
				"[concat(variables('factoryId'), '/datasets/StoreMaster_OutPutTable')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Full Load Wellness Medicare S14278 Debit')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data Medicare S14278 Debit",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Delete file",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SybaseSource",
								"query": "Select ( cogs.c_br_code ) as c_br_code,\n\t\t( cogs.c_year ) as c_year,   \n\t\t( cogs.c_prefix ) as c_prefix,   \n\t\t( cogs.n_tran_no ) as n_tran_no,   \n\t\t( cogs.c_act_code ) as c_act_code,   \n\t\t( cogs.d_date ) as d_date,   \n\t\tSUM( cogs.n_amount ) as n_amount,   \n\t\t( cogs.c_opp_act_code ) as c_opp_act_code,   \n\t\t( cogs.c_ref_br_code ) as c_ref_br_code,\n\t\t( cogs.c_ref_no ) as c_ref_no,   \n\t\t( cogs.d_chq_date) as d_chq_date,   \n\t\t( cogs.c_remark ) as c_remark,   \n\t\t( cogs.c_act_name ) as c_act_name,   \n\t\t( cogs.c_opp_act_name ) as c_opp_act_name,\n\t\t( cogs.c_add_1 ) as c_add_1,\n\t\t( cogs.c_add_2 ) as c_add_2, \n\t\t( cogs.c_add_3 ) as c_add_3,\n\t\t( cogs.c_city ) as c_city,\n\t\t( cogs.n_ref_srno ) as n_ref_srno,\n\t\t( cogs.n_order_no ) as n_order_no,\n\t\t( cogs.recon_dt) as recon_dt,\n\t\t( if recon_dt is null then 0 else 1 endif ) as chq_pass,\n\t\t( cogs.multi_act_name) as multi_act_name,\n\t\tisnull( case when n_amount  > 0 then n_amount else 0 end,0) as Debit,\n\t\tisnull( case when n_amount  < 0 then n_amount else 0 end,0) as credit\nFrom\n(\n\tSELECT ( ledger.c_br_code ) as c_br_code,\n\t\t\t( ledger.c_year ) as c_year,   \n\t\t\t( ledger.c_prefix ) as c_prefix,   \n\t\t\t( ledger.n_tran_no ) as n_tran_no,   \n\t\t\t( ledger.c_act_code ) as c_act_code,   \n\t\t\t( ledger.d_date ) as d_date,   \n\t\t\t( ledger.n_amount ) as n_amount,   \n\t\t\t( ledger.c_opp_act_code ) as c_opp_act_code,   \n\t\t\t( ledger.c_ref_br_code ) as c_ref_br_code,\n\t\t\t( settle_mst_header.c_ref_no ) as c_ref_no,   \n\t\t\tdate(settle_mst_header.d_ref_date) as d_chq_date,   \n\t\t\t( settle_mst_header.c_remark ) as c_remark,   \n\t\t\t( act_mst_a.c_name ) as c_act_name,   \n\t\t\t( act_mst_b.c_name ) as c_opp_act_name,\n\t\t\t( act_mst_a.c_add_1 ) as c_add_1,\n\t\t\t( act_mst_a.c_add_2 ) as c_add_2, \n\t\t\t( act_mst_a.c_add_3 ) as c_add_3,\n\t\t\t( act_mst_a.c_city ) as c_city,\n\t\t\t( grn_mst.n_ref_srno ) as n_ref_srno,\n\t\t\t( gdn_mst.n_order_no ) as n_order_no,\n\t\t\t(d_reconcile_date) as recon_dt,\n\t\t\t(if recon_dt is null then 0 else 1 endif) as chq_pass,\n\t\t\tif ledger.c_opp_act_code='~~~~~~~~~~~~' then \n\t\t\t\t(select list(ac.c_name+' : '+string(n_amount),char(13)) from ledger ll , act_mst ac  where ac.c_code=ll.c_act_code and\n\t\t\t\t\t\tll.c_br_code=ledger.c_br_code and ll.c_year=ledger.c_year\n\t\t\t\t\t\tand ll.c_prefix=ledger.c_prefix and ll.n_tran_no=ledger.n_tran_no and \n\t\t\t\t\t\t(ledger.n_amount<0 and ll.n_amount>0 or ledger.n_amount>0 and ll.n_amount<0))\n\t\t\telse '' endif as multi_act_name\n    FROM ledger\n\t\t\t\tinner join (select c_br_code as brcode from branch_group_det where length('000') = 6 and c_code = '000' and  branch_group_det.n_cancel_flag = 0 \n            union \n            select c_code from act_mst where length('000')<> 6 and c_code >= (if '000' = 'zzz' then '000' else '000' endif ) and ( c_code <= '000' ) \n            ) brlist on brlist.brcode=ledger.c_ref_br_code  \n\t\t\tleft outer join settle_mst_header  on  ledger.c_br_code = settle_mst_header.c_br_code  and \n\t\t\t ledger.c_year = settle_mst_header.c_year  and \n          ledger.c_prefix = settle_mst_header.c_prefix  and \n          ledger.n_tran_no = settle_mst_header.n_srno  \n          left outer join grn_mst on  ledger.c_br_code = grn_mst.c_br_code  and \n\t\t\t\tledger.c_year = grn_mst.c_year  and \n\t\t\t\tledger.c_prefix = grn_mst.c_prefix  and \n\t\t\t\tledger.n_tran_no = grn_mst.n_srno\n\t\t\tleft outer join gdn_mst  on  ledger.c_br_code = gdn_mst.c_br_code  and \n\t\t\t\tledger.c_year = gdn_mst.c_year  and \n\t\t\t\tledger.c_prefix = gdn_mst.c_prefix  and \n\t\t\t\tledger.n_tran_no = gdn_mst.n_srno\n\t\t\t\tleft outer join reconcile_mst  on  ledger.c_br_code= reconcile_mst.c_br_code and ledger.c_year = reconcile_mst.c_year and\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  ledger.c_prefix = reconcile_mst.c_prefix and  ledger.n_tran_no = reconcile_mst.n_srno, \n          act_mst act_mst_a,   \n         act_mst act_mst_b  \n   WHERE \n         ( act_mst_a.c_code = ledger.c_act_code ) and \n         ( act_mst_b.c_code = ledger.c_opp_act_code ) and\t\n         ( ( ledger.d_date >= '2021-10-01' ) and\t\n         ( ledger.d_date <= getDate() ) and \n         ( ledger.c_act_code >= 'S14278' ) and \n         ( ledger.c_act_code <= 'S14278' )   and\n\t\t\t( ledger.n_amount <> 0) )\n\tUnion All\n\t SELECT ( ledger.c_br_code ) as c_br_code,\n\t\t\t( ledger.c_year ) as c_year,   \n\t\t\t( ledger.c_prefix ) as c_prefix,   \n\t\t\t( ledger.n_tran_no ) as n_tran_no,   \n\t\t\t( ledger.c_act_code ) as c_act_code,   \n\t\t\t( ledger.d_date ) as d_date,   \n\t\t\t( ledger.n_amount ) as n_amount,   \n\t\t\t( ledger.c_opp_act_code ) as c_opp_act_code,   \n\t\t\t( ledger.c_ref_br_code ) as c_ref_br_code,\n\t\t\t( settle_mst_header.c_ref_no ) as c_ref_no,   \n\t\t\tdate(settle_mst_header.d_ref_date) as d_chq_date,   \n\t\t\t( settle_mst_header.c_remark ) as c_remark,   \n\t\t\t( act_mst_a.c_name ) as c_act_name,   \n\t\t\t( act_mst_b.c_name ) as c_opp_act_name,\n\t\t\t( act_mst_a.c_add_1 ) as c_add_1,\n\t\t\t( act_mst_a.c_add_2 ) as c_add_2, \n\t\t\t( act_mst_a.c_add_3 ) as c_add_3,\n\t\t\t( act_mst_a.c_city ) as c_city,\n\t\t\t( grn_mst.n_ref_srno ) as n_ref_srno,\n\t\t\t( gdn_mst.n_order_no ) as n_order_no,\n\t\t\t(d_reconcile_date) as recon_dt,\n\t\t\t(if recon_dt is null then 0 else 1 endif) as chq_pass,\n\t\t\tif ledger.c_opp_act_code='~~~~~~~~~~~~' then \n\t\t\t\t(select list(ac.c_name+' : '+string(n_amount),char(13)) from ledger ll , act_mst ac  where ac.c_code=ll.c_act_code and\n\t\t\t\t\t\tll.c_br_code=ledger.c_br_code and ll.c_year=ledger.c_year\n\t\t\t\t\t\tand ll.c_prefix=ledger.c_prefix and ll.n_tran_no=ledger.n_tran_no and \n\t\t\t\t\t\t(ledger.n_amount<0 and ll.n_amount>0 or ledger.n_amount>0 and ll.n_amount<0))\n\t\t\telse '' endif as multi_act_name\n    FROM cogs_ledger as ledger\n\t\t\t\tinner join (select c_br_code as brcode from branch_group_det where length('000') = 6 and c_code = '000' and  branch_group_det.n_cancel_flag = 0 \n            union \n            select c_code from act_mst where length('000')<> 6 and c_code >= (if '000' = 'zzz' then '000' else '000' endif ) and ( c_code <= '000' ) \n            ) brlist on brlist.brcode=ledger.c_ref_br_code  \n\t\t\tleft outer join settle_mst_header  on  ledger.c_br_code = settle_mst_header.c_br_code  and \n\t\t\t ledger.c_year = settle_mst_header.c_year  and \n          ledger.c_prefix = settle_mst_header.c_prefix  and \n          ledger.n_tran_no = settle_mst_header.n_srno  \n          left outer join grn_mst on  ledger.c_br_code = grn_mst.c_br_code  and \n\t\t\t\tledger.c_year = grn_mst.c_year  and \n\t\t\t\tledger.c_prefix = grn_mst.c_prefix  and \n\t\t\t\tledger.n_tran_no = grn_mst.n_srno\n\t\t\tleft outer join gdn_mst  on  ledger.c_br_code = gdn_mst.c_br_code  and \n\t\t\t\tledger.c_year = gdn_mst.c_year  and \n\t\t\t\tledger.c_prefix = gdn_mst.c_prefix  and \n\t\t\t\tledger.n_tran_no = gdn_mst.n_srno\n\t\t\t\tleft outer join reconcile_mst  on  ledger.c_br_code= reconcile_mst.c_br_code and ledger.c_year = reconcile_mst.c_year and\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  ledger.c_prefix = reconcile_mst.c_prefix and  ledger.n_tran_no = reconcile_mst.n_srno, \n          act_mst act_mst_a,   \n         act_mst act_mst_b  \n   WHERE \n         ( act_mst_a.c_code = ledger.c_act_code ) and \n         ( act_mst_b.c_code = ledger.c_opp_act_code ) and\t\n         ( ( ledger.d_date >= '2021-10-01' ) and\t\n         ( ledger.d_date <= getDate() ) and \n         ( ledger.c_act_code >= 'S14278' ) and \n         ( ledger.c_act_code <= 'S14278' )   and\n\t\t\t( ledger.n_amount <> 0) ) --and :li_cogs =1\n) as cogs\nGroup By c_br_code,c_year,c_prefix,n_tran_no,c_act_code,d_date,c_opp_act_code,c_ref_br_code,c_ref_no,   \n\t\td_chq_date,c_remark,c_act_name,c_opp_act_name,c_add_1,c_add_2,c_add_3,c_city,n_ref_srno,\n\t\tn_order_no,recon_dt,multi_act_name\nUNION   ALL\n  SELECT ('') as c_br_code,\n\t\t\t('00') as c_year,   \n         ('OP') as c_prefix,   \n         ( 0 ) as c_tran_no,   \n         ( ledger.c_act_code ) as c_act_code,   \n         ( date('2021-10-21')) as d_date,   \n         sum(ledger.n_amount) as n_amount,   \n         ( '' ) as c_opp_act_code,   \n         ( '' ) as c_ref_br_code,   \n         ( '' ) as c_ref_no,   \n         date('2021-10-21') as d_chq_date,   \n         ( '' ) as c_remark,   \n         ( act_mst.c_name ) as c_act_name,   \n         ( 'Opening Balance' ) as c_opp_act_name,\n\t\t\t( act_mst.c_add_1 )  as c_add_1,\n\t\t\t( act_mst.c_add_2 )  as c_add_2, \n\t\t\t( act_mst.c_add_3 )  as c_add_3,\n\t\t\t( act_mst.c_city ) as c_city,\n\t\t\t(0) as n_ref_srno,\n\t\t\t(0) as n_order_no,\n\t\t\t( null )  as recon_dt,\n\t\t\t( 0 )  \tas chq_pass,\n\t\t\t( '' ) as multi_act_name\t,\n\t\tisnull( case when n_amount  > 0 then n_amount else 0 end,0) as Debit,\n\t\tisnull( case when n_amount  < 0 then n_amount else 0 end,0) as credit\n    FROM dba.ledger\n\t\t\t\tinner join (select c_br_code as brcode from dba.branch_group_det where length('000') = 6 and c_code = '000' and  branch_group_det.n_cancel_flag = 0 \n            union \n            select c_code from dba.act_mst where length('000')<> 6 and c_code >= (if '000' = 'zzz' then '000' else '000' endif ) and ( c_code <= '000' ) \n            ) brlist on brlist.brcode=ledger.c_ref_br_code,  \n         act_mst  \n   WHERE ( act_mst.c_code = ledger.c_act_code ) and  \n         ( ( ledger.d_date <= getDate() ) and\t\n         ( ledger.c_act_code >= 'S14278' ) and\t\n         ( ledger.c_act_code <= 'S14278' ) )   \nGROUP BY c_act_code,c_act_name,c_add_1,c_add_2,c_add_3,c_city"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "Ds_Ecogreenv2",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "RL_Medicare_S14278_Debit",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Copy data Medicare S14278 File to Table",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Copy data Medicare S14278 Debit",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "SqlServerSink",
								"preCopyScript": "truncate table Medicare_S14278_Debit_Staging",
								"tableOption": "autoCreate"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "RL_Medicare_S14278_Debit",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "SQL_Medicare_S14278_Debit",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Delete file",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "RL_Medicare_S14278_Debit",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Reconciliation Ledgers"
				},
				"annotations": [],
				"lastPublishTime": "2022-01-05T10:19:51Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Ds_Ecogreenv2')]",
				"[concat(variables('factoryId'), '/datasets/RL_Medicare_S14278_Debit')]",
				"[concat(variables('factoryId'), '/datasets/SQL_Medicare_S14278_Debit')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Full Load Wellness Medicare sale 751 Debit')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data medicare sale 751 Debit  into file",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Delete File",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SybaseSource",
								"query": "SELECT \nc_br_code,c_year,c_prefix,n_srno,d_date,c_cust_code,n_total,n_cancel_flag,c_order_id,\nn_taxable_amt,c_ord_br_code,c_ord_prefix,c_ord_year,n_ord_no\nFROM dba.inv_mst \nwhere c_cust_code = '751' and n_cancel_flag=0 and convert(date,d_date) > '2021-10-01'"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "Ds_Ecogreenv2",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "RL_Medicare_Sale_751_Debit",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Copy data file to Table",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Copy data medicare sale 751 Debit  into file",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "SqlServerSink",
								"preCopyScript": "truncate table Medicare_Sale_751_Debit_Staging",
								"tableOption": "autoCreate"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "RL_Medicare_Sale_751_Debit",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "SQL_Medicare_Sale_751_Debit",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Delete File",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "RL_Medicare_Sale_751_Debit",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Reconciliation Ledgers"
				},
				"annotations": [],
				"lastPublishTime": "2022-01-04T10:54:09Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Ds_Ecogreenv2')]",
				"[concat(variables('factoryId'), '/datasets/RL_Medicare_Sale_751_Debit')]",
				"[concat(variables('factoryId'), '/datasets/SQL_Medicare_Sale_751_Debit')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Full Load dbnt_det')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data dbnt_det",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "SqlServerSink",
								"tableOption": "autoCreate"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "c_br_code",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_br_code",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "c_year",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_year",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "c_prefix",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_prefix",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "n_srno",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_srno",
											"type": "Decimal",
											"physicalType": "Decimal"
										}
									},
									{
										"source": {
											"name": "d_date",
											"type": "DateTime",
											"physicalType": "INT96"
										},
										"sink": {
											"name": "d_date",
											"type": "DateTime",
											"physicalType": "DateTime"
										}
									},
									{
										"source": {
											"name": "c_item_code",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_item_code",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "c_batch_no",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_batch_no",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "n_qty",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_qty",
											"type": "Decimal",
											"physicalType": "Decimal"
										}
									},
									{
										"source": {
											"name": "n_sale_rate",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_sale_rate",
											"type": "Decimal",
											"physicalType": "Decimal"
										}
									},
									{
										"source": {
											"name": "n_amount",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_amount",
											"type": "Decimal",
											"physicalType": "Decimal"
										}
									},
									{
										"source": {
											"name": "c_mf_code",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_mf_code",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "n_eff_pur_rate",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_eff_pur_rate",
											"type": "Decimal",
											"physicalType": "Decimal"
										}
									},
									{
										"source": {
											"name": "n_cogs_amt",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_cogs_amt",
											"type": "Decimal",
											"physicalType": "Decimal"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "dbnt_det_InputFile",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "dbnt_det_OutPutFile",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Expiry Analysis"
				},
				"annotations": [],
				"lastPublishTime": "2021-11-11T04:39:03Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dbnt_det_InputFile')]",
				"[concat(variables('factoryId'), '/datasets/dbnt_det_OutPutFile')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Full Load dbnt_mst')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data dbtn_mst",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "SqlServerSink",
								"tableOption": "autoCreate"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "c_br_Code",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_br_Code",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "c_year",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_year",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "c_prefix",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_prefix",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "n_srno",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_srno",
											"type": "Decimal",
											"physicalType": "Decimal"
										}
									},
									{
										"source": {
											"name": "d_date",
											"type": "DateTime",
											"physicalType": "INT96"
										},
										"sink": {
											"name": "d_date",
											"type": "DateTime",
											"physicalType": "DateTime"
										}
									},
									{
										"source": {
											"name": "c_cust_code",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_cust_code",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "n_total",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_total",
											"type": "Decimal",
											"physicalType": "Decimal"
										}
									},
									{
										"source": {
											"name": "n_non_taxable_ret",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_non_taxable_ret",
											"type": "Decimal",
											"physicalType": "Decimal"
										}
									},
									{
										"source": {
											"name": "c_reason_code",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_reason_code",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "n_approved",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_approved",
											"type": "Decimal",
											"physicalType": "Decimal"
										}
									},
									{
										"source": {
											"name": "n_cogs_amt",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_cogs_amt",
											"type": "Decimal",
											"physicalType": "Decimal"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "dbtn_mst_InputFile",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "dbtn_mst_OutputTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Expiry Analysis"
				},
				"annotations": [],
				"lastPublishTime": "2021-11-11T04:29:47Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dbtn_mst_InputFile')]",
				"[concat(variables('factoryId'), '/datasets/dbtn_mst_OutputTable')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Full Load rtn inv mst')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data rnt_inv_mst",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "SqlServerSink",
								"tableOption": "autoCreate"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "c_br_code",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_br_code",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "c_year",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_year",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "c_prefix",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_prefix",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "n_srno",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_srno",
											"type": "Decimal",
											"physicalType": "Decimal"
										}
									},
									{
										"source": {
											"name": "d_date",
											"type": "DateTime",
											"physicalType": "INT96"
										},
										"sink": {
											"name": "d_date",
											"type": "DateTime",
											"physicalType": "DateTime"
										}
									},
									{
										"source": {
											"name": "t_time",
											"type": "DateTime",
											"physicalType": "INT96"
										},
										"sink": {
											"name": "t_time",
											"type": "DateTime",
											"physicalType": "DateTime"
										}
									},
									{
										"source": {
											"name": "c_cust_code",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_cust_code",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "c_patient",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_patient",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "c_reason_code",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_reason_code",
											"type": "String",
											"physicalType": "String"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "rnt_inv_mst_InputFile",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "rnt_inv_mst_OutputTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Expiry Analysis"
				},
				"annotations": [],
				"lastPublishTime": "2021-11-11T06:38:35Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/rnt_inv_mst_InputFile')]",
				"[concat(variables('factoryId'), '/datasets/rnt_inv_mst_OutputTable')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Full Load rtn_inv_det')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data rnt_inv_det",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "SqlServerSink",
								"tableOption": "autoCreate"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "c_br_code",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_br_code",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "c_year",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_year",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "c_prefix",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_prefix",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "n_srno",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_srno",
											"type": "Decimal",
											"physicalType": "Decimal"
										}
									},
									{
										"source": {
											"name": "d_date",
											"type": "DateTime",
											"physicalType": "INT96"
										},
										"sink": {
											"name": "d_date",
											"type": "DateTime",
											"physicalType": "DateTime"
										}
									},
									{
										"source": {
											"name": "c_item_code",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_item_code",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "c_batch_no",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_batch_no",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "n_qty",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_qty",
											"type": "Decimal",
											"physicalType": "Decimal"
										}
									},
									{
										"source": {
											"name": "n_amount",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_amount",
											"type": "Decimal",
											"physicalType": "Decimal"
										}
									},
									{
										"source": {
											"name": "c_mf_code",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_mf_code",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "n_eff_pur_rate",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_eff_pur_rate",
											"type": "Decimal",
											"physicalType": "Decimal"
										}
									},
									{
										"source": {
											"name": "n_taxable_amt",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_taxable_amt",
											"type": "Decimal",
											"physicalType": "Decimal"
										}
									},
									{
										"source": {
											"name": "c_reason_code",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_reason_code",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "c_act_code",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_act_code",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "c_ref_no",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_ref_no",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "c_cust_code",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_cust_code",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "n_approved",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_approved",
											"type": "Decimal",
											"physicalType": "Decimal"
										}
									},
									{
										"source": {
											"name": "n_cogs_amt",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_cogs_amt",
											"type": "Decimal",
											"physicalType": "Decimal"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "rnt_inv_det_InputFile",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "rnt_inv_det_OutputTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Expiry Analysis"
				},
				"annotations": [],
				"lastPublishTime": "2021-11-11T04:16:12Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/rnt_inv_det_InputFile')]",
				"[concat(variables('factoryId'), '/datasets/rnt_inv_det_OutputTable')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Full Load stock_mst')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data stock_mst",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "SqlServerSink",
								"preCopyScript": "truncate table Ex_Stock_Mst_Staging;",
								"tableOption": "autoCreate"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "c_item_code",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_item_code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "c_batch_no",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_batch_no",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "d_exp_dt",
											"type": "DateTime",
											"physicalType": "INT96"
										},
										"sink": {
											"name": "d_exp_dt",
											"type": "DateTime",
											"physicalType": "datetime2"
										}
									},
									{
										"source": {
											"name": "n_mrp",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_mrp",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_pur_rate",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_pur_rate",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_sale_rate",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_sale_rate",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_eff_pur_rate",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_eff_pur_rate",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_tax_suffer",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_tax_suffer",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_inc_exc_tax",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_inc_exc_tax",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_add_val",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_add_val",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_lock",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_lock",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_mrp_box",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_mrp_box",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_pur_rate_box",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_pur_rate_box",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_qty_per_box",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_qty_per_box",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "d_ldate",
											"type": "DateTime",
											"physicalType": "INT96"
										},
										"sink": {
											"name": "d_ldate",
											"type": "DateTime",
											"physicalType": "datetime2"
										}
									},
									{
										"source": {
											"name": "d_adate",
											"type": "DateTime",
											"physicalType": "INT96"
										},
										"sink": {
											"name": "d_adate",
											"type": "DateTime",
											"physicalType": "datetime2"
										}
									},
									{
										"source": {
											"name": "c_createuser",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_createuser",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "n_audited",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_audited",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_predefined",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_predefined",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_ptr_box",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_ptr_box",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_ptr",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_ptr",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "t_ltime",
											"type": "DateTime",
											"physicalType": "INT96"
										},
										"sink": {
											"name": "t_ltime",
											"type": "DateTime",
											"physicalType": "datetime2"
										}
									},
									{
										"source": {
											"name": "c_mfac_sh_name",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_mfac_sh_name",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "n_permanent_lock",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_permanent_lock",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "c_note",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_note",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "c_brand_name",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_brand_name",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "c_mfac_name",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_mfac_name",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "d_mfg_dt",
											"type": "DateTime",
											"physicalType": "INT96"
										},
										"sink": {
											"name": "d_mfg_dt",
											"type": "DateTime",
											"physicalType": "datetime2"
										}
									},
									{
										"source": {
											"name": "c_modiuser",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_modiuser",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "n_qc_per1",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_qc_per1",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_qc_per2",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_qc_per2",
											"type": "Double",
											"physicalType": "float"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "Stock_Mst_InputFile",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "EAStock_MstOutPutTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Stored procedure update Column",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy data stock_mst",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[usp_Expiry_Stock_Mst_Update_Column]"
						},
						"linkedServiceName": {
							"referenceName": "Data360MSSQL",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Expiry Analysis"
				},
				"annotations": [],
				"lastPublishTime": "2021-11-13T13:36:00Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Stock_Mst_InputFile')]",
				"[concat(variables('factoryId'), '/datasets/EAStock_MstOutPutTable')]",
				"[concat(variables('factoryId'), '/linkedServices/Data360MSSQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/FullLoad EG Inv_Det')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data EG Inv_Det",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Delete EG Inv_Det",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SybaseSource",
								"query": "Select * from dba.inv_det where convert(date,d_date) between '2022-02-14' and '2022-02-15'"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "Ds_Ecogreenv2",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "EG_Inv_Det_OutPutFile",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Copy data EG Inv_det file to Table",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Copy data EG Inv_Det",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "SqlServerSink",
								"preCopyScript": "Truncate table Inv_Det_Staging",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "c_br_code",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_br_code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "c_year",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_year",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "c_prefix",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_prefix",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "n_srno",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_srno",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_seq",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_seq",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "d_date",
											"type": "DateTime",
											"physicalType": "INT96"
										},
										"sink": {
											"name": "d_date",
											"type": "DateTime",
											"physicalType": "datetime2"
										}
									},
									{
										"source": {
											"name": "c_item_code",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_item_code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "c_batch_no",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_batch_no",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "n_qty",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_qty",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_sch_qty",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_sch_qty",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_sch_disc",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_sch_disc",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_sale_rate",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_sale_rate",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_disc_per",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_disc_per",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_st_per",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_st_per",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_cst_per",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_cst_per",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_rst_per",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_rst_per",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_tax_suffer",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_tax_suffer",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_amount",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_amount",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "c_mf_code",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_mf_code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "n_2nd_sale",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_2nd_sale",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_sp_sale_flag",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_sp_sale_flag",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_cancel_flag",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_cancel_flag",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "d_ldate",
											"type": "DateTime",
											"physicalType": "INT96"
										},
										"sink": {
											"name": "d_ldate",
											"type": "DateTime",
											"physicalType": "datetime2"
										}
									},
									{
										"source": {
											"name": "n_vaton",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_vaton",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_tax_on_sch_qty",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_tax_on_sch_qty",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_vatts_mrp",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_vatts_mrp",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_mrp",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_mrp",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "c_remark",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_remark",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "n_tax_amt",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_tax_amt",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_free_tax_amt",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_free_tax_amt",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "c_print_batch",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_print_batch",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "d_print_exp_dt",
											"type": "DateTime",
											"physicalType": "INT96"
										},
										"sink": {
											"name": "d_print_exp_dt",
											"type": "DateTime",
											"physicalType": "datetime2"
										}
									},
									{
										"source": {
											"name": "n_eff_pur_rate",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_eff_pur_rate",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_shift",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_shift",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "c_remark2",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_remark2",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "n_points",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_points",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "t_ltime",
											"type": "DateTime",
											"physicalType": "INT96"
										},
										"sink": {
											"name": "t_ltime",
											"type": "DateTime",
											"physicalType": "datetime2"
										}
									},
									{
										"source": {
											"name": "n_req_qty",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_req_qty",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_allow_points",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_allow_points",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_qty1",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_qty1",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_card_reverse_dis",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_card_reverse_dis",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "c_dc_br_code",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_dc_br_code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "c_dc_year",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_dc_year",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "c_dc_prefix",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_dc_prefix",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "n_dc_srno",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_dc_srno",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_dc_seq",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_dc_seq",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_remind_days",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_remind_days",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_claim",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_claim",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "c_order_br_code",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_order_br_code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "c_order_year",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_order_year",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "c_order_prefix",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_order_prefix",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "n_order_no",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_order_no",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_order_seq",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_order_seq",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_claim_per",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_claim_per",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "d_print_mfg_dt",
											"type": "DateTime",
											"physicalType": "INT96"
										},
										"sink": {
											"name": "d_print_mfg_dt",
											"type": "DateTime",
											"physicalType": "datetime2"
										}
									},
									{
										"source": {
											"name": "c_ord_br_code",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_ord_br_code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "c_ord_year",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_ord_year",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "c_ord_prefix",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_ord_prefix",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "n_ord_srno",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_ord_srno",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_ord_seq",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_ord_seq",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "c_cont_code",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_cont_code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "n_verified_qty",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_verified_qty",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_claim_qty",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_claim_qty",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_claim_val",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_claim_val",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "c_coupon_code",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_coupon_code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "c_coupon_srno",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_coupon_srno",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "n_store_track",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_store_track",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "c_claim_reason",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_claim_reason",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "c_barcode",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_barcode",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "c_sman_code",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_sman_code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "c_godown_code",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_godown_code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "n_stk_serial",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_stk_serial",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "c_bom_code",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_bom_code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "n_bom_seq",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_bom_seq",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_item_tax_suffer",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_item_tax_suffer",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_item_vatts_flag",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_item_vatts_flag",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_item_vatts_mrp",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_item_vatts_mrp",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_item_tax_on_sch_qty",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_item_tax_on_sch_qty",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "c_tray_Code",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_tray_Code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "n_marketplace_flag",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_marketplace_flag",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "c_quot_no",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_quot_no",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "n_ts_value",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_ts_value",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_pick_seq",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_pick_seq",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_share_disc",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_share_disc",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_ord_rate",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_ord_rate",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_ord_rate_diff",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_ord_rate_diff",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "c_integration_code",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_integration_code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "n_update_stock",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_update_stock",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_adjust",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_adjust",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_currency",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_currency",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_exchange_rate",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_exchange_rate",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_gst_enabled",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_gst_enabled",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_from_gst_type",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_from_gst_type",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "c_hsn_sac_code",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_hsn_sac_code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "n_cgst_per",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_cgst_per",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_cgst_amt",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_cgst_amt",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_sgst_per",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_sgst_per",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_sgst_amt",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_sgst_amt",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_igst_per",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_igst_per",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_igst_amt",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_igst_amt",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_cess_per",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_cess_per",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_cess_amt",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_cess_amt",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_pk",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_pk",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_to_gst_type",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_to_gst_type",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "c_gst_code",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_gst_code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "n_taxable_amt",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_taxable_amt",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_inv_qty",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_inv_qty",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_ref_seq",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_ref_seq",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_ord_pk",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_ord_pk",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_dc_pk",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_dc_pk",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_purord_pk",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_purord_pk",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_std_disc_per",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_std_disc_per",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_total_discount",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_total_discount",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_hold_flag",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_hold_flag",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_print_seq",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_print_seq",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_eb_seq",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_eb_seq",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "c_eb_tray_Code",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_eb_tray_Code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "c_eb_doc_no",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_eb_doc_no",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "c_supp_code",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_supp_code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "n_eb_load",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_eb_load",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_add_cess_per",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_add_cess_per",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_add_cess_rev_excl",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_add_cess_rev_excl",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_cogs_amt",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_cogs_amt",
											"type": "Double",
											"physicalType": "float"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "EG_Inv_Det_OutPutFile",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "InvDetOutputTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Delete EG Inv_Det",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "EG_Inv_Det_OutPutFile",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Invoice"
				},
				"annotations": [],
				"lastPublishTime": "2022-02-23T11:49:43Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Ds_Ecogreenv2')]",
				"[concat(variables('factoryId'), '/datasets/EG_Inv_Det_OutPutFile')]",
				"[concat(variables('factoryId'), '/datasets/InvDetOutputTable')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/FullLoad EG Inv_Mst')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data EG Inv_Mst",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Delete EG Inv_Mst",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SybaseSource",
								"query": "Select * from dba.inv_mst where convert(date,d_date) between '2022-02-14' and '2022-02-15'"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "Ds_Ecogreenv2",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "EG_Inv_Mst_OutPutFile",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Copy data EG inv_mst File to table",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Copy data EG Inv_Mst",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "SqlServerSink",
								"preCopyScript": "Truncate table Inv_Mst_Staging",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "EG_Inv_Mst_OutPutFile",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "InvMstOutputTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Delete EG Inv_Mst",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "EG_Inv_Mst_OutPutFile",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Invoice"
				},
				"annotations": [],
				"lastPublishTime": "2022-02-23T11:49:43Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Ds_Ecogreenv2')]",
				"[concat(variables('factoryId'), '/datasets/EG_Inv_Mst_OutPutFile')]",
				"[concat(variables('factoryId'), '/datasets/InvMstOutputTable')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Grn Gdn')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Metadata",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "InventoryFolder",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "ForEach",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Metadata",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadata').output.childItems",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Copy data Grn Mst",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ParquetSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"modifiedDatetimeStart": "2021-06-02T00:00:00Z",
												"modifiedDatetimeEnd": "2021-06-11T00:00:00Z",
												"enablePartitionDiscovery": false
											}
										},
										"sink": {
											"type": "SqlServerSink",
											"tableOption": "autoCreate"
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "GrnMstInputFile",
											"type": "DatasetReference",
											"parameters": {
												"FolderName": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "GrnMstOutputTable",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								},
								{
									"name": "Copy data Gdn Mst",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Copy data Grn Mst",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ParquetSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"modifiedDatetimeStart": "2021-06-02T00:00:00Z",
												"modifiedDatetimeEnd": "2021-06-11T00:00:00Z",
												"enablePartitionDiscovery": false
											}
										},
										"sink": {
											"type": "SqlServerSink",
											"tableOption": "autoCreate"
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "GdnMstInputFile",
											"type": "DatasetReference",
											"parameters": {
												"FolderName": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "GdnMstOutputTable",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								},
								{
									"name": "Copy data Gdn Det",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Copy data Gdn Mst",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ParquetSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"modifiedDatetimeStart": "2021-06-02T00:00:00Z",
												"modifiedDatetimeEnd": "2021-06-11T00:00:00Z",
												"enablePartitionDiscovery": false
											}
										},
										"sink": {
											"type": "SqlServerSink"
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "c_br_code",
														"type": "String",
														"physicalType": "UTF8"
													},
													"sink": {
														"name": "c_br_code",
														"type": "Int32",
														"physicalType": "int"
													}
												},
												{
													"source": {
														"name": "c_item_code",
														"type": "String",
														"physicalType": "UTF8"
													},
													"sink": {
														"name": "gdn_item_code",
														"type": "Int64",
														"physicalType": "bigint"
													}
												},
												{
													"source": {
														"name": "d_ldate",
														"type": "DateTime",
														"physicalType": "INT96"
													},
													"sink": {
														"name": "d_idate",
														"type": "DateTime",
														"physicalType": "datetime"
													}
												},
												{
													"source": {
														"name": "c_year",
														"type": "String",
														"physicalType": "UTF8"
													},
													"sink": {
														"name": "c_year",
														"type": "Int32",
														"physicalType": "int"
													}
												},
												{
													"source": {
														"name": "c_prefix",
														"type": "String",
														"physicalType": "UTF8"
													},
													"sink": {
														"name": "c_prefix",
														"type": "String",
														"physicalType": "nvarchar"
													}
												},
												{
													"source": {
														"name": "n_srno",
														"type": "Decimal",
														"physicalType": "DECIMAL"
													},
													"sink": {
														"name": "n_srno",
														"type": "Int64",
														"physicalType": "bigint"
													}
												},
												{
													"source": {
														"name": "n_seq",
														"type": "Decimal",
														"physicalType": "DECIMAL"
													},
													"sink": {
														"name": "n_seq",
														"type": "Int32",
														"physicalType": "int"
													}
												},
												{
													"source": {
														"name": "d_date",
														"type": "DateTime",
														"physicalType": "INT96"
													},
													"sink": {
														"name": "d_date",
														"type": "DateTime",
														"physicalType": "datetime"
													}
												},
												{
													"source": {
														"name": "n_qty",
														"type": "Decimal",
														"physicalType": "DECIMAL"
													},
													"sink": {
														"name": "gdn_qty",
														"type": "Double",
														"physicalType": "float"
													}
												},
												{
													"source": {
														"name": "n_pur_rate",
														"type": "Decimal",
														"physicalType": "DECIMAL"
													},
													"sink": {
														"name": "n_pur_rate",
														"type": "Double",
														"physicalType": "float"
													}
												},
												{
													"source": {
														"name": "n_amount",
														"type": "Decimal",
														"physicalType": "DECIMAL"
													},
													"sink": {
														"name": "gdn_amount",
														"type": "Double",
														"physicalType": "float"
													}
												},
												{
													"source": {
														"name": "n_sale_rate",
														"type": "Decimal",
														"physicalType": "DECIMAL"
													},
													"sink": {
														"name": "n_sale_rate",
														"type": "Double",
														"physicalType": "float"
													}
												},
												{
													"source": {
														"name": "n_taxable_amt",
														"type": "Decimal",
														"physicalType": "DECIMAL"
													},
													"sink": {
														"name": "n_taxable_amt",
														"type": "Double",
														"physicalType": "float"
													}
												},
												{
													"source": {
														"name": "n_cogs_amt",
														"type": "Decimal",
														"physicalType": "DECIMAL"
													},
													"sink": {
														"name": "n_cogs_amt",
														"type": "Double",
														"physicalType": "float"
													}
												}
											],
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "GdnDetInputFile",
											"type": "DatasetReference",
											"parameters": {
												"FolderName": "@item().name"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "GdnDetOutputTable",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								},
								{
									"name": "Copy data Grn Det",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Copy data Gdn Det",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ParquetSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"sink": {
											"type": "SqlServerSink"
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "c_br_code",
														"type": "String",
														"physicalType": "UTF8"
													},
													"sink": {
														"name": "c_br_code",
														"type": "Int32",
														"physicalType": "int"
													}
												},
												{
													"source": {
														"name": "c_item_code",
														"type": "String",
														"physicalType": "UTF8"
													},
													"sink": {
														"name": "grn_item_code",
														"type": "Int64",
														"physicalType": "bigint"
													}
												},
												{
													"source": {
														"name": "c_year",
														"type": "String",
														"physicalType": "UTF8"
													},
													"sink": {
														"name": "c_year",
														"type": "Int32",
														"physicalType": "int"
													}
												},
												{
													"source": {
														"name": "c_prefix",
														"type": "String",
														"physicalType": "UTF8"
													},
													"sink": {
														"name": "c_prefix",
														"type": "String",
														"physicalType": "nvarchar"
													}
												},
												{
													"source": {
														"name": "n_srno",
														"type": "Decimal",
														"physicalType": "DECIMAL"
													},
													"sink": {
														"name": "n_srno",
														"type": "Int64",
														"physicalType": "bigint"
													}
												},
												{
													"source": {
														"name": "d_date",
														"type": "DateTime",
														"physicalType": "INT96"
													},
													"sink": {
														"name": "d_date",
														"type": "DateTime",
														"physicalType": "datetime"
													}
												},
												{
													"source": {
														"name": "n_qty",
														"type": "Decimal",
														"physicalType": "DECIMAL"
													},
													"sink": {
														"name": "grn_qty",
														"type": "Double",
														"physicalType": "float"
													}
												},
												{
													"source": {
														"name": "n_amount",
														"type": "Decimal",
														"physicalType": "DECIMAL"
													},
													"sink": {
														"name": "grn_amount",
														"type": "Double",
														"physicalType": "float"
													}
												}
											],
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "GrnDetInputFile",
											"type": "DatasetReference",
											"parameters": {
												"FolderName": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "GrnDetOutputTable",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2021-08-17T07:34:15Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/InventoryFolder')]",
				"[concat(variables('factoryId'), '/datasets/GrnMstInputFile')]",
				"[concat(variables('factoryId'), '/datasets/GrnMstOutputTable')]",
				"[concat(variables('factoryId'), '/datasets/GdnMstInputFile')]",
				"[concat(variables('factoryId'), '/datasets/GdnMstOutputTable')]",
				"[concat(variables('factoryId'), '/datasets/GdnDetInputFile')]",
				"[concat(variables('factoryId'), '/datasets/GdnDetOutputTable')]",
				"[concat(variables('factoryId'), '/datasets/GrnDetInputFile')]",
				"[concat(variables('factoryId'), '/datasets/GrnDetOutputTable')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/HelthTech_GC793_Debit_HelthTech_751_Credit')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Delete File HelthTech Sale GC793",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "RL_HelthTech_Sale_GC793_Debit",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "Copy data HelthTech Sale GC793 Debit",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Delete File HelthTech Sale GC793",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SybaseSource",
								"query": "SELECT c_br_code,c_year,c_prefix,n_srno,d_date,c_cust_code,c_order_id,n_total FROM dba.inv_mst where c_br_code = '751' and c_cust_code = 'GC793' and convert(date,d_date) > '2021-10-01'"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "Ds_Ecogreenv2",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "RL_HelthTech_Sale_GC793_Debit",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Copy data HelthTech Sale GC793 File to Table",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Copy data HelthTech Sale GC793 Debit",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "SqlServerSink",
								"tableOption": "autoCreate"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "RL_HelthTech_Sale_GC793_Debit",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "SQL_HelthTech_Sale_GC793_Debit",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Copy data HelthTech 751 File to Table",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "SqlServerSink",
								"tableOption": "autoCreate"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "RL_HelthTech_Purchase_751_Credit",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "SQL_HelthTech_Purchase_751_Credit",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Stored procedure get Final Data",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy data HelthTech Sale GC793 File to Table",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Copy data HelthTech 751 File to Table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[usp_HelthTech_GC793_Debit_HelthTech_751_Credit]"
						},
						"linkedServiceName": {
							"referenceName": "Data360MSSQL",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Copy data HelthTech Sale GC793 Debit Failure Mail",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Copy data HelthTech Sale GC793 Debit",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://prod-03.centralindia.logic.azure.com:443/workflows/464eb5db81654a119fbde64f7815052d/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=mF2jqmQWzHvsdtjGxGf4ajGCuU9BPmu1x3S0gtBtHF8",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "{\n\"Process\":\"Copy data HelthTech Sale GC793 Debit Failure Mail\",\n\"Pipeline\":\"@{pipeline().Pipeline}\",\n\"DataFactoryName\":\"@{pipeline().DataFactory}\",\n\"ErrorMessage\":\"@{activity('Copy data HelthTech Sale GC793 Debit').Error.Message}\",\n\"Runid\":\"@{pipeline().RunId}\"\n}",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Sale GC793 File to Table Failure Mail",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Copy data HelthTech Sale GC793 File to Table",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://prod-03.centralindia.logic.azure.com:443/workflows/464eb5db81654a119fbde64f7815052d/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=mF2jqmQWzHvsdtjGxGf4ajGCuU9BPmu1x3S0gtBtHF8",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "{\n\"Process\":\"Sale GC793 File to Table Failure Mail\",\n\"Pipeline\":\"@{pipeline().Pipeline}\",\n\"DataFactoryName\":\"@{pipeline().DataFactory}\",\n\"ErrorMessage\":\"@{activity('Copy data HelthTech Sale GC793 File to Table').Error.Message}\",\n\"Runid\":\"@{pipeline().RunId}\"\n}",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Copy data HelthTech 751 File to Table Failure Mail",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Copy data HelthTech 751 File to Table",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://prod-03.centralindia.logic.azure.com:443/workflows/464eb5db81654a119fbde64f7815052d/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=mF2jqmQWzHvsdtjGxGf4ajGCuU9BPmu1x3S0gtBtHF8",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "{\n\"Process\":\"Copy data HelthTech 751 File to Table Failure Mail\",\n\"Pipeline\":\"@{pipeline().Pipeline}\",\n\"DataFactoryName\":\"@{pipeline().DataFactory}\",\n\"ErrorMessage\":\"@{activity('Copy data HelthTech 751 File to Table').Error.Message}\",\n\"Runid\":\"@{pipeline().RunId}\"\n}",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Stored procedure get Final Data Failure Mail",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Stored procedure get Final Data",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://prod-03.centralindia.logic.azure.com:443/workflows/464eb5db81654a119fbde64f7815052d/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=mF2jqmQWzHvsdtjGxGf4ajGCuU9BPmu1x3S0gtBtHF8",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "{\n\"Process\":\"Stored procedure get Final Data Failure Mail\",\n\"Pipeline\":\"@{pipeline().Pipeline}\",\n\"DataFactoryName\":\"@{pipeline().DataFactory}\",\n\"ErrorMessage\":\"@{activity('Stored procedure get Final Data').Error.Message}\",\n\"Runid\":\"@{pipeline().RunId}\"\n}",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Reconciliation Ledgers/Final Ledgers"
				},
				"annotations": [],
				"lastPublishTime": "2022-01-11T09:47:07Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/RL_HelthTech_Sale_GC793_Debit')]",
				"[concat(variables('factoryId'), '/datasets/Ds_Ecogreenv2')]",
				"[concat(variables('factoryId'), '/datasets/SQL_HelthTech_Sale_GC793_Debit')]",
				"[concat(variables('factoryId'), '/datasets/RL_HelthTech_Purchase_751_Credit')]",
				"[concat(variables('factoryId'), '/datasets/SQL_HelthTech_Purchase_751_Credit')]",
				"[concat(variables('factoryId'), '/linkedServices/Data360MSSQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/HelthTech_Sale_Debit_HelthTech_JO_JV_751_701_Credit')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data HelthTech Sale 751  and 701 to File",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Delete File HelthTech Sale 751and701",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SybaseSource",
								"query": "SELECT c_br_code,c_year,c_prefix,n_srno,d_date,c_cust_code,c_order_id,n_total FROM dba.inv_mst where c_br_code in ('751' ,'701') and c_cust_code = 'GC793' and convert(date,d_date) > '2021-10-01'"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "Ds_Ecogreenv2",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "RL_HelthTech_Sale_751_701_Debit",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Copy dataHelthTech Sale 751 and 701 Debit File to Table",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Copy data HelthTech Sale 751  and 701 to File",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "SqlServerSink",
								"preCopyScript": "truncate table HelthTech_Sale_751_701_Debit_Staging",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "RL_HelthTech_Sale_751_701_Debit",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "SQL_HelthTech_Sale_751_701_Debit",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Delete File HelthTech Sale 751and701",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "RL_HelthTech_Sale_751_701_Debit",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "Copy data HelthTech JO-JV 751 and 701 Credit",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Delete HelthTech JO-JV 751and701 File",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SybaseSource",
								"query": "Select ( cogs.c_br_code ) as c_br_code,\n\t\t( cogs.c_year ) as c_year,   \n\t\t( cogs.c_prefix ) as c_prefix,   \n\t\t( cogs.n_tran_no ) as n_tran_no,   \n\t\t( cogs.c_act_code ) as c_act_code,   \n\t\t( cogs.d_date ) as d_date,   \n\t\tSUM( cogs.n_amount ) as n_amount,   \n\t\t( cogs.c_opp_act_code ) as c_opp_act_code,   \n\t\t( cogs.c_ref_br_code ) as c_ref_br_code,\n\t\t( cogs.c_ref_no ) as c_ref_no,   \n\t\t( cogs.d_chq_date) as d_chq_date,   \n\t\t( cogs.c_remark ) as c_remark,   \n\t\t( cogs.c_act_name ) as c_act_name,   \n\t\t( cogs.c_opp_act_name ) as c_opp_act_name,\n\t\t( cogs.c_add_1 ) as c_add_1,\n\t\t( cogs.c_add_2 ) as c_add_2, \n\t\t( cogs.c_add_3 ) as c_add_3,\n\t\t( cogs.c_city ) as c_city,\n\t\t( cogs.n_ref_srno ) as n_ref_srno,\n\t\t( cogs.n_order_no ) as n_order_no,\n\t\t( cogs.recon_dt) as recon_dt,\n\t\t( if recon_dt is null then 0 else 1 endif ) as chq_pass,\n\t\t( cogs.multi_act_name) as multi_act_name,\n\t\tisnull( case when n_amount  > 0 then n_amount else 0 end,0) as Debit,\n\t\tisnull( case when n_amount  < 0 then n_amount else 0 end,0) as credit\nFrom\n(\n\tSELECT ( ledger.c_br_code ) as c_br_code,\n\t\t\t( ledger.c_year ) as c_year,   \n\t\t\t( ledger.c_prefix ) as c_prefix,   \n\t\t\t( ledger.n_tran_no ) as n_tran_no,   \n\t\t\t( ledger.c_act_code ) as c_act_code,   \n\t\t\t( ledger.d_date ) as d_date,   \n\t\t\t( ledger.n_amount ) as n_amount,   \n\t\t\t( ledger.c_opp_act_code ) as c_opp_act_code,   \n\t\t\t( ledger.c_ref_br_code ) as c_ref_br_code,\n\t\t\t( settle_mst_header.c_ref_no ) as c_ref_no,   \n\t\t\tdate(settle_mst_header.d_ref_date) as d_chq_date,   \n\t\t\t( settle_mst_header.c_remark ) as c_remark,   \n\t\t\t( act_mst_a.c_name ) as c_act_name,   \n\t\t\t( act_mst_b.c_name ) as c_opp_act_name,\n\t\t\t( act_mst_a.c_add_1 ) as c_add_1,\n\t\t\t( act_mst_a.c_add_2 ) as c_add_2, \n\t\t\t( act_mst_a.c_add_3 ) as c_add_3,\n\t\t\t( act_mst_a.c_city ) as c_city,\n\t\t\t( grn_mst.n_ref_srno ) as n_ref_srno,\n\t\t\t( gdn_mst.n_order_no ) as n_order_no,\n\t\t\t(d_reconcile_date) as recon_dt,\n\t\t\t(if recon_dt is null then 0 else 1 endif) as chq_pass,\n\t\t\tif ledger.c_opp_act_code='~~~~~~~~~~~~' then \n\t\t\t\t(select list(ac.c_name+' : '+string(n_amount),char(13)) from dba.ledger ll , dba.act_mst ac  where ac.c_code=ll.c_act_code and\n\t\t\t\t\t\tll.c_br_code=ledger.c_br_code and ll.c_year=ledger.c_year\n\t\t\t\t\t\tand ll.c_prefix=ledger.c_prefix and ll.n_tran_no=ledger.n_tran_no and \n\t\t\t\t\t\t(ledger.n_amount<0 and ll.n_amount>0 or ledger.n_amount>0 and ll.n_amount<0))\n\t\t\telse '' endif as multi_act_name\n    FROM dba.ledger\n\t\t\t\tinner join (select c_br_code as brcode from dba.branch_group_det where length('701') = 6 and c_code = '701' and  branch_group_det.n_cancel_flag = 0 \n            union \n            select c_code from dba.act_mst where length('701')<> 6 and c_code >= (if '701' = 'zzz' then '701' else '701' endif ) and ( c_code <= '701' ) \n            ) brlist on brlist.brcode=ledger.c_ref_br_code  \n\t\t\tleft outer join dba.settle_mst_header  on  ledger.c_br_code = settle_mst_header.c_br_code  and \n\t\t\t ledger.c_year = settle_mst_header.c_year  and \n          ledger.c_prefix = settle_mst_header.c_prefix  and \n          ledger.n_tran_no = settle_mst_header.n_srno  \n          left outer join dba.grn_mst on  ledger.c_br_code = grn_mst.c_br_code  and \n\t\t\t\tledger.c_year = grn_mst.c_year  and \n\t\t\t\tledger.c_prefix = grn_mst.c_prefix  and \n\t\t\t\tledger.n_tran_no = grn_mst.n_srno\n\t\t\tleft outer join dba.gdn_mst  on  ledger.c_br_code = gdn_mst.c_br_code  and \n\t\t\t\tledger.c_year = gdn_mst.c_year  and \n\t\t\t\tledger.c_prefix = gdn_mst.c_prefix  and \n\t\t\t\tledger.n_tran_no = gdn_mst.n_srno\n\t\t\t\tleft outer join dba.reconcile_mst  on  ledger.c_br_code= reconcile_mst.c_br_code and ledger.c_year = reconcile_mst.c_year and\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  ledger.c_prefix = reconcile_mst.c_prefix and  ledger.n_tran_no = reconcile_mst.n_srno, \n          dba.act_mst act_mst_a,   \n         dba.act_mst act_mst_b  \n   WHERE \n         ( act_mst_a.c_code = ledger.c_act_code ) and \n         ( act_mst_b.c_code = ledger.c_opp_act_code ) and\t\n         ( ( ledger.d_date >= '2021-10-01' ) and\t\n         ( ledger.d_date <= getDate() ) and \n         ( ledger.c_act_code >= 'GC793' ) and \n         ( ledger.c_act_code <= 'GC793' )   and\n\t\t\t( ledger.n_amount <> 0) )\n\tUnion All\n\t SELECT ( ledger.c_br_code ) as c_br_code,\n\t\t\t( ledger.c_year ) as c_year,   \n\t\t\t( ledger.c_prefix ) as c_prefix,   \n\t\t\t( ledger.n_tran_no ) as n_tran_no,   \n\t\t\t( ledger.c_act_code ) as c_act_code,   \n\t\t\t( ledger.d_date ) as d_date,   \n\t\t\t( ledger.n_amount ) as n_amount,   \n\t\t\t( ledger.c_opp_act_code ) as c_opp_act_code,   \n\t\t\t( ledger.c_ref_br_code ) as c_ref_br_code,\n\t\t\t( settle_mst_header.c_ref_no ) as c_ref_no,   \n\t\t\tdate(settle_mst_header.d_ref_date) as d_chq_date,   \n\t\t\t( settle_mst_header.c_remark ) as c_remark,   \n\t\t\t( act_mst_a.c_name ) as c_act_name,   \n\t\t\t( act_mst_b.c_name ) as c_opp_act_name,\n\t\t\t( act_mst_a.c_add_1 ) as c_add_1,\n\t\t\t( act_mst_a.c_add_2 ) as c_add_2, \n\t\t\t( act_mst_a.c_add_3 ) as c_add_3,\n\t\t\t( act_mst_a.c_city ) as c_city,\n\t\t\t( grn_mst.n_ref_srno ) as n_ref_srno,\n\t\t\t( gdn_mst.n_order_no ) as n_order_no,\n\t\t\t(d_reconcile_date) as recon_dt,\n\t\t\t(if recon_dt is null then 0 else 1 endif) as chq_pass,\n\t\t\tif ledger.c_opp_act_code='~~~~~~~~~~~~' then \n\t\t\t\t(select list(ac.c_name+' : '+string(n_amount),char(13)) from dba.ledger ll , dba.act_mst ac  where ac.c_code=ll.c_act_code and\n\t\t\t\t\t\tll.c_br_code=ledger.c_br_code and ll.c_year=ledger.c_year\n\t\t\t\t\t\tand ll.c_prefix=ledger.c_prefix and ll.n_tran_no=ledger.n_tran_no and \n\t\t\t\t\t\t(ledger.n_amount<0 and ll.n_amount>0 or ledger.n_amount>0 and ll.n_amount<0))\n\t\t\telse '' endif as multi_act_name\n    FROM dba.cogs_ledger as ledger\n\t\t\t\tinner join (select c_br_code as brcode from dba.branch_group_det where length('701') = 6 and c_code = '701' and  branch_group_det.n_cancel_flag = 0 \n            union \n            select c_code from dba.act_mst where length('701')<> 6 and c_code >= (if '701' = 'zzz' then '701' else '701' endif ) and ( c_code <= '701' ) \n            ) brlist on brlist.brcode=ledger.c_ref_br_code  \n\t\t\tleft outer join dba.settle_mst_header  on  ledger.c_br_code = settle_mst_header.c_br_code  and \n\t\t\t ledger.c_year = settle_mst_header.c_year  and \n          ledger.c_prefix = settle_mst_header.c_prefix  and \n          ledger.n_tran_no = settle_mst_header.n_srno  \n          left outer join dba.grn_mst on  ledger.c_br_code = grn_mst.c_br_code  and \n\t\t\t\tledger.c_year = grn_mst.c_year  and \n\t\t\t\tledger.c_prefix = grn_mst.c_prefix  and \n\t\t\t\tledger.n_tran_no = grn_mst.n_srno\n\t\t\tleft outer join dba.gdn_mst  on  ledger.c_br_code = gdn_mst.c_br_code  and \n\t\t\t\tledger.c_year = gdn_mst.c_year  and \n\t\t\t\tledger.c_prefix = gdn_mst.c_prefix  and \n\t\t\t\tledger.n_tran_no = gdn_mst.n_srno\n\t\t\t\tleft outer join dba.reconcile_mst  on  ledger.c_br_code= reconcile_mst.c_br_code and ledger.c_year = reconcile_mst.c_year and\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  ledger.c_prefix = reconcile_mst.c_prefix and  ledger.n_tran_no = reconcile_mst.n_srno, \n          dba.act_mst act_mst_a,   \n         dba.act_mst act_mst_b  \n   WHERE \n         ( act_mst_a.c_code = ledger.c_act_code ) and \n         ( act_mst_b.c_code = ledger.c_opp_act_code ) and\t\n         ( ( ledger.d_date >= '2021-10-01' ) and\t\n         ( ledger.d_date <= getDate() ) and \n         ( ledger.c_act_code >= 'GC793' ) and \n         ( ledger.c_act_code <= 'GC793' )   and\n\t\t\t( ledger.n_amount <> 0) ) --and :li_cogs =1\n) as cogs \nGroup By c_br_code,c_year,c_prefix,n_tran_no,c_act_code,d_date,c_opp_act_code,c_ref_br_code,c_ref_no,   \n\t\td_chq_date,c_remark,c_act_name,c_opp_act_name,c_add_1,c_add_2,c_add_3,c_city,n_ref_srno,\n\t\tn_order_no,recon_dt,multi_act_name\nUNION   ALL\n  SELECT ('') as c_br_code,\n\t\t\t('00') as c_year,   \n         ('OP') as c_prefix,   \n         ( 0 ) as c_tran_no,   \n         ( ledger.c_act_code ) as c_act_code,   \n         ( date('2021-10-21')) as d_date,   \n         sum(ledger.n_amount) as n_amount,   \n         ( '' ) as c_opp_act_code,   \n         ( '' ) as c_ref_br_code,   \n         ( '' ) as c_ref_no,   \n         date('2021-10-21') as d_chq_date,   \n         ( '' ) as c_remark,   \n         ( act_mst.c_name ) as c_act_name,   \n         ( 'Opening Balance' ) as c_opp_act_name,\n\t\t\t( act_mst.c_add_1 )  as c_add_1,\n\t\t\t( act_mst.c_add_2 )  as c_add_2, \n\t\t\t( act_mst.c_add_3 )  as c_add_3,\n\t\t\t( act_mst.c_city ) as c_city,\n\t\t\t(0) as n_ref_srno,\n\t\t\t(0) as n_order_no,\n\t\t\t( null )  as recon_dt,\n\t\t\t( 0 )  \tas chq_pass,\n\t\t\t( '' ) as multi_act_name\t,\n\t\tisnull( case when n_amount  > 0 then n_amount else 0 end,0) as Debit,\n\t\tisnull( case when n_amount  < 0 then n_amount else 0 end,0) as credit\n    FROM dba.ledger\n\t\t\t\tinner join (select c_br_code as brcode from dba.branch_group_det where length('701') = 6 and c_code = '701' and  branch_group_det.n_cancel_flag = 0 \n            union \n            select c_code from dba.act_mst where length('701')<> 6 and c_code >= (if '701' = 'zzz' then '701' else '701' endif ) and ( c_code <= '701' ) \n            ) brlist on brlist.brcode=ledger.c_ref_br_code,  \n         dba.act_mst  \n   WHERE ( act_mst.c_code = ledger.c_act_code ) and  \n         ( ( ledger.d_date <= getDate() ) and\t\n         ( ledger.c_act_code >= 'GC793' ) and\t\n         ( ledger.c_act_code <= 'GC793' ) )   \nGROUP BY c_act_code,c_act_name,c_add_1,c_add_2,c_add_3,c_city\n\n\nUNION\n\n\nSelect ( cogs.c_br_code ) as c_br_code,\n\t\t( cogs.c_year ) as c_year,   \n\t\t( cogs.c_prefix ) as c_prefix,   \n\t\t( cogs.n_tran_no ) as n_tran_no,   \n\t\t( cogs.c_act_code ) as c_act_code,   \n\t\t( cogs.d_date ) as d_date,   \n\t\tSUM( cogs.n_amount ) as n_amount,   \n\t\t( cogs.c_opp_act_code ) as c_opp_act_code,   \n\t\t( cogs.c_ref_br_code ) as c_ref_br_code,\n\t\t( cogs.c_ref_no ) as c_ref_no,   \n\t\t( cogs.d_chq_date) as d_chq_date,   \n\t\t( cogs.c_remark ) as c_remark,   \n\t\t( cogs.c_act_name ) as c_act_name,   \n\t\t( cogs.c_opp_act_name ) as c_opp_act_name,\n\t\t( cogs.c_add_1 ) as c_add_1,\n\t\t( cogs.c_add_2 ) as c_add_2, \n\t\t( cogs.c_add_3 ) as c_add_3,\n\t\t( cogs.c_city ) as c_city,\n\t\t( cogs.n_ref_srno ) as n_ref_srno,\n\t\t( cogs.n_order_no ) as n_order_no,\n\t\t( cogs.recon_dt) as recon_dt,\n\t\t( if recon_dt is null then 0 else 1 endif ) as chq_pass,\n\t\t( cogs.multi_act_name) as multi_act_name,\n\t\tisnull( case when n_amount  > 0 then n_amount else 0 end,0) as Debit,\n\t\tisnull( case when n_amount  < 0 then n_amount else 0 end,0) as credit\nFrom\n(\n\tSELECT ( ledger.c_br_code ) as c_br_code,\n\t\t\t( ledger.c_year ) as c_year,   \n\t\t\t( ledger.c_prefix ) as c_prefix,   \n\t\t\t( ledger.n_tran_no ) as n_tran_no,   \n\t\t\t( ledger.c_act_code ) as c_act_code,   \n\t\t\t( ledger.d_date ) as d_date,   \n\t\t\t( ledger.n_amount ) as n_amount,   \n\t\t\t( ledger.c_opp_act_code ) as c_opp_act_code,   \n\t\t\t( ledger.c_ref_br_code ) as c_ref_br_code,\n\t\t\t( settle_mst_header.c_ref_no ) as c_ref_no,   \n\t\t\tdate(settle_mst_header.d_ref_date) as d_chq_date,   \n\t\t\t( settle_mst_header.c_remark ) as c_remark,   \n\t\t\t( act_mst_a.c_name ) as c_act_name,   \n\t\t\t( act_mst_b.c_name ) as c_opp_act_name,\n\t\t\t( act_mst_a.c_add_1 ) as c_add_1,\n\t\t\t( act_mst_a.c_add_2 ) as c_add_2, \n\t\t\t( act_mst_a.c_add_3 ) as c_add_3,\n\t\t\t( act_mst_a.c_city ) as c_city,\n\t\t\t( grn_mst.n_ref_srno ) as n_ref_srno,\n\t\t\t( gdn_mst.n_order_no ) as n_order_no,\n\t\t\t(d_reconcile_date) as recon_dt,\n\t\t\t(if recon_dt is null then 0 else 1 endif) as chq_pass,\n\t\t\tif ledger.c_opp_act_code='~~~~~~~~~~~~' then \n\t\t\t\t(select list(ac.c_name+' : '+string(n_amount),char(13)) from dba.ledger ll , dba.act_mst ac  where ac.c_code=ll.c_act_code and\n\t\t\t\t\t\tll.c_br_code=ledger.c_br_code and ll.c_year=ledger.c_year\n\t\t\t\t\t\tand ll.c_prefix=ledger.c_prefix and ll.n_tran_no=ledger.n_tran_no and \n\t\t\t\t\t\t(ledger.n_amount<0 and ll.n_amount>0 or ledger.n_amount>0 and ll.n_amount<0))\n\t\t\telse '' endif as multi_act_name\n    FROM dba.ledger\n\t\t\t\tinner join (select c_br_code as brcode from dba.branch_group_det where length('751') = 6 and c_code = '751' and  branch_group_det.n_cancel_flag = 0 \n            union \n            select c_code from dba.act_mst where length('751')<> 6 and c_code >= (if '751' = 'zzz' then '751' else '751' endif ) and ( c_code <= '751' ) \n            ) brlist on brlist.brcode=ledger.c_ref_br_code  \n\t\t\tleft outer join dba.settle_mst_header  on  ledger.c_br_code = settle_mst_header.c_br_code  and \n\t\t\t ledger.c_year = settle_mst_header.c_year  and \n          ledger.c_prefix = settle_mst_header.c_prefix  and \n          ledger.n_tran_no = settle_mst_header.n_srno  \n          left outer join dba.grn_mst on  ledger.c_br_code = grn_mst.c_br_code  and \n\t\t\t\tledger.c_year = grn_mst.c_year  and \n\t\t\t\tledger.c_prefix = grn_mst.c_prefix  and \n\t\t\t\tledger.n_tran_no = grn_mst.n_srno\n\t\t\tleft outer join dba.gdn_mst  on  ledger.c_br_code = gdn_mst.c_br_code  and \n\t\t\t\tledger.c_year = gdn_mst.c_year  and \n\t\t\t\tledger.c_prefix = gdn_mst.c_prefix  and \n\t\t\t\tledger.n_tran_no = gdn_mst.n_srno\n\t\t\t\tleft outer join dba.reconcile_mst  on  ledger.c_br_code= reconcile_mst.c_br_code and ledger.c_year = reconcile_mst.c_year and\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  ledger.c_prefix = reconcile_mst.c_prefix and  ledger.n_tran_no = reconcile_mst.n_srno, \n          dba.act_mst act_mst_a,   \n         dba.act_mst act_mst_b  \n   WHERE \n         ( act_mst_a.c_code = ledger.c_act_code ) and \n         ( act_mst_b.c_code = ledger.c_opp_act_code ) and\t\n         ( ( ledger.d_date >= '2021-10-01' ) and\t\n         ( ledger.d_date <= getDate() ) and \n         ( ledger.c_act_code >= 'GC793' ) and \n         ( ledger.c_act_code <= 'GC793' )   and\n\t\t\t( ledger.n_amount <> 0) )\n\tUnion All\n\t SELECT ( ledger.c_br_code ) as c_br_code,\n\t\t\t( ledger.c_year ) as c_year,   \n\t\t\t( ledger.c_prefix ) as c_prefix,   \n\t\t\t( ledger.n_tran_no ) as n_tran_no,   \n\t\t\t( ledger.c_act_code ) as c_act_code,   \n\t\t\t( ledger.d_date ) as d_date,   \n\t\t\t( ledger.n_amount ) as n_amount,   \n\t\t\t( ledger.c_opp_act_code ) as c_opp_act_code,   \n\t\t\t( ledger.c_ref_br_code ) as c_ref_br_code,\n\t\t\t( settle_mst_header.c_ref_no ) as c_ref_no,   \n\t\t\tdate(settle_mst_header.d_ref_date) as d_chq_date,   \n\t\t\t( settle_mst_header.c_remark ) as c_remark,   \n\t\t\t( act_mst_a.c_name ) as c_act_name,   \n\t\t\t( act_mst_b.c_name ) as c_opp_act_name,\n\t\t\t( act_mst_a.c_add_1 ) as c_add_1,\n\t\t\t( act_mst_a.c_add_2 ) as c_add_2, \n\t\t\t( act_mst_a.c_add_3 ) as c_add_3,\n\t\t\t( act_mst_a.c_city ) as c_city,\n\t\t\t( grn_mst.n_ref_srno ) as n_ref_srno,\n\t\t\t( gdn_mst.n_order_no ) as n_order_no,\n\t\t\t(d_reconcile_date) as recon_dt,\n\t\t\t(if recon_dt is null then 0 else 1 endif) as chq_pass,\n\t\t\tif ledger.c_opp_act_code='~~~~~~~~~~~~' then \n\t\t\t\t(select list(ac.c_name+' : '+string(n_amount),char(13)) from dba.ledger ll , dba.act_mst ac  where ac.c_code=ll.c_act_code and\n\t\t\t\t\t\tll.c_br_code=ledger.c_br_code and ll.c_year=ledger.c_year\n\t\t\t\t\t\tand ll.c_prefix=ledger.c_prefix and ll.n_tran_no=ledger.n_tran_no and \n\t\t\t\t\t\t(ledger.n_amount<0 and ll.n_amount>0 or ledger.n_amount>0 and ll.n_amount<0))\n\t\t\telse '' endif as multi_act_name\n    FROM dba.cogs_ledger as ledger\n\t\t\t\tinner join (select c_br_code as brcode from dba.branch_group_det where length('751') = 6 and c_code = '751' and  branch_group_det.n_cancel_flag = 0 \n            union \n            select c_code from dba.act_mst where length('751')<> 6 and c_code >= (if '751' = 'zzz' then '751' else '751' endif ) and ( c_code <= '751' ) \n            ) brlist on brlist.brcode=ledger.c_ref_br_code  \n\t\t\tleft outer join dba.settle_mst_header  on  ledger.c_br_code = settle_mst_header.c_br_code  and \n\t\t\t ledger.c_year = settle_mst_header.c_year  and \n          ledger.c_prefix = settle_mst_header.c_prefix  and \n          ledger.n_tran_no = settle_mst_header.n_srno  \n          left outer join dba.grn_mst on  ledger.c_br_code = grn_mst.c_br_code  and \n\t\t\t\tledger.c_year = grn_mst.c_year  and \n\t\t\t\tledger.c_prefix = grn_mst.c_prefix  and \n\t\t\t\tledger.n_tran_no = grn_mst.n_srno\n\t\t\tleft outer join dba.gdn_mst  on  ledger.c_br_code = gdn_mst.c_br_code  and \n\t\t\t\tledger.c_year = gdn_mst.c_year  and \n\t\t\t\tledger.c_prefix = gdn_mst.c_prefix  and \n\t\t\t\tledger.n_tran_no = gdn_mst.n_srno\n\t\t\t\tleft outer join dba.reconcile_mst  on  ledger.c_br_code= reconcile_mst.c_br_code and ledger.c_year = reconcile_mst.c_year and\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  ledger.c_prefix = reconcile_mst.c_prefix and  ledger.n_tran_no = reconcile_mst.n_srno, \n          dba.act_mst act_mst_a,   \n         dba.act_mst act_mst_b  \n   WHERE \n         ( act_mst_a.c_code = ledger.c_act_code ) and \n         ( act_mst_b.c_code = ledger.c_opp_act_code ) and\t\n         ( ( ledger.d_date >= '2021-10-01' ) and\t\n         ( ledger.d_date <= getDate() ) and \n         ( ledger.c_act_code >= 'GC793' ) and \n         ( ledger.c_act_code <= 'GC793' )   and\n\t\t\t( ledger.n_amount <> 0) ) --and :li_cogs =1\n) as cogs \nGroup By c_br_code,c_year,c_prefix,n_tran_no,c_act_code,d_date,c_opp_act_code,c_ref_br_code,c_ref_no,   \n\t\td_chq_date,c_remark,c_act_name,c_opp_act_name,c_add_1,c_add_2,c_add_3,c_city,n_ref_srno,\n\t\tn_order_no,recon_dt,multi_act_name\nUNION   ALL\n  SELECT ('') as c_br_code,\n\t\t\t('00') as c_year,   \n         ('OP') as c_prefix,   \n         ( 0 ) as c_tran_no,   \n         ( ledger.c_act_code ) as c_act_code,   \n         ( date('2021-10-21')) as d_date,   \n         sum(ledger.n_amount) as n_amount,   \n         ( '' ) as c_opp_act_code,   \n         ( '' ) as c_ref_br_code,   \n         ( '' ) as c_ref_no,   \n         date('2021-10-21') as d_chq_date,   \n         ( '' ) as c_remark,   \n         ( act_mst.c_name ) as c_act_name,   \n         ( 'Opening Balance' ) as c_opp_act_name,\n\t\t\t( act_mst.c_add_1 )  as c_add_1,\n\t\t\t( act_mst.c_add_2 )  as c_add_2, \n\t\t\t( act_mst.c_add_3 )  as c_add_3,\n\t\t\t( act_mst.c_city ) as c_city,\n\t\t\t(0) as n_ref_srno,\n\t\t\t(0) as n_order_no,\n\t\t\t( null )  as recon_dt,\n\t\t\t( 0 )  \tas chq_pass,\n\t\t\t( '' ) as multi_act_name\t,\n\t\tisnull( case when n_amount  > 0 then n_amount else 0 end,0) as Debit,\n\t\tisnull( case when n_amount  < 0 then n_amount else 0 end,0) as credit\n    FROM dba.ledger\n\t\t\t\tinner join (select c_br_code as brcode from dba.branch_group_det where length('751') = 6 and c_code = '751' and  branch_group_det.n_cancel_flag = 0 \n            union \n            select c_code from dba.act_mst where length('751')<> 6 and c_code >= (if '751' = 'zzz' then '751' else '751' endif ) and ( c_code <= '751' ) \n            ) brlist on brlist.brcode=ledger.c_ref_br_code,  \n         dba.act_mst  \n   WHERE ( act_mst.c_code = ledger.c_act_code ) and  \n         ( ( ledger.d_date <= getDate() ) and\t\n         ( ledger.c_act_code >= 'GC793' ) and\t\n         ( ledger.c_act_code <= 'GC793' ) )   \nGROUP BY c_act_code,c_act_name,c_add_1,c_add_2,c_add_3,c_city"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "Ds_Ecogreenv2",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "RL_HelthTech_JO_JV_751_701_Credit",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Copy data HelthTech JO-JV 751 and 701 File to Table",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Copy data HelthTech JO-JV 751 and 701 Credit",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "SqlServerSink",
								"preCopyScript": "truncate table HelthTech_JO_JV_751_701_Credit_Staging",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "RL_HelthTech_JO_JV_751_701_Credit",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "SQL_HelthTech_JO_JV_751_701_Credit",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Delete HelthTech JO-JV 751and701 File",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "RL_HelthTech_JO_JV_751_701_Credit",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "Stored procedure get Final Data",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy dataHelthTech Sale 751 and 701 Debit File to Table",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Copy data HelthTech JO-JV 751 and 701 File to Table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[usp_HelthTech_Sale_Debit_HelthTech_JO_JV_751_701_Credit]"
						},
						"linkedServiceName": {
							"referenceName": "Data360MSSQL",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "HelthTech Sale 751  and 701 to File Failure Mail",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Copy data HelthTech Sale 751  and 701 to File",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://prod-03.centralindia.logic.azure.com:443/workflows/464eb5db81654a119fbde64f7815052d/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=mF2jqmQWzHvsdtjGxGf4ajGCuU9BPmu1x3S0gtBtHF8",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "{\n\"Process\":\"HelthTech Sale 751  and 701 to File Failure Mail\",\n\"Pipeline\":\"@{pipeline().Pipeline}\",\n\"DataFactoryName\":\"@{pipeline().DataFactory}\",\n\"ErrorMessage\":\"@{activity('Copy data HelthTech Sale 751  and 701 to File').Error.Message}\",\n\"Runid\":\"@{pipeline().RunId}\"\n}",
								"type": "Expression"
							}
						}
					},
					{
						"name": "HelthTech Sale 751 701 Debit File to Table Failure Mail",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Copy dataHelthTech Sale 751 and 701 Debit File to Table",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://prod-03.centralindia.logic.azure.com:443/workflows/464eb5db81654a119fbde64f7815052d/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=mF2jqmQWzHvsdtjGxGf4ajGCuU9BPmu1x3S0gtBtHF8",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "{\n\"Process\":\"HelthTech Sale 751 701 Debit File to Table Failure Mail\",\n\"Pipeline\":\"@{pipeline().Pipeline}\",\n\"DataFactoryName\":\"@{pipeline().DataFactory}\",\n\"ErrorMessage\":\"@{activity('Copy dataHelthTech Sale 751 and 701 Debit File to Table').Error.Message}\",\n\"Runid\":\"@{pipeline().RunId}\"\n}",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Stored procedure get Final Data Failure Mail",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Stored procedure get Final Data",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://prod-03.centralindia.logic.azure.com:443/workflows/464eb5db81654a119fbde64f7815052d/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=mF2jqmQWzHvsdtjGxGf4ajGCuU9BPmu1x3S0gtBtHF8",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "{\n\"Process\":\"Stored procedure get Final Data Failure Mail\",\n\"Pipeline\":\"@{pipeline().Pipeline}\",\n\"DataFactoryName\":\"@{pipeline().DataFactory}\",\n\"ErrorMessage\":\"@{activity('Stored procedure get Final Data').Error.Message}\",\n\"Runid\":\"@{pipeline().RunId}\"\n}",
								"type": "Expression"
							}
						}
					},
					{
						"name": "HelthTech JO-JV 751 and 701 Credit Failure Mail",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Copy data HelthTech JO-JV 751 and 701 Credit",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://prod-03.centralindia.logic.azure.com:443/workflows/464eb5db81654a119fbde64f7815052d/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=mF2jqmQWzHvsdtjGxGf4ajGCuU9BPmu1x3S0gtBtHF8",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "{\n\"Process\":\"HelthTech JO-JV 751 and 701 Credit Failure Mail\",\n\"Pipeline\":\"@{pipeline().Pipeline}\",\n\"DataFactoryName\":\"@{pipeline().DataFactory}\",\n\"ErrorMessage\":\"@{activity('Copy data HelthTech JO-JV 751 and 701 Credit').Error.Message}\",\n\"Runid\":\"@{pipeline().RunId}\"\n}",
								"type": "Expression"
							}
						}
					},
					{
						"name": "HelthTech JO-JV 751 701 File to Table Failure Mail",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Copy data HelthTech JO-JV 751 and 701 File to Table",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://prod-03.centralindia.logic.azure.com:443/workflows/464eb5db81654a119fbde64f7815052d/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=mF2jqmQWzHvsdtjGxGf4ajGCuU9BPmu1x3S0gtBtHF8",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "{\n\"Process\":\"HelthTech JO-JV 751 701 File to Table Failure Mail\",\n\"Pipeline\":\"@{pipeline().Pipeline}\",\n\"DataFactoryName\":\"@{pipeline().DataFactory}\",\n\"ErrorMessage\":\"@{activity('Copy data HelthTech JO-JV 751 and 701 File to Table').Error.Message}\",\n\"Runid\":\"@{pipeline().RunId}\"\n}",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Reconciliation Ledgers/Final Ledgers"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Ds_Ecogreenv2')]",
				"[concat(variables('factoryId'), '/datasets/RL_HelthTech_Sale_751_701_Debit')]",
				"[concat(variables('factoryId'), '/datasets/SQL_HelthTech_Sale_751_701_Debit')]",
				"[concat(variables('factoryId'), '/datasets/RL_HelthTech_JO_JV_751_701_Credit')]",
				"[concat(variables('factoryId'), '/datasets/SQL_HelthTech_JO_JV_751_701_Credit')]",
				"[concat(variables('factoryId'), '/linkedServices/Data360MSSQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Incremental Load Appsflyer Master')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Max Date from Appsflyer source Data",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "select max(LastRun_Date) as maxdate from LastRunTime",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "OMSSqlServerTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Distinct Appsflyer IDs",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Get Max Date from Appsflyer source Data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": {
									"value": "select  distinct afid from OMS_appsflyer2 where convert(date,created) >=\n'@{activity('Get Max Date from Appsflyer source Data').output.firstRow.maxdate}'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "SqlServerSink",
								"preCopyScript": "truncate table temp_appsflyerIDs;",
								"tableOption": "autoCreate"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "OMSSqlServerTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AppsflyerIDs_TempTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Loads Customer Master",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Distinct Appsflyer IDs",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[usp_Incremental_Load_appsflyer_customer_master]"
						},
						"linkedServiceName": {
							"referenceName": "Data360MSSQL",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Load Appsflyer flags",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Loads Customer Master",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[usp_Incremental_Load_Appsflyer_update_flags]"
						},
						"linkedServiceName": {
							"referenceName": "Data360MSSQL",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Get Max Date Failure Mail",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Get Max Date from Appsflyer source Data",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://prod-03.centralindia.logic.azure.com:443/workflows/464eb5db81654a119fbde64f7815052d/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=mF2jqmQWzHvsdtjGxGf4ajGCuU9BPmu1x3S0gtBtHF8",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "{\n\"Process\":\"Get Max Date Failure Mail\",\n\"Pipeline\":\"@{pipeline().Pipeline}\",\n\"DataFactoryName\":\"@{pipeline().DataFactory}\",\n\"ErrorMessage\":\"@{activity('Get Max Date from Appsflyer source Data').Error.Message}\",\n\"Runid\":\"@{pipeline().RunId}\"\n}",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Distinct Appsflyer IDs Failure Mail",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Distinct Appsflyer IDs",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://prod-03.centralindia.logic.azure.com:443/workflows/464eb5db81654a119fbde64f7815052d/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=mF2jqmQWzHvsdtjGxGf4ajGCuU9BPmu1x3S0gtBtHF8",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "{\n\"Process\":\"Distinct Appsflyer IDs Failure Mail\",\n\"Pipeline\":\"@{pipeline().Pipeline}\",\n\"DataFactoryName\":\"@{pipeline().DataFactory}\",\n\"ErrorMessage\":\"@{activity('Distinct Appsflyer IDs').Error.Message}\",\n\"Runid\":\"@{pipeline().RunId}\"\n}",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Loads Customer Master Failure Mail",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Loads Customer Master",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://prod-03.centralindia.logic.azure.com:443/workflows/464eb5db81654a119fbde64f7815052d/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=mF2jqmQWzHvsdtjGxGf4ajGCuU9BPmu1x3S0gtBtHF8",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "{\n\"Process\":\"Loads Customer Master Failure Mail\",\n\"Pipeline\":\"@{pipeline().Pipeline}\",\n\"DataFactoryName\":\"@{pipeline().DataFactory}\",\n\"ErrorMessage\":\"@{activity('Loads Customer Master').Error.Message}\",\n\"Runid\":\"@{pipeline().RunId}\"\n}",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Load Appsflyer flags Failure Mail",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Load Appsflyer flags",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://prod-03.centralindia.logic.azure.com:443/workflows/464eb5db81654a119fbde64f7815052d/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=mF2jqmQWzHvsdtjGxGf4ajGCuU9BPmu1x3S0gtBtHF8",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "{\n\"Process\":\"Load Appsflyer flags Failure Mail\",\n\"Pipeline\":\"@{pipeline().Pipeline}\",\n\"DataFactoryName\":\"@{pipeline().DataFactory}\",\n\"ErrorMessage\":\"@{activity('Load Appsflyer flags').Error.Message}\",\n\"Runid\":\"@{pipeline().RunId}\"\n}",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "AppsFlyer"
				},
				"annotations": [],
				"lastPublishTime": "2021-10-22T09:50:02Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/OMSSqlServerTable')]",
				"[concat(variables('factoryId'), '/datasets/AppsflyerIDs_TempTable')]",
				"[concat(variables('factoryId'), '/linkedServices/Data360MSSQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Inv Det Mst Backup')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.FolderNameArray",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Inv Det_copy1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ParquetSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"sink": {
											"type": "SqlServerSink",
											"tableOption": "autoCreate"
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "InvDetInputFile",
											"type": "DatasetReference",
											"parameters": {
												"FolderName": {
													"value": "@item()",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "InvDetOutputTable",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								},
								{
									"name": "Copy data Inv Mst",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Inv Det_copy1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ParquetSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"sink": {
											"type": "SqlServerSink",
											"tableOption": "autoCreate"
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "InvMstInputFile",
											"type": "DatasetReference",
											"parameters": {
												"FolderName": {
													"value": "@item()",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "InvMstOutputTable",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"FolderNameArray": {
						"type": "array",
						"defaultValue": [
							"2021-08-18",
							"2021-08-18Sync",
							"2021-08-19",
							"FullLoad"
						]
					}
				},
				"folder": {
					"name": "Invoice"
				},
				"annotations": [],
				"lastPublishTime": "2022-02-23T11:49:43Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/InvDetInputFile')]",
				"[concat(variables('factoryId'), '/datasets/InvDetOutputTable')]",
				"[concat(variables('factoryId'), '/datasets/InvMstInputFile')]",
				"[concat(variables('factoryId'), '/datasets/InvMstOutputTable')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Inv Det Mst')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Metadata",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadata').output.childItems",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Inv Det Copy",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [
										{
											"name": "Source",
											"value": "sales/@{item().name}/inv_det"
										},
										{
											"name": "Destination",
											"value": "dbo.inv_det_staging"
										}
									],
									"typeProperties": {
										"source": {
											"type": "ParquetSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"modifiedDatetimeStart": "2021-06-04T00:00:00Z",
												"modifiedDatetimeEnd": "2021-08-25T00:00:00Z",
												"enablePartitionDiscovery": false
											}
										},
										"sink": {
											"type": "SqlServerSink",
											"tableOption": "autoCreate"
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "InvDetInputFile",
											"type": "DatasetReference",
											"parameters": {
												"FolderName": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "InvDetOutputTable",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								},
								{
									"name": "Inv Mst Copy",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Inv Det Copy",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [
										{
											"name": "Source",
											"value": "sales/@{item().name}/inv_mst"
										},
										{
											"name": "Destination",
											"value": "dbo.inv_mst_staging"
										}
									],
									"typeProperties": {
										"source": {
											"type": "ParquetSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"modifiedDatetimeStart": "2021-06-04T00:00:00Z",
												"modifiedDatetimeEnd": "2021-08-25T00:00:00Z",
												"enablePartitionDiscovery": false
											}
										},
										"sink": {
											"type": "SqlServerSink",
											"tableOption": "autoCreate"
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "InvMstInputFile",
											"type": "DatasetReference",
											"parameters": {
												"FolderName": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "InvMstOutputTable",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								}
							]
						}
					},
					{
						"name": "Get Metadata",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "SalesFolder",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Invoice"
				},
				"annotations": [],
				"lastPublishTime": "2022-02-23T11:49:43Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SalesFolder')]",
				"[concat(variables('factoryId'), '/datasets/InvDetInputFile')]",
				"[concat(variables('factoryId'), '/datasets/InvDetOutputTable')]",
				"[concat(variables('factoryId'), '/datasets/InvMstInputFile')]",
				"[concat(variables('factoryId'), '/datasets/InvMstOutputTable')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Load Fill Rate Data')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data Fill Rate Data",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "SqlServerSink",
								"tableOption": "autoCreate"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "FillRate_InputFile",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "FillRate_OutPutTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Stored procedure Fill rate",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy data Fill Rate Data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[usp_FillRate]"
						},
						"linkedServiceName": {
							"referenceName": "Data360MSSQL",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Fill Rate"
				},
				"annotations": [],
				"lastPublishTime": "2022-01-19T07:55:27Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/FillRate_InputFile')]",
				"[concat(variables('factoryId'), '/datasets/FillRate_OutPutTable')]",
				"[concat(variables('factoryId'), '/linkedServices/Data360MSSQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Load Image Data')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data Image Data",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "MySqlSource",
								"query": "\n\nSELECT DISTINCT (wp.item_code)\n\n,wp.product_id\n\n,wp.item_fullname\n\n,cm.channel_name\n\n,cp.publish_status\n\n,wp.front_image\n\n,wp.num_of_imgs\n\n,wp.rx_type\n\n,mr.file_name\n\n,mr.file_url\n\nFROM wellnessDB.product wp\n\nLEFT JOIN wellnessDB.media mr ON wp.product_id = mr.product_id\n\nLEFT JOIN wellnessDB.channel_publish cp ON wp.product_id = cp.product_id\n\nLEFT JOIN wellnessDB.channel_master cm ON cp.channel_id = cm.channel_id\n\nWHERE wp.is_main_product = 0\n\nAND cp.publish_status = '1'\n\nAND cm.channel_name IN ('Mobile App','Webstore','T-Com','Dunzo','Amazon')\n\nORDER BY wp.item_fullname ASC"
							},
							"sink": {
								"type": "SqlServerSink",
								"tableOption": "autoCreate"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "OMSMySqlTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "EGImageOutPutTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "ECO Green"
				},
				"annotations": [],
				"lastPublishTime": "2021-09-14T06:03:41Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/OMSMySqlTable')]",
				"[concat(variables('factoryId'), '/datasets/EGImageOutPutTable')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Load Inv Det')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data Inv_Det_Staging to Inv_Det",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "SqlServerSink",
								"preCopyScript": "TRUNCATE TABLE Inv_Det",
								"tableOption": "autoCreate"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "InvDetOutputTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "InvDetTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Copy data Inv_Mst_Staging to Inv_Mst",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Copy data Inv_Det_Staging to Inv_Det",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "SqlServerSink",
								"preCopyScript": "TRUNCATE TABLE  Inv_Mst",
								"tableOption": "autoCreate"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "InvMstOutputTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "InvMstTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Invoice"
				},
				"annotations": [],
				"lastPublishTime": "2022-02-23T11:49:43Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/InvDetOutputTable')]",
				"[concat(variables('factoryId'), '/datasets/InvDetTable')]",
				"[concat(variables('factoryId'), '/datasets/InvMstOutputTable')]",
				"[concat(variables('factoryId'), '/datasets/InvMstTable')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Load Order logs')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data order logs",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "MySqlSource",
								"query": "select * from wellnessDB.order_logs"
							},
							"sink": {
								"type": "SqlServerSink",
								"tableOption": "autoCreate"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "OMSMySqlTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "OrderLogs_OutputTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Order Details"
				},
				"annotations": [],
				"lastPublishTime": "2021-10-09T11:53:48Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/OMSMySqlTable')]",
				"[concat(variables('factoryId'), '/datasets/OrderLogs_OutputTable')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Load aggr_dailysales')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "SP for aggr_dailysales to aggr_dailysales_master table",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[usp_aggr_dailysales_Master_Data]"
						},
						"linkedServiceName": {
							"referenceName": "Data360MSSQL",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Expiry Analysis"
				},
				"annotations": [],
				"lastPublishTime": "2021-09-22T05:02:01Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Data360MSSQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Load excl_bzn_customers')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data excl_bzn_customers",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "SqlServerSink",
								"tableOption": "autoCreate"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "CRMCustomerInputFile",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "CRMCustomerOutPutTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "CRM"
				},
				"annotations": [],
				"lastPublishTime": "2021-09-03T14:17:10Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/CRMCustomerInputFile')]",
				"[concat(variables('factoryId'), '/datasets/CRMCustomerOutPutTable')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Medicare_000_Debit_HelthTech_751_Credit')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data medicare sale 751 Debit into file",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Delete File Medicare sale 751",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SybaseSource",
								"query": "SELECT \nc_br_code,c_year,c_prefix,n_srno,d_date,c_cust_code,n_total,n_cancel_flag,c_order_id,\nn_taxable_amt,c_ord_br_code,c_ord_prefix,c_ord_year,n_ord_no\nFROM dba.inv_mst \nwhere c_cust_code = '751' and n_cancel_flag=0 and convert(date,d_date) > '2021-10-01'"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "Ds_Ecogreenv2",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "RL_Medicare_Sale_751_Debit",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Copy data file to Table",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Copy data medicare sale 751 Debit into file",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "SqlServerSink",
								"preCopyScript": "truncate table Medicare_Sale_751_Debit_Staging",
								"tableOption": "autoCreate"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "RL_Medicare_Sale_751_Debit",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "SQL_Medicare_Sale_751_Debit",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Delete File Medicare sale 751",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "RL_Medicare_Sale_751_Debit",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "Delete File HelthTech Purchase 751",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "RL_HelthTech_Purchase_751_Credit",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "Copy data HelthTech Purchase 751 Credit",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Delete File HelthTech Purchase 751",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SybaseSource",
								"query": "SELECT c_br_code,c_year,c_prefix,n_srno,d_date,n_subtotal,n_total,d_ldate,c_order_id,n_taxable_amt FROM dba.pur_mst where c_br_code = '751' and n_cancel_flag=0 and\n n_post = 1 and c_prefix in('K','KO') and convert(date,d_date) > '2021-10-01'"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "Ds_Ecogreenv2",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "RL_HelthTech_Purchase_751_Credit",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Copy data HelthTech 751 File to Table",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Copy data HelthTech Purchase 751 Credit",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "SqlServerSink",
								"preCopyScript": "truncate table HelthTech_Purchase_751_Credit_Staging;",
								"tableOption": "autoCreate"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "RL_HelthTech_Purchase_751_Credit",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "SQL_HelthTech_Purchase_751_Credit",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Stored procedure Get Final Data",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy data file to Table",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Copy data HelthTech 751 File to Table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[usp_Medicare_000_Debit_HelthTech_751_Credit]"
						},
						"linkedServiceName": {
							"referenceName": "Data360MSSQL",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "medicare sale 751 Debit  into file Failure Mail",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Copy data medicare sale 751 Debit into file",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://prod-03.centralindia.logic.azure.com:443/workflows/464eb5db81654a119fbde64f7815052d/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=mF2jqmQWzHvsdtjGxGf4ajGCuU9BPmu1x3S0gtBtHF8",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "{\n\"Process\":\"medicare sale 751 Debit  into file Failure Mail\",\n\"Pipeline\":\"@{pipeline().Pipeline}\",\n\"DataFactoryName\":\"@{pipeline().DataFactory}\",\n\"ErrorMessage\":\"@{activity('Copy data medicare sale 751 Debit into file').Error.Message}\",\n\"Runid\":\"@{pipeline().RunId}\"\n}",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Copy data file to Table Failure Mail",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Copy data file to Table",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://prod-03.centralindia.logic.azure.com:443/workflows/464eb5db81654a119fbde64f7815052d/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=mF2jqmQWzHvsdtjGxGf4ajGCuU9BPmu1x3S0gtBtHF8",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "{\n\"Process\":\"Copy data file to Table Failure Mail\",\n\"Pipeline\":\"@{pipeline().Pipeline}\",\n\"DataFactoryName\":\"@{pipeline().DataFactory}\",\n\"ErrorMessage\":\"@{activity('Copy data file to Table').Error.Message}\",\n\"Runid\":\"@{pipeline().RunId}\"\n}",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Stored procedure Get Final Data Failure Mail",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Stored procedure Get Final Data",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://prod-03.centralindia.logic.azure.com:443/workflows/464eb5db81654a119fbde64f7815052d/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=mF2jqmQWzHvsdtjGxGf4ajGCuU9BPmu1x3S0gtBtHF8",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "{\n\"Process\":\"Stored procedure Get Final Data Failure Mail\",\n\"Pipeline\":\"@{pipeline().Pipeline}\",\n\"DataFactoryName\":\"@{pipeline().DataFactory}\",\n\"ErrorMessage\":\"@{activity('Stored procedure Get Final Data').Error.Message}\",\n\"Runid\":\"@{pipeline().RunId}\"\n}",
								"type": "Expression"
							}
						}
					},
					{
						"name": "HelthTech Purchase 751 Credit Failure Mail",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Copy data HelthTech Purchase 751 Credit",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://prod-03.centralindia.logic.azure.com:443/workflows/464eb5db81654a119fbde64f7815052d/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=mF2jqmQWzHvsdtjGxGf4ajGCuU9BPmu1x3S0gtBtHF8",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "{\n\"Process\":\"HelthTech Purchase 751 Credit Failure Mail\",\n\"Pipeline\":\"@{pipeline().Pipeline}\",\n\"DataFactoryName\":\"@{pipeline().DataFactory}\",\n\"ErrorMessage\":\"@{activity('Copy data HelthTech Purchase 751 Credit').Error.Message}\",\n\"Runid\":\"@{pipeline().RunId}\"\n}",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Copy data HelthTech 751 File to Table Failure Mail",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Copy data HelthTech 751 File to Table",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://prod-03.centralindia.logic.azure.com:443/workflows/464eb5db81654a119fbde64f7815052d/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=mF2jqmQWzHvsdtjGxGf4ajGCuU9BPmu1x3S0gtBtHF8",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "{\n\"Process\":\"Copy data HelthTech 751 File to Table Failure Mail\",\n\"Pipeline\":\"@{pipeline().Pipeline}\",\n\"DataFactoryName\":\"@{pipeline().DataFactory}\",\n\"ErrorMessage\":\"@{activity('Copy data HelthTech 751 File to Table').Error.Message}\",\n\"Runid\":\"@{pipeline().RunId}\"\n}",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Reconciliation Ledgers/Final Ledgers"
				},
				"annotations": [],
				"lastPublishTime": "2022-02-11T04:03:32Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Ds_Ecogreenv2')]",
				"[concat(variables('factoryId'), '/datasets/RL_Medicare_Sale_751_Debit')]",
				"[concat(variables('factoryId'), '/datasets/SQL_Medicare_Sale_751_Debit')]",
				"[concat(variables('factoryId'), '/datasets/RL_HelthTech_Purchase_751_Credit')]",
				"[concat(variables('factoryId'), '/datasets/SQL_HelthTech_Purchase_751_Credit')]",
				"[concat(variables('factoryId'), '/linkedServices/Data360MSSQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Medicare_S14278_Debit_Helthtech_GC238_Credit')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Delete file Medicare S14278",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "RL_Medicare_S14278_Debit",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "Copy data Medicare S14278 Debit",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Delete file Medicare S14278",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SybaseSource",
								"query": "Select ( cogs.c_br_code ) as c_br_code,\n\t\t( cogs.c_year ) as c_year,   \n\t\t( cogs.c_prefix ) as c_prefix,   \n\t\t( cogs.n_tran_no ) as n_tran_no,   \n\t\t( cogs.c_act_code ) as c_act_code,   \n\t\t( cogs.d_date ) as d_date,   \n\t\tSUM( cogs.n_amount ) as n_amount,   \n\t\t( cogs.c_opp_act_code ) as c_opp_act_code,   \n\t\t( cogs.c_ref_br_code ) as c_ref_br_code,\n\t\t( cogs.c_ref_no ) as c_ref_no,   \n\t\t( cogs.d_chq_date) as d_chq_date,   \n\t\t( cogs.c_remark ) as c_remark,   \n\t\t( cogs.c_act_name ) as c_act_name,   \n\t\t( cogs.c_opp_act_name ) as c_opp_act_name,\n\t\t( cogs.c_add_1 ) as c_add_1,\n\t\t( cogs.c_add_2 ) as c_add_2, \n\t\t( cogs.c_add_3 ) as c_add_3,\n\t\t( cogs.c_city ) as c_city,\n\t\t( cogs.n_ref_srno ) as n_ref_srno,\n\t\t( cogs.n_order_no ) as n_order_no,\n\t\t( cogs.recon_dt) as recon_dt,\n\t\t( if recon_dt is null then 0 else 1 endif ) as chq_pass,\n\t\t( cogs.multi_act_name) as multi_act_name,\n\t\tisnull( case when n_amount  > 0 then n_amount else 0 end,0) as Debit,\n\t\tisnull( case when n_amount  < 0 then n_amount else 0 end,0) as credit\nFrom\n(\n\tSELECT ( ledger.c_br_code ) as c_br_code,\n\t\t\t( ledger.c_year ) as c_year,   \n\t\t\t( ledger.c_prefix ) as c_prefix,   \n\t\t\t( ledger.n_tran_no ) as n_tran_no,   \n\t\t\t( ledger.c_act_code ) as c_act_code,   \n\t\t\t( ledger.d_date ) as d_date,   \n\t\t\t( ledger.n_amount ) as n_amount,   \n\t\t\t( ledger.c_opp_act_code ) as c_opp_act_code,   \n\t\t\t( ledger.c_ref_br_code ) as c_ref_br_code,\n\t\t\t( settle_mst_header.c_ref_no ) as c_ref_no,   \n\t\t\tdate(settle_mst_header.d_ref_date) as d_chq_date,   \n\t\t\t( settle_mst_header.c_remark ) as c_remark,   \n\t\t\t( act_mst_a.c_name ) as c_act_name,   \n\t\t\t( act_mst_b.c_name ) as c_opp_act_name,\n\t\t\t( act_mst_a.c_add_1 ) as c_add_1,\n\t\t\t( act_mst_a.c_add_2 ) as c_add_2, \n\t\t\t( act_mst_a.c_add_3 ) as c_add_3,\n\t\t\t( act_mst_a.c_city ) as c_city,\n\t\t\t( grn_mst.n_ref_srno ) as n_ref_srno,\n\t\t\t( gdn_mst.n_order_no ) as n_order_no,\n\t\t\t(d_reconcile_date) as recon_dt,\n\t\t\t(if recon_dt is null then 0 else 1 endif) as chq_pass,\n\t\t\tif ledger.c_opp_act_code='~~~~~~~~~~~~' then \n\t\t\t\t(select list(ac.c_name+' : '+string(n_amount),char(13)) from dba.ledger ll , dba.act_mst ac  where ac.c_code=ll.c_act_code and\n\t\t\t\t\t\tll.c_br_code=ledger.c_br_code and ll.c_year=ledger.c_year\n\t\t\t\t\t\tand ll.c_prefix=ledger.c_prefix and ll.n_tran_no=ledger.n_tran_no and \n\t\t\t\t\t\t(ledger.n_amount<0 and ll.n_amount>0 or ledger.n_amount>0 and ll.n_amount<0))\n\t\t\telse '' endif as multi_act_name\n    FROM dba.ledger\n\t\t\t\tinner join (select c_br_code as brcode from dba.branch_group_det where length('000') = 6 and c_code = '000' and  branch_group_det.n_cancel_flag = 0 \n            union \n            select c_code from dba.act_mst where length('000')<> 6 and c_code >= (if '000' = 'zzz' then '000' else '000' endif ) and ( c_code <= '000' ) \n            ) brlist on brlist.brcode=ledger.c_ref_br_code  \n\t\t\tleft outer join dba.settle_mst_header  on  ledger.c_br_code = settle_mst_header.c_br_code  and \n\t\t\t ledger.c_year = settle_mst_header.c_year  and \n          ledger.c_prefix = settle_mst_header.c_prefix  and \n          ledger.n_tran_no = settle_mst_header.n_srno  \n          left outer join dba.grn_mst on  ledger.c_br_code = grn_mst.c_br_code  and \n\t\t\t\tledger.c_year = grn_mst.c_year  and \n\t\t\t\tledger.c_prefix = grn_mst.c_prefix  and \n\t\t\t\tledger.n_tran_no = grn_mst.n_srno\n\t\t\tleft outer join dba.gdn_mst  on  ledger.c_br_code = gdn_mst.c_br_code  and \n\t\t\t\tledger.c_year = gdn_mst.c_year  and \n\t\t\t\tledger.c_prefix = gdn_mst.c_prefix  and \n\t\t\t\tledger.n_tran_no = gdn_mst.n_srno\n\t\t\t\tleft outer join dba.reconcile_mst  on  ledger.c_br_code= reconcile_mst.c_br_code and ledger.c_year = reconcile_mst.c_year and\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  ledger.c_prefix = reconcile_mst.c_prefix and  ledger.n_tran_no = reconcile_mst.n_srno, \n          dba.act_mst act_mst_a,   \n         dba.act_mst act_mst_b  \n   WHERE \n         ( act_mst_a.c_code = ledger.c_act_code ) and \n         ( act_mst_b.c_code = ledger.c_opp_act_code ) and\t\n         ( ( ledger.d_date >= '2021-10-01' ) and\t\n         ( ledger.d_date <= getDate() ) and \n         ( ledger.c_act_code >= 'S14278' ) and \n         ( ledger.c_act_code <= 'S14278' )   and\n\t\t\t( ledger.n_amount <> 0) )\n\tUnion All\n\t SELECT ( ledger.c_br_code ) as c_br_code,\n\t\t\t( ledger.c_year ) as c_year,   \n\t\t\t( ledger.c_prefix ) as c_prefix,   \n\t\t\t( ledger.n_tran_no ) as n_tran_no,   \n\t\t\t( ledger.c_act_code ) as c_act_code,   \n\t\t\t( ledger.d_date ) as d_date,   \n\t\t\t( ledger.n_amount ) as n_amount,   \n\t\t\t( ledger.c_opp_act_code ) as c_opp_act_code,   \n\t\t\t( ledger.c_ref_br_code ) as c_ref_br_code,\n\t\t\t( settle_mst_header.c_ref_no ) as c_ref_no,   \n\t\t\tdate(settle_mst_header.d_ref_date) as d_chq_date,   \n\t\t\t( settle_mst_header.c_remark ) as c_remark,   \n\t\t\t( act_mst_a.c_name ) as c_act_name,   \n\t\t\t( act_mst_b.c_name ) as c_opp_act_name,\n\t\t\t( act_mst_a.c_add_1 ) as c_add_1,\n\t\t\t( act_mst_a.c_add_2 ) as c_add_2, \n\t\t\t( act_mst_a.c_add_3 ) as c_add_3,\n\t\t\t( act_mst_a.c_city ) as c_city,\n\t\t\t( grn_mst.n_ref_srno ) as n_ref_srno,\n\t\t\t( gdn_mst.n_order_no ) as n_order_no,\n\t\t\t(d_reconcile_date) as recon_dt,\n\t\t\t(if recon_dt is null then 0 else 1 endif) as chq_pass,\n\t\t\tif ledger.c_opp_act_code='~~~~~~~~~~~~' then \n\t\t\t\t(select list(ac.c_name+' : '+string(n_amount),char(13)) from dba.ledger ll , dba.act_mst ac  where ac.c_code=ll.c_act_code and\n\t\t\t\t\t\tll.c_br_code=ledger.c_br_code and ll.c_year=ledger.c_year\n\t\t\t\t\t\tand ll.c_prefix=ledger.c_prefix and ll.n_tran_no=ledger.n_tran_no and \n\t\t\t\t\t\t(ledger.n_amount<0 and ll.n_amount>0 or ledger.n_amount>0 and ll.n_amount<0))\n\t\t\telse '' endif as multi_act_name\n    FROM dba.cogs_ledger as ledger\n\t\t\t\tinner join (select c_br_code as brcode from dba.branch_group_det where length('000') = 6 and c_code = '000' and  branch_group_det.n_cancel_flag = 0 \n            union \n            select c_code from dba.act_mst where length('000')<> 6 and c_code >= (if '000' = 'zzz' then '000' else '000' endif ) and ( c_code <= '000' ) \n            ) brlist on brlist.brcode=ledger.c_ref_br_code  \n\t\t\tleft outer join dba.settle_mst_header  on  ledger.c_br_code = settle_mst_header.c_br_code  and \n\t\t\t ledger.c_year = settle_mst_header.c_year  and \n          ledger.c_prefix = settle_mst_header.c_prefix  and \n          ledger.n_tran_no = settle_mst_header.n_srno  \n          left outer join dba.grn_mst on  ledger.c_br_code = grn_mst.c_br_code  and \n\t\t\t\tledger.c_year = grn_mst.c_year  and \n\t\t\t\tledger.c_prefix = grn_mst.c_prefix  and \n\t\t\t\tledger.n_tran_no = grn_mst.n_srno\n\t\t\tleft outer join dba.gdn_mst  on  ledger.c_br_code = gdn_mst.c_br_code  and \n\t\t\t\tledger.c_year = gdn_mst.c_year  and \n\t\t\t\tledger.c_prefix = gdn_mst.c_prefix  and \n\t\t\t\tledger.n_tran_no = gdn_mst.n_srno\n\t\t\t\tleft outer join dba.reconcile_mst  on  ledger.c_br_code= reconcile_mst.c_br_code and ledger.c_year = reconcile_mst.c_year and\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  ledger.c_prefix = reconcile_mst.c_prefix and  ledger.n_tran_no = reconcile_mst.n_srno, \n          dba.act_mst act_mst_a,   \n         dba.act_mst act_mst_b  \n   WHERE \n         ( act_mst_a.c_code = ledger.c_act_code ) and \n         ( act_mst_b.c_code = ledger.c_opp_act_code ) and\t\n         ( ( ledger.d_date >= '2021-10-01' ) and\t\n         ( ledger.d_date <= getDate() ) and \n         ( ledger.c_act_code >= 'S14278' ) and \n         ( ledger.c_act_code <= 'S14278' )   and\n\t\t\t( ledger.n_amount <> 0) ) --and :li_cogs =1\n) as cogs\nGroup By c_br_code,c_year,c_prefix,n_tran_no,c_act_code,d_date,c_opp_act_code,c_ref_br_code,c_ref_no,   \n\t\td_chq_date,c_remark,c_act_name,c_opp_act_name,c_add_1,c_add_2,c_add_3,c_city,n_ref_srno,\n\t\tn_order_no,recon_dt,multi_act_name\nUNION   ALL\n  SELECT ('') as c_br_code,\n\t\t\t('00') as c_year,   \n         ('OP') as c_prefix,   \n         ( 0 ) as c_tran_no,   \n         ( ledger.c_act_code ) as c_act_code,   \n         ( date('2021-10-21')) as d_date,   \n         sum(ledger.n_amount) as n_amount,   \n         ( '' ) as c_opp_act_code,   \n         ( '' ) as c_ref_br_code,   \n         ( '' ) as c_ref_no,   \n         date('2021-10-21') as d_chq_date,   \n         ( '' ) as c_remark,   \n         ( act_mst.c_name ) as c_act_name,   \n         ( 'Opening Balance' ) as c_opp_act_name,\n\t\t\t( act_mst.c_add_1 )  as c_add_1,\n\t\t\t( act_mst.c_add_2 )  as c_add_2, \n\t\t\t( act_mst.c_add_3 )  as c_add_3,\n\t\t\t( act_mst.c_city ) as c_city,\n\t\t\t(0) as n_ref_srno,\n\t\t\t(0) as n_order_no,\n\t\t\t( null )  as recon_dt,\n\t\t\t( 0 )  \tas chq_pass,\n\t\t\t( '' ) as multi_act_name\t,\n\t\tisnull( case when n_amount  > 0 then n_amount else 0 end,0) as Debit,\n\t\tisnull( case when n_amount  < 0 then n_amount else 0 end,0) as credit\n    FROM dba.ledger\n\t\t\t\tinner join (select c_br_code as brcode from dba.branch_group_det where length('000') = 6 and c_code = '000' and  branch_group_det.n_cancel_flag = 0 \n            union \n            select c_code from dba.act_mst where length('000')<> 6 and c_code >= (if '000' = 'zzz' then '000' else '000' endif ) and ( c_code <= '000' ) \n            ) brlist on brlist.brcode=ledger.c_ref_br_code,  \n         dba.act_mst  \n   WHERE ( act_mst.c_code = ledger.c_act_code ) and  \n         ( ( ledger.d_date <= getDate() ) and\t\n         ( ledger.c_act_code >= 'S14278' ) and\t\n         ( ledger.c_act_code <= 'S14278' ) )   \nGROUP BY c_act_code,c_act_name,c_add_1,c_add_2,c_add_3,c_city"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "Ds_Ecogreenv2",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "RL_Medicare_S14278_Debit",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Copy data Medicare S14278 File to Table",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Copy data Medicare S14278 Debit",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "SqlServerSink",
								"preCopyScript": "truncate table Medicare_S14278_Debit_Staging",
								"tableOption": "autoCreate"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "RL_Medicare_S14278_Debit",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "SQL_Medicare_S14278_Debit",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Delete File HelthTech GC238",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "RL_HelthTech_GC238_Credit",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "Copy data HelthTech GC238 Credit",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Delete File HelthTech GC238",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SybaseSource",
								"query": "Select ( cogs.c_br_code ) as c_br_code,\n\t\t( cogs.c_year ) as c_year,   \n\t\t( cogs.c_prefix ) as c_prefix,   \n\t\t( cogs.n_tran_no ) as n_tran_no,   \n\t\t( cogs.c_act_code ) as c_act_code,   \n\t\t( cogs.d_date ) as d_date,   \n\t\tSUM( cogs.n_amount ) as n_amount,   \n\t\t( cogs.c_opp_act_code ) as c_opp_act_code,   \n\t\t( cogs.c_ref_br_code ) as c_ref_br_code,\n\t\t( cogs.c_ref_no ) as c_ref_no,   \n\t\t( cogs.d_chq_date) as d_chq_date,   \n\t\t( cogs.c_remark ) as c_remark,   \n\t\t( cogs.c_act_name ) as c_act_name,   \n\t\t( cogs.c_opp_act_name ) as c_opp_act_name,\n\t\t( cogs.c_add_1 ) as c_add_1,\n\t\t( cogs.c_add_2 ) as c_add_2, \n\t\t( cogs.c_add_3 ) as c_add_3,\n\t\t( cogs.c_city ) as c_city,\n\t\t( cogs.n_ref_srno ) as n_ref_srno,\n\t\t( cogs.n_order_no ) as n_order_no,\n\t\t( cogs.recon_dt) as recon_dt,\n\t\t( if recon_dt is null then 0 else 1 endif ) as chq_pass,\n\t\t( cogs.multi_act_name) as multi_act_name,\n\t\tisnull( case when n_amount  > 0 then n_amount else 0 end,0) as Debit,\n\t\tisnull( case when n_amount  < 0 then n_amount else 0 end,0) as credit\nFrom\n(\n\tSELECT ( ledger.c_br_code ) as c_br_code,\n\t\t\t( ledger.c_year ) as c_year,   \n\t\t\t( ledger.c_prefix ) as c_prefix,   \n\t\t\t( ledger.n_tran_no ) as n_tran_no,   \n\t\t\t( ledger.c_act_code ) as c_act_code,   \n\t\t\t( ledger.d_date ) as d_date,   \n\t\t\t( ledger.n_amount ) as n_amount,   \n\t\t\t( ledger.c_opp_act_code ) as c_opp_act_code,   \n\t\t\t( ledger.c_ref_br_code ) as c_ref_br_code,\n\t\t\t( settle_mst_header.c_ref_no ) as c_ref_no,   \n\t\t\tdate(settle_mst_header.d_ref_date) as d_chq_date,   \n\t\t\t( settle_mst_header.c_remark ) as c_remark,   \n\t\t\t( act_mst_a.c_name ) as c_act_name,   \n\t\t\t( act_mst_b.c_name ) as c_opp_act_name,\n\t\t\t( act_mst_a.c_add_1 ) as c_add_1,\n\t\t\t( act_mst_a.c_add_2 ) as c_add_2, \n\t\t\t( act_mst_a.c_add_3 ) as c_add_3,\n\t\t\t( act_mst_a.c_city ) as c_city,\n\t\t\t( grn_mst.n_ref_srno ) as n_ref_srno,\n\t\t\t( gdn_mst.n_order_no ) as n_order_no,\n\t\t\t(d_reconcile_date) as recon_dt,\n\t\t\t(if recon_dt is null then 0 else 1 endif) as chq_pass,\n\t\t\tif ledger.c_opp_act_code='~~~~~~~~~~~~' then \n\t\t\t\t(select list(ac.c_name+' : '+string(n_amount),char(13)) from dba.ledger ll , dba.act_mst ac  where ac.c_code=ll.c_act_code and\n\t\t\t\t\t\tll.c_br_code=ledger.c_br_code and ll.c_year=ledger.c_year\n\t\t\t\t\t\tand ll.c_prefix=ledger.c_prefix and ll.n_tran_no=ledger.n_tran_no and \n\t\t\t\t\t\t(ledger.n_amount<0 and ll.n_amount>0 or ledger.n_amount>0 and ll.n_amount<0))\n\t\t\telse '' endif as multi_act_name\n    FROM dba.ledger\n\t\t\t\tinner join (select c_br_code as brcode from dba.branch_group_det where length('751') = 6 and c_code = '751' and  branch_group_det.n_cancel_flag = 0 \n            union \n            select c_code from dba.act_mst where length('751')<> 6 and c_code >= (if '751' = 'zzz' then '751' else '751' endif ) and ( c_code <= '751' ) \n            ) brlist on brlist.brcode=ledger.c_ref_br_code  \n\t\t\tleft outer join dba.settle_mst_header  on  ledger.c_br_code = settle_mst_header.c_br_code  and \n\t\t\t ledger.c_year = settle_mst_header.c_year  and \n          ledger.c_prefix = settle_mst_header.c_prefix  and \n          ledger.n_tran_no = settle_mst_header.n_srno  \n          left outer join dba.grn_mst on  ledger.c_br_code = grn_mst.c_br_code  and \n\t\t\t\tledger.c_year = grn_mst.c_year  and \n\t\t\t\tledger.c_prefix = grn_mst.c_prefix  and \n\t\t\t\tledger.n_tran_no = grn_mst.n_srno\n\t\t\tleft outer join dba.gdn_mst  on  ledger.c_br_code = gdn_mst.c_br_code  and \n\t\t\t\tledger.c_year = gdn_mst.c_year  and \n\t\t\t\tledger.c_prefix = gdn_mst.c_prefix  and \n\t\t\t\tledger.n_tran_no = gdn_mst.n_srno\n\t\t\t\tleft outer join dba.reconcile_mst  on  ledger.c_br_code= reconcile_mst.c_br_code and ledger.c_year = reconcile_mst.c_year and\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  ledger.c_prefix = reconcile_mst.c_prefix and  ledger.n_tran_no = reconcile_mst.n_srno, \n          dba.act_mst act_mst_a,   \n         dba.act_mst act_mst_b  \n   WHERE \n         ( act_mst_a.c_code = ledger.c_act_code ) and \n         ( act_mst_b.c_code = ledger.c_opp_act_code ) and\t\n         ( ( ledger.d_date >= '2021-10-01' ) and\t\n         ( ledger.d_date <= getDate() ) and \n         ( ledger.c_act_code >= 'GC238' ) and \n         ( ledger.c_act_code <= 'GC238' )   and\n\t\t\t( ledger.n_amount <> 0) )\n\tUnion All\n\t SELECT ( ledger.c_br_code ) as c_br_code,\n\t\t\t( ledger.c_year ) as c_year,   \n\t\t\t( ledger.c_prefix ) as c_prefix,   \n\t\t\t( ledger.n_tran_no ) as n_tran_no,   \n\t\t\t( ledger.c_act_code ) as c_act_code,   \n\t\t\t( ledger.d_date ) as d_date,   \n\t\t\t( ledger.n_amount ) as n_amount,   \n\t\t\t( ledger.c_opp_act_code ) as c_opp_act_code,   \n\t\t\t( ledger.c_ref_br_code ) as c_ref_br_code,\n\t\t\t( settle_mst_header.c_ref_no ) as c_ref_no,   \n\t\t\tdate(settle_mst_header.d_ref_date) as d_chq_date,   \n\t\t\t( settle_mst_header.c_remark ) as c_remark,   \n\t\t\t( act_mst_a.c_name ) as c_act_name,   \n\t\t\t( act_mst_b.c_name ) as c_opp_act_name,\n\t\t\t( act_mst_a.c_add_1 ) as c_add_1,\n\t\t\t( act_mst_a.c_add_2 ) as c_add_2, \n\t\t\t( act_mst_a.c_add_3 ) as c_add_3,\n\t\t\t( act_mst_a.c_city ) as c_city,\n\t\t\t( grn_mst.n_ref_srno ) as n_ref_srno,\n\t\t\t( gdn_mst.n_order_no ) as n_order_no,\n\t\t\t(d_reconcile_date) as recon_dt,\n\t\t\t(if recon_dt is null then 0 else 1 endif) as chq_pass,\n\t\t\tif ledger.c_opp_act_code='~~~~~~~~~~~~' then \n\t\t\t\t(select list(ac.c_name+' : '+string(n_amount),char(13)) from dba.ledger ll , dba.act_mst ac  where ac.c_code=ll.c_act_code and\n\t\t\t\t\t\tll.c_br_code=ledger.c_br_code and ll.c_year=ledger.c_year\n\t\t\t\t\t\tand ll.c_prefix=ledger.c_prefix and ll.n_tran_no=ledger.n_tran_no and \n\t\t\t\t\t\t(ledger.n_amount<0 and ll.n_amount>0 or ledger.n_amount>0 and ll.n_amount<0))\n\t\t\telse '' endif as multi_act_name\n    FROM dba.cogs_ledger as ledger\n\t\t\t\tinner join (select c_br_code as brcode from dba.branch_group_det where length('751') = 6 and c_code = '751' and  branch_group_det.n_cancel_flag = 0 \n            union \n            select c_code from dba.act_mst where length('751')<> 6 and c_code >= (if '751' = 'zzz' then '751' else '751' endif ) and ( c_code <= '751' ) \n            ) brlist on brlist.brcode=ledger.c_ref_br_code  \n\t\t\tleft outer join dba.settle_mst_header  on  ledger.c_br_code = settle_mst_header.c_br_code  and \n\t\t\t ledger.c_year = settle_mst_header.c_year  and \n          ledger.c_prefix = settle_mst_header.c_prefix  and \n          ledger.n_tran_no = settle_mst_header.n_srno  \n          left outer join dba.grn_mst on  ledger.c_br_code = grn_mst.c_br_code  and \n\t\t\t\tledger.c_year = grn_mst.c_year  and \n\t\t\t\tledger.c_prefix = grn_mst.c_prefix  and \n\t\t\t\tledger.n_tran_no = grn_mst.n_srno\n\t\t\tleft outer join dba.gdn_mst  on  ledger.c_br_code = gdn_mst.c_br_code  and \n\t\t\t\tledger.c_year = gdn_mst.c_year  and \n\t\t\t\tledger.c_prefix = gdn_mst.c_prefix  and \n\t\t\t\tledger.n_tran_no = gdn_mst.n_srno\n\t\t\t\tleft outer join dba.reconcile_mst  on  ledger.c_br_code= reconcile_mst.c_br_code and ledger.c_year = reconcile_mst.c_year and\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  ledger.c_prefix = reconcile_mst.c_prefix and  ledger.n_tran_no = reconcile_mst.n_srno, \n          dba.act_mst act_mst_a,   \n         dba.act_mst act_mst_b  \n   WHERE \n         ( act_mst_a.c_code = ledger.c_act_code ) and \n         ( act_mst_b.c_code = ledger.c_opp_act_code ) and\t\n         ( ( ledger.d_date >= '2021-10-01' ) and\t\n         ( ledger.d_date <= getDate() ) and \n         ( ledger.c_act_code >= 'GC238' ) and \n         ( ledger.c_act_code <= 'GC238' )   and\n\t\t\t( ledger.n_amount <> 0) ) --and :li_cogs =1\n) as cogs\nGroup By c_br_code,c_year,c_prefix,n_tran_no,c_act_code,d_date,c_opp_act_code,c_ref_br_code,c_ref_no,   \n\t\td_chq_date,c_remark,c_act_name,c_opp_act_name,c_add_1,c_add_2,c_add_3,c_city,n_ref_srno,\n\t\tn_order_no,recon_dt,multi_act_name\nUNION   ALL\n  SELECT ('') as c_br_code,\n\t\t\t('00') as c_year,   \n         ('OP') as c_prefix,   \n         ( 0 ) as c_tran_no,   \n         ( ledger.c_act_code ) as c_act_code,   \n         ( date('2021-10-21')) as d_date,   \n         sum(ledger.n_amount) as n_amount,   \n         ( '' ) as c_opp_act_code,   \n         ( '' ) as c_ref_br_code,   \n         ( '' ) as c_ref_no,   \n         date('2021-10-21') as d_chq_date,   \n         ( '' ) as c_remark,   \n         ( act_mst.c_name ) as c_act_name,   \n         ( 'Opening Balance' ) as c_opp_act_name,\n\t\t\t( act_mst.c_add_1 )  as c_add_1,\n\t\t\t( act_mst.c_add_2 )  as c_add_2, \n\t\t\t( act_mst.c_add_3 )  as c_add_3,\n\t\t\t( act_mst.c_city ) as c_city,\n\t\t\t(0) as n_ref_srno,\n\t\t\t(0) as n_order_no,\n\t\t\t( null )  as recon_dt,\n\t\t\t( 0 )  \tas chq_pass,\n\t\t\t( '' ) as multi_act_name\t,\n\t\tisnull( case when n_amount  > 0 then n_amount else 0 end,0) as Debit,\n\t\tisnull( case when n_amount  < 0 then n_amount else 0 end,0) as credit\n    FROM dba.ledger\n\t\t\t\tinner join (select c_br_code as brcode from dba.branch_group_det where length('751') = 6 and c_code = '751' and  branch_group_det.n_cancel_flag = 0 \n            union \n            select c_code from dba.act_mst where length('751')<> 6 and c_code >= (if '751' = 'zzz' then '751' else '751' endif ) and ( c_code <= '751' ) \n            ) brlist on brlist.brcode=ledger.c_ref_br_code,  \n         dba.act_mst  \n   WHERE ( act_mst.c_code = ledger.c_act_code ) and  \n         ( ( ledger.d_date <= getDate() ) and\t\n         ( ledger.c_act_code >= 'GC238' ) and\t\n         ( ledger.c_act_code <= 'GC238' ) )   \nGROUP BY c_act_code,c_act_name,c_add_1,c_add_2,c_add_3,c_city"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "Ds_Ecogreenv2",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "RL_HelthTech_GC238_Credit",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Copy data HelthTech GC238 File to Table",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Copy data HelthTech GC238 Credit",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "SqlServerSink",
								"preCopyScript": "truncate table HelthTech_GC238_Credit_Staging",
								"tableOption": "autoCreate"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "RL_HelthTech_GC238_Credit",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "SQL_HelthTech_GC238_Credit",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Stored procedure get final Data",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy data Medicare S14278 File to Table",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Copy data HelthTech GC238 File to Table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[usp_MEDICARE_S14278_DEBIT_HELTHTECH_GC238_CREDIT]"
						},
						"linkedServiceName": {
							"referenceName": "Data360MSSQL",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Copy data Medicare S14278 Debit Failure Mail",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Copy data Medicare S14278 Debit",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://prod-03.centralindia.logic.azure.com:443/workflows/464eb5db81654a119fbde64f7815052d/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=mF2jqmQWzHvsdtjGxGf4ajGCuU9BPmu1x3S0gtBtHF8",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "{\n\"Process\":\"Copy data Medicare S14278 Debit Failure Mail\",\n\"Pipeline\":\"@{pipeline().Pipeline}\",\n\"DataFactoryName\":\"@{pipeline().DataFactory}\",\n\"ErrorMessage\":\"@{activity('Copy data Medicare S14278 Debit').Error.Message}\",\n\"Runid\":\"@{pipeline().RunId}\"\n}",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Copy data Medicare S14278 File to Table Failure Mail",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Copy data Medicare S14278 File to Table",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://prod-03.centralindia.logic.azure.com:443/workflows/464eb5db81654a119fbde64f7815052d/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=mF2jqmQWzHvsdtjGxGf4ajGCuU9BPmu1x3S0gtBtHF8",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "{\n\"Process\":\"Copy data Medicare S14278 File to Table Failure Mail\",\n\"Pipeline\":\"@{pipeline().Pipeline}\",\n\"DataFactoryName\":\"@{pipeline().DataFactory}\",\n\"ErrorMessage\":\"@{activity('Copy data Medicare S14278 File to Table').Error.Message}\",\n\"Runid\":\"@{pipeline().RunId}\"\n}",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Stored procedure get final Data Failure Mail",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Stored procedure get final Data",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://prod-03.centralindia.logic.azure.com:443/workflows/464eb5db81654a119fbde64f7815052d/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=mF2jqmQWzHvsdtjGxGf4ajGCuU9BPmu1x3S0gtBtHF8",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "{\n\"Process\":\"Stored procedure get final Data Failure Mail\",\n\"Pipeline\":\"@{pipeline().Pipeline}\",\n\"DataFactoryName\":\"@{pipeline().DataFactory}\",\n\"ErrorMessage\":\"@{activity('Stored procedure get final Data').Error.Message}\",\n\"Runid\":\"@{pipeline().RunId}\"\n}",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Copy data HelthTech GC238 Credit Failure Mail",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Copy data HelthTech GC238 Credit",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://prod-03.centralindia.logic.azure.com:443/workflows/464eb5db81654a119fbde64f7815052d/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=mF2jqmQWzHvsdtjGxGf4ajGCuU9BPmu1x3S0gtBtHF8",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "{\n\"Process\":\"Copy data HelthTech GC238 Credit Failure Mail\",\n\"Pipeline\":\"@{pipeline().Pipeline}\",\n\"DataFactoryName\":\"@{pipeline().DataFactory}\",\n\"ErrorMessage\":\"@{activity('Copy data HelthTech GC238 Credit').Error.Message}\",\n\"Runid\":\"@{pipeline().RunId}\"\n}",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Copy data HelthTech GC238 File to Table Failure Mail",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Copy data HelthTech GC238 File to Table",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://prod-03.centralindia.logic.azure.com:443/workflows/464eb5db81654a119fbde64f7815052d/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=mF2jqmQWzHvsdtjGxGf4ajGCuU9BPmu1x3S0gtBtHF8",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "{\n\"Process\":\"Copy data HelthTech GC238 File to Table Failure Mail\",\n\"Pipeline\":\"@{pipeline().Pipeline}\",\n\"DataFactoryName\":\"@{pipeline().DataFactory}\",\n\"ErrorMessage\":\"@{activity('Copy data HelthTech GC238 File to Table').Error.Message}\",\n\"Runid\":\"@{pipeline().RunId}\"\n}",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Reconciliation Ledgers/Final Ledgers"
				},
				"annotations": [],
				"lastPublishTime": "2022-01-11T10:11:53Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/RL_Medicare_S14278_Debit')]",
				"[concat(variables('factoryId'), '/datasets/Ds_Ecogreenv2')]",
				"[concat(variables('factoryId'), '/datasets/SQL_Medicare_S14278_Debit')]",
				"[concat(variables('factoryId'), '/datasets/RL_HelthTech_GC238_Credit')]",
				"[concat(variables('factoryId'), '/datasets/SQL_HelthTech_GC238_Credit')]",
				"[concat(variables('factoryId'), '/linkedServices/Data360MSSQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Order Status Master')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data OrderStatus File to Order_Status_Master",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "SqlServerSink",
								"tableOption": "autoCreate"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "OrderStatusInputFile",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "OrderStatusOutputTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Order Details"
				},
				"annotations": [],
				"lastPublishTime": "2021-08-25T07:48:09Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/OrderStatusInputFile')]",
				"[concat(variables('factoryId'), '/datasets/OrderStatusOutputTable')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Sample1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SybaseSource",
								"query": "select * from dba.ledger where d_date>='2021-10-22' and d_date <= today()-1"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "Ds_Ecogreenv2",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "adls_pq_EG",
								"type": "DatasetReference",
								"parameters": {
									"FileName": {
										"value": "@concat(  'FullLoad'  ,'/', 'Ledger' )",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2021-11-08T12:13:04Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Ds_Ecogreenv2')]",
				"[concat(variables('factoryId'), '/datasets/adls_pq_EG')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Update inv det')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.FolderNameArray",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Inv Det_copy1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ParquetSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"sink": {
											"type": "SqlServerSink",
											"tableOption": "autoCreate"
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "InvDetInputFile",
											"type": "DatasetReference",
											"parameters": {
												"FolderName": {
													"value": "@item()",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "inv_det_tempOutputTable",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"FolderNameArray": {
						"type": "array",
						"defaultValue": [
							"2021-11-01",
							"2021-11-01Sync"
						]
					}
				},
				"folder": {
					"name": "Invoice"
				},
				"annotations": [],
				"lastPublishTime": "2022-02-23T11:49:43Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/InvDetInputFile')]",
				"[concat(variables('factoryId'), '/datasets/inv_det_tempOutputTable')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Upsert Incremental For inv Master')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Max Date from inv Master",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "SP truncate staging and temp table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "declare @temp as table\n(\ndates nvarchar(100)\n)\n\nDeclare \n@i int,@array varchar(200),\n@maxdate varchar(100),@days int, \n@syncdate nvarchar(100),@nextdate nvarchar(100)\n\nset @maxdate = (Select dateadd(day,1,convert(date,max(d_date))) as maxdate from inv_Master)\nset @days  = datediff(day, convert(date, @maxdate), convert(date, getdate()))\nset @i = 1\nset @syncdate= @maxdate + 'Sync'\n\ninsert into @temp\nselect @maxdate\ninsert into @temp\nselect @syncdate\n\nwhile @i <= @days-1\nBegin\n\nset @nextdate = convert(varchar,convert(date, dateadd(day, @i, @maxdate)))\nset @syncdate=  concat(convert(varchar,convert(date, dateadd(day, @i, @maxdate))) , 'Sync')\n\ninsert into @temp\nselect @nextdate\ninsert into @temp\nselect @syncdate\n\nset @i = @i + 1\n\nend\n\n\nselect * from @temp",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "OMSSqlServerTable",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "inv det and inv mst pull into temp table",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Max Date from inv Master",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Max Date from inv Master').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Copy Data Inv Det",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [
										{
											"name": "Source",
											"value": "sales/@{item()}/inv_det"
										},
										{
											"name": "Destination",
											"value": "dbo.inv_det_temp"
										}
									],
									"typeProperties": {
										"source": {
											"type": "ParquetSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"sink": {
											"type": "SqlServerSink",
											"tableOption": "autoCreate"
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "InvDetInputFile",
											"type": "DatasetReference",
											"parameters": {
												"FolderName": {
													"value": "@item().dates",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "inv_det_tempOutputTable",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								},
								{
									"name": "Copy data Inv Mst",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [
										{
											"name": "Source",
											"value": "sales/FullLoad/inv_mst"
										},
										{
											"name": "Destination",
											"value": "dbo.inv_mst_temp"
										}
									],
									"typeProperties": {
										"source": {
											"type": "ParquetSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"sink": {
											"type": "SqlServerSink",
											"tableOption": "autoCreate"
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "InvMstInputFile",
											"type": "DatasetReference",
											"parameters": {
												"FolderName": {
													"value": "@item().dates",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "inv_mst_tempOutputTable",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								}
							]
						}
					},
					{
						"name": "SP update upsert key column",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "inv det and inv mst pull into temp table",
								"dependencyConditions": [
									"Succeeded",
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[usp_Incremnetal_Load_Update_coumn_upsert_key]"
						},
						"linkedServiceName": {
							"referenceName": "Data360MSSQL",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "SP copy data temp to staging inv mst",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "SP update upsert key column",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[usp_Upsert_logic_inv_mst]"
						},
						"linkedServiceName": {
							"referenceName": "Data360MSSQL",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "SP copy data temp to staging inv det",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "SP update upsert key column",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[usp_Upsert_logic_inv_det]"
						},
						"linkedServiceName": {
							"referenceName": "Data360MSSQL",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "SP truncate staging and temp table",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[usp_Incremental_Load_inv_truncate_temp_tables]"
						},
						"linkedServiceName": {
							"referenceName": "Data360MSSQL",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Copy data invoice master",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "SP copy data temp to staging inv mst",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "SP copy data temp to staging inv det",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "select c_br_code, c_order_id, d_date, c_item_code, [Net Sales]\n,concat(c_br_code,'/', c_order_id, '/', c_item_code) as brcode_orderid_itemcode_key \n,Cost_value,\nconvert(decimal(18,2),([Net Sales]- Cost_value)) as Margin_value,\nconverT(decimal(18,2),(Spl_Disc_Amt + Disc_Amt)) as Tot_Disc_Amt,\ngetDate() as Load_DateTime\nfrom\n(select c_br_code, c_order_id, d_date,\n\tcase when c_item_code = 'COD' then null\n\t\t\telse c_item_code end as c_item_code\n\t\t\t, [Net Sales],Cost_value,Spl_Disc_Amt,Disc_Amt,Load_DateTime    from\n(select\tinv_mst_staging.c_br_code,\n\t\tinv_mst_staging.c_order_id,\n\t\tinv_mst_staging.d_date,\n\t\tinv_det_staging.c_item_code,\n\t\tsum(inv_det_staging.n_taxable_amt) as \"Net Sales\",\n\t\tconvert(decimal(18,2),((n_qty + n_qty1)* n_eff_pur_rate)) as Cost_value,\n\n\t\tcase when inv_det_staging.n_gst_enabled=1 then ((n_mrp *n_qty) -(n_sale_rate*n_qty))\n\t\t\t when ((n_mrp *n_qty) -(n_sale_rate*n_qty)) < 1 then 0 else ((n_mrp *n_qty) -(n_sale_rate*n_qty)) end as Spl_Disc_Amt,\n\n\t\tisnull((n_sale_rate*(n_qty + n_qty1)) * (case when n_non_taxable_ret =0 then 0 else n_disc_rs /n_non_taxable_ret end),0) + convert(decimal(18,2),((n_sale_rate*(n_qty + n_qty1))*n_disc_per/100)) as Disc_Amt,\n\t\tgetDate() as Load_DateTime\n\t\t\nfrom\t\tdbo.inv_det_staging\ninner join \n\t\t\tdbo.inv_mst_staging\n\t\t\ton \n\t\t\tdbo.inv_det_staging.c_br_code = inv_mst_staging.c_br_code\n\tand inv_det_staging.c_prefix = inv_mst_staging.c_prefix\n\tand inv_det_staging.c_year = inv_mst_staging.c_year\n\tand inv_det_staging.n_srno = inv_mst_staging.n_srno\nwhere inv_mst_staging.c_patient IS NOT NULL and  inv_mst_staging.c_cust_code = 'GC93' or inv_mst_staging.c_cust_code = 'GC793' or inv_mst_staging.c_cust_code = '751' and inv_det_staging.n_cancel_flag = 0 \ngroup by inv_mst_staging.c_br_code, \n        inv_mst_staging.c_order_id,\n\t\tinv_mst_staging.d_date,\n\t\t inv_det_staging.c_item_code,\n\t\t n_qty,n_qty1,n_eff_pur_rate,\n\t\t inv_det_staging.n_gst_enabled,n_mrp,n_sale_rate,n_non_taxable_ret,n_disc_rs,n_disc_per) a) b\n",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "SqlServerSink",
								"tableOption": "autoCreate"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "c_br_code",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "c_br_code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "c_order_id",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "c_order_id",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "d_date",
											"type": "DateTime",
											"physicalType": "datetime2"
										},
										"sink": {
											"name": "d_date",
											"type": "DateTime",
											"physicalType": "datetime2"
										}
									},
									{
										"source": {
											"name": "c_item_code",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "c_item_code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Net Sales",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "Net Sales",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "brcode_orderid_itemcode_key",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "brcode_orderid_itemcode_key",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Cost_value",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 2,
											"precision": 18
										},
										"sink": {
											"name": "Cost_value",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "Margin_value",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 2,
											"precision": 18
										},
										"sink": {
											"name": "Margin_value",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "Tot_Disc_Amt",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 2,
											"precision": 18
										},
										"sink": {
											"name": "Tot_Disc_Amt",
											"type": "Double",
											"physicalType": "float"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "InvDetandInvMstInputTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Inv_Master",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Copy data Inv_Mst_Staging to Inv_Mst",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Copy data invoice master",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "SqlServerSink",
								"tableOption": "autoCreate"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "InvMstOutputTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "InvMstTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Copy data Inv_Det_Staging to Inv_Det",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Copy data invoice master",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "SqlServerSink",
								"tableOption": "autoCreate"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "InvDetOutputTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "InvDetTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"Folders": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "Invoice"
				},
				"annotations": [],
				"lastPublishTime": "2022-02-23T11:49:43Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/OMSSqlServerTable')]",
				"[concat(variables('factoryId'), '/linkedServices/Data360MSSQL')]",
				"[concat(variables('factoryId'), '/datasets/InvDetandInvMstInputTable')]",
				"[concat(variables('factoryId'), '/datasets/Inv_Master')]",
				"[concat(variables('factoryId'), '/datasets/InvMstOutputTable')]",
				"[concat(variables('factoryId'), '/datasets/InvMstTable')]",
				"[concat(variables('factoryId'), '/datasets/InvDetOutputTable')]",
				"[concat(variables('factoryId'), '/datasets/InvDetTable')]",
				"[concat(variables('factoryId'), '/datasets/InvDetInputFile')]",
				"[concat(variables('factoryId'), '/datasets/inv_det_tempOutputTable')]",
				"[concat(variables('factoryId'), '/datasets/InvMstInputFile')]",
				"[concat(variables('factoryId'), '/datasets/inv_mst_tempOutputTable')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/update inv mst')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.FolderNameArray",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Copy data Inv Mst",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ParquetSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"sink": {
											"type": "SqlServerSink",
											"tableOption": "autoCreate"
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "InvMstInputFile",
											"type": "DatasetReference",
											"parameters": {
												"FolderName": {
													"value": "@item()",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "inv_mst_tempOutputTable",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"FolderNameArray": {
						"type": "array",
						"defaultValue": [
							"2021-11-01",
							"2021-11-01Sync"
						]
					}
				},
				"folder": {
					"name": "Invoice"
				},
				"annotations": [],
				"lastPublishTime": "2022-02-23T11:49:43Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/InvMstInputFile')]",
				"[concat(variables('factoryId'), '/datasets/inv_mst_tempOutputTable')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/000andGC95InputFile')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage_LS",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "000andGC95WelltoHlth",
						"folderPath": "FullLoad",
						"container": "ecogreen"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage_LS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/000andGC95WelltoHlthOutPutTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Data360MSSQL",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "000andGC95WelltoHlth"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Data360MSSQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Amazon_Item_OutPutTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Data360MSSQL",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "Amazon_OMS_Order_Details_staging"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Data360MSSQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AppFlyerDataConversionMySqlTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OMSMySql1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "MySqlTable",
				"schema": [],
				"typeProperties": {
					"tableName": "`appsflyer_data_conversion`"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OMSMySql1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AppsFlyerConnectionDataSqlServerTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Data360MSSQL",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "appflyers_data_conversion_staging"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Data360MSSQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AppsflyerIDs_TempTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Data360MSSQL",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "temp_appsflyerIDs"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Data360MSSQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/B2BWelltoHlthOutputTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Data360MSSQL",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "B2CWelltoHlth"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Data360MSSQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/B2CWelltoHlthInputFile')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage_LS",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "B2CWelltoHlth",
						"folderPath": "FullLoad",
						"container": "ecogreen"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "c_br_code",
						"type": "UTF8"
					},
					{
						"name": "c_year",
						"type": "UTF8"
					},
					{
						"name": "c_prefix",
						"type": "UTF8"
					},
					{
						"name": "n_tran_no",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_act_code",
						"type": "UTF8"
					},
					{
						"name": "d_date",
						"type": "INT96"
					},
					{
						"name": "n_amount",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_opp_act_code",
						"type": "UTF8"
					},
					{
						"name": "c_ref_br_code",
						"type": "UTF8"
					},
					{
						"name": "c_ref_no",
						"type": "UTF8"
					},
					{
						"name": "d_chq_date",
						"type": "INT96"
					},
					{
						"name": "c_remark",
						"type": "UTF8"
					},
					{
						"name": "c_act_name",
						"type": "UTF8"
					},
					{
						"name": "c_opp_act_name",
						"type": "UTF8"
					},
					{
						"name": "c_add_1",
						"type": "UTF8"
					},
					{
						"name": "c_add_2",
						"type": "UTF8"
					},
					{
						"name": "c_add_3",
						"type": "UTF8"
					},
					{
						"name": "c_city",
						"type": "UTF8"
					},
					{
						"name": "n_ref_srno",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_order_no",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "recon_dt",
						"type": "INT96"
					},
					{
						"name": "chq_pass",
						"type": "INT32"
					},
					{
						"name": "multi_act_name",
						"type": "UTF8"
					},
					{
						"name": "Debit",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "credit",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage_LS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CRMCustomerExcelFile')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage_LS",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "excl_bzn_customers.csv",
						"container": "crm"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage_LS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CRMCustomerInputFile')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage_LS1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "excl_bzn_customers",
						"folderPath": "extratablesfull1/CRM_extratables",
						"container": "summary"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "customer_id",
						"type": "INT32"
					},
					{
						"name": "active_status",
						"type": "UTF8"
					},
					{
						"name": "first_name",
						"type": "UTF8"
					},
					{
						"name": "last_name",
						"type": "UTF8"
					},
					{
						"name": "gender",
						"type": "UTF8"
					},
					{
						"name": "mobile",
						"type": "UTF8"
					},
					{
						"name": "dnd_status",
						"type": "UTF8"
					},
					{
						"name": "date_whitelisted",
						"type": "INT96"
					},
					{
						"name": "blacklist",
						"type": "INT32"
					},
					{
						"name": "email",
						"type": "UTF8"
					},
					{
						"name": "dob",
						"type": "INT96"
					},
					{
						"name": "date_aniversary",
						"type": "INT96"
					},
					{
						"name": "creating_business_id",
						"type": "INT32"
					},
					{
						"name": "customer_source",
						"type": "UTF8"
					},
					{
						"name": "address",
						"type": "UTF8"
					},
					{
						"name": "city",
						"type": "UTF8"
					},
					{
						"name": "state",
						"type": "UTF8"
					},
					{
						"name": "zipcode",
						"type": "UTF8"
					},
					{
						"name": "date_email_verified",
						"type": "INT96"
					},
					{
						"name": "email_verified",
						"type": "UTF8"
					},
					{
						"name": "date_created",
						"type": "INT96"
					},
					{
						"name": "date_updated",
						"type": "INT96"
					},
					{
						"name": "created_by",
						"type": "UTF8"
					},
					{
						"name": "updated_by",
						"type": "UTF8"
					},
					{
						"name": "facebookId",
						"type": "UTF8"
					},
					{
						"name": "pointsEarned",
						"type": "INT32"
					},
					{
						"name": "pointsRedeemed",
						"type": "INT32"
					},
					{
						"name": "image",
						"type": "UTF8"
					},
					{
						"name": "role_id",
						"type": "INT32"
					},
					{
						"name": "password",
						"type": "UTF8"
					},
					{
						"name": "facebook_id",
						"type": "UTF8"
					},
					{
						"name": "date_last_login",
						"type": "INT96"
					},
					{
						"name": "account_type",
						"type": "UTF8"
					},
					{
						"name": "registration_ip",
						"type": "UTF8"
					},
					{
						"name": "comments",
						"type": "UTF8"
					},
					{
						"name": "password_sent",
						"type": "UTF8"
					},
					{
						"name": "date_deactivated",
						"type": "INT96"
					},
					{
						"name": "gstn_no",
						"type": "UTF8"
					},
					{
						"name": "pan_no",
						"type": "UTF8"
					},
					{
						"name": "latitude",
						"type": "UTF8"
					},
					{
						"name": "longitude",
						"type": "UTF8"
					},
					{
						"name": "blocked_date",
						"type": "INT96"
					},
					{
						"name": "lotalty_tier",
						"type": "UTF8"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage_LS1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CRMCustomerOutPutTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Data360MSSQL",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "excl_bzn_customers"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Data360MSSQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ChannelMaster_OutPutTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Data360MSSQL",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [
					{
						"name": "channel_id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "channel_name",
						"type": "nvarchar"
					},
					{
						"name": "channel",
						"type": "nvarchar"
					},
					{
						"name": "api_key",
						"type": "nvarchar"
					},
					{
						"name": "cart_discount_channel",
						"type": "nvarchar"
					},
					{
						"name": "discount",
						"type": "nvarchar"
					},
					{
						"name": "channel_status",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "OMS_Channel_Master"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Data360MSSQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Ds_Ecogreenv2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "EG21",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SybaseTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/EG21')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/EAStockInputFile')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage_LS1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "stock",
						"folderPath": "FullLoad",
						"container": "inventory"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "c_br_code",
						"type": "UTF8"
					},
					{
						"name": "c_item_code",
						"type": "UTF8"
					},
					{
						"name": "c_batch_no",
						"type": "UTF8"
					},
					{
						"name": "n_bal_qty",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_sch_bal_qty",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_ref_br_code",
						"type": "UTF8"
					},
					{
						"name": "c_ref_year",
						"type": "UTF8"
					},
					{
						"name": "c_ref_prefix",
						"type": "UTF8"
					},
					{
						"name": "n_ref_srno",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_dc_inv_qty",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_dc_pur_qty",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_hold_qty",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "d_ldate",
						"type": "INT96"
					},
					{
						"name": "t_ltime",
						"type": "INT96"
					},
					{
						"name": "c_grn_br_code",
						"type": "UTF8"
					},
					{
						"name": "c_grn_year",
						"type": "UTF8"
					},
					{
						"name": "c_grn_prefix",
						"type": "UTF8"
					},
					{
						"name": "n_grn_srno",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_store_track_qty",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage_LS1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/EAStockOutPutTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Data360MSSQL",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "Ex_Stock_Staging_temp"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Data360MSSQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/EAStock_InputFile')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage_LS1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"FolderName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "stock",
						"folderPath": {
							"value": "@dataset().FolderName",
							"type": "Expression"
						},
						"container": "inventory"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "c_br_code",
						"type": "UTF8"
					},
					{
						"name": "c_item_code",
						"type": "UTF8"
					},
					{
						"name": "c_batch_no",
						"type": "UTF8"
					},
					{
						"name": "n_bal_qty",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_sch_bal_qty",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_ref_br_code",
						"type": "UTF8"
					},
					{
						"name": "c_ref_year",
						"type": "UTF8"
					},
					{
						"name": "c_ref_prefix",
						"type": "UTF8"
					},
					{
						"name": "n_ref_srno",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_dc_inv_qty",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_dc_pur_qty",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_hold_qty",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "d_ldate",
						"type": "INT96"
					},
					{
						"name": "t_ltime",
						"type": "INT96"
					},
					{
						"name": "c_grn_br_code",
						"type": "UTF8"
					},
					{
						"name": "c_grn_year",
						"type": "UTF8"
					},
					{
						"name": "c_grn_prefix",
						"type": "UTF8"
					},
					{
						"name": "n_grn_srno",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_store_track_qty",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage_LS1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/EAStock_MstOutPutTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Data360MSSQL",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "Ex_Stock_Mst_Staging"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Data360MSSQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/EGImageOutPutTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Data360MSSQL",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "Eco_Green_Image"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Data360MSSQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/EG_Inv_Det_OutPutFile')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage_LS",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "EG_Inv_Det",
						"container": "ecogreensale"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage_LS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/EG_Inv_Det_OutPutTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Data360MSSQL",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "EG_Inv_Det1"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Data360MSSQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/EG_Inv_Mst_OutPutFile')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage_LS",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "EG_Inv_Mst",
						"container": "ecogreensale"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage_LS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/EG_Order_Det_OutPutTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Data360MSSQL",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "EG_Order_Det"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Data360MSSQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/EG_Order_det_OutPutFile')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage_LS",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "EG_Order_Det",
						"folderPath": "FullLoad",
						"container": "ecogreen"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage_LS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/EG_Pur_Det_OutPutFile')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage_LS",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "EG_Pur_Det",
						"folderPath": "FullLoad",
						"container": "ecogreen"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage_LS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/EG_Pur_Det_OutPutTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Data360MSSQL",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "EG_Pur_Det"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Data360MSSQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/EG_inv_Det_InputFile')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "wellness_cold",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "inv_det",
						"folderPath": "2019_20",
						"container": "ecogreen"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "c_br_code",
						"type": "UTF8"
					},
					{
						"name": "c_year",
						"type": "UTF8"
					},
					{
						"name": "c_prefix",
						"type": "UTF8"
					},
					{
						"name": "n_srno",
						"type": "UTF8"
					},
					{
						"name": "n_seq",
						"type": "UTF8"
					},
					{
						"name": "d_date",
						"type": "UTF8"
					},
					{
						"name": "c_item_code",
						"type": "UTF8"
					},
					{
						"name": "c_batch_no",
						"type": "UTF8"
					},
					{
						"name": "n_qty",
						"type": "UTF8"
					},
					{
						"name": "n_sch_qty",
						"type": "UTF8"
					},
					{
						"name": "n_sch_disc",
						"type": "UTF8"
					},
					{
						"name": "n_sale_rate",
						"type": "UTF8"
					},
					{
						"name": "n_disc_per",
						"type": "UTF8"
					},
					{
						"name": "n_st_per",
						"type": "UTF8"
					},
					{
						"name": "n_cst_per",
						"type": "UTF8"
					},
					{
						"name": "n_rst_per",
						"type": "UTF8"
					},
					{
						"name": "n_tax_suffer",
						"type": "UTF8"
					},
					{
						"name": "n_amount",
						"type": "UTF8"
					},
					{
						"name": "c_mf_code",
						"type": "UTF8"
					},
					{
						"name": "n_2nd_sale",
						"type": "UTF8"
					},
					{
						"name": "n_sp_sale_flag",
						"type": "UTF8"
					},
					{
						"name": "n_cancel_flag",
						"type": "UTF8"
					},
					{
						"name": "d_ldate",
						"type": "UTF8"
					},
					{
						"name": "n_vaton",
						"type": "UTF8"
					},
					{
						"name": "n_tax_on_sch_qty",
						"type": "UTF8"
					},
					{
						"name": "n_vatts_mrp",
						"type": "UTF8"
					},
					{
						"name": "n_mrp",
						"type": "UTF8"
					},
					{
						"name": "c_remark",
						"type": "UTF8"
					},
					{
						"name": "n_tax_amt",
						"type": "UTF8"
					},
					{
						"name": "n_free_tax_amt",
						"type": "UTF8"
					},
					{
						"name": "c_print_batch",
						"type": "UTF8"
					},
					{
						"name": "d_print_exp_dt",
						"type": "UTF8"
					},
					{
						"name": "n_eff_pur_rate",
						"type": "UTF8"
					},
					{
						"name": "n_shift",
						"type": "UTF8"
					},
					{
						"name": "c_remark2",
						"type": "UTF8"
					},
					{
						"name": "n_points",
						"type": "UTF8"
					},
					{
						"name": "t_ltime",
						"type": "UTF8"
					},
					{
						"name": "n_req_qty",
						"type": "UTF8"
					},
					{
						"name": "n_allow_points",
						"type": "UTF8"
					},
					{
						"name": "n_qty1",
						"type": "UTF8"
					},
					{
						"name": "n_card_reverse_dis",
						"type": "UTF8"
					},
					{
						"name": "c_dc_br_code",
						"type": "UTF8"
					},
					{
						"name": "c_dc_year",
						"type": "UTF8"
					},
					{
						"name": "c_dc_prefix",
						"type": "UTF8"
					},
					{
						"name": "n_dc_srno",
						"type": "UTF8"
					},
					{
						"name": "n_dc_seq",
						"type": "UTF8"
					},
					{
						"name": "n_remind_days",
						"type": "UTF8"
					},
					{
						"name": "n_claim",
						"type": "UTF8"
					},
					{
						"name": "c_order_br_code",
						"type": "UTF8"
					},
					{
						"name": "c_order_year",
						"type": "UTF8"
					},
					{
						"name": "c_order_prefix",
						"type": "UTF8"
					},
					{
						"name": "n_order_no",
						"type": "UTF8"
					},
					{
						"name": "n_order_seq",
						"type": "UTF8"
					},
					{
						"name": "n_claim_per",
						"type": "UTF8"
					},
					{
						"name": "d_print_mfg_dt",
						"type": "UTF8"
					},
					{
						"name": "c_ord_br_code",
						"type": "UTF8"
					},
					{
						"name": "c_ord_year",
						"type": "UTF8"
					},
					{
						"name": "c_ord_prefix",
						"type": "UTF8"
					},
					{
						"name": "n_ord_srno",
						"type": "UTF8"
					},
					{
						"name": "n_ord_seq",
						"type": "UTF8"
					},
					{
						"name": "c_cont_code",
						"type": "UTF8"
					},
					{
						"name": "n_verified_qty",
						"type": "UTF8"
					},
					{
						"name": "n_claim_qty",
						"type": "UTF8"
					},
					{
						"name": "n_claim_val",
						"type": "UTF8"
					},
					{
						"name": "c_coupon_code",
						"type": "UTF8"
					},
					{
						"name": "c_coupon_srno",
						"type": "UTF8"
					},
					{
						"name": "n_store_track",
						"type": "UTF8"
					},
					{
						"name": "c_claim_reason",
						"type": "UTF8"
					},
					{
						"name": "c_barcode",
						"type": "UTF8"
					},
					{
						"name": "c_sman_code",
						"type": "UTF8"
					},
					{
						"name": "c_godown_code",
						"type": "UTF8"
					},
					{
						"name": "n_stk_serial",
						"type": "UTF8"
					},
					{
						"name": "c_bom_code",
						"type": "UTF8"
					},
					{
						"name": "n_bom_seq",
						"type": "UTF8"
					},
					{
						"name": "n_item_tax_suffer",
						"type": "UTF8"
					},
					{
						"name": "n_item_vatts_flag",
						"type": "UTF8"
					},
					{
						"name": "n_item_vatts_mrp",
						"type": "UTF8"
					},
					{
						"name": "n_item_tax_on_sch_qty",
						"type": "UTF8"
					},
					{
						"name": "c_tray_Code",
						"type": "UTF8"
					},
					{
						"name": "n_marketplace_flag",
						"type": "UTF8"
					},
					{
						"name": "c_quot_no",
						"type": "UTF8"
					},
					{
						"name": "n_ts_value",
						"type": "UTF8"
					},
					{
						"name": "n_pick_seq",
						"type": "UTF8"
					},
					{
						"name": "n_share_disc",
						"type": "UTF8"
					},
					{
						"name": "n_ord_rate",
						"type": "UTF8"
					},
					{
						"name": "n_ord_rate_diff",
						"type": "UTF8"
					},
					{
						"name": "c_integration_code",
						"type": "UTF8"
					},
					{
						"name": "n_update_stock",
						"type": "UTF8"
					},
					{
						"name": "n_adjust",
						"type": "UTF8"
					},
					{
						"name": "n_currency",
						"type": "UTF8"
					},
					{
						"name": "n_exchange_rate",
						"type": "UTF8"
					},
					{
						"name": "n_gst_enabled",
						"type": "UTF8"
					},
					{
						"name": "n_from_gst_type",
						"type": "UTF8"
					},
					{
						"name": "c_hsn_sac_code",
						"type": "UTF8"
					},
					{
						"name": "n_cgst_per",
						"type": "UTF8"
					},
					{
						"name": "n_cgst_amt",
						"type": "UTF8"
					},
					{
						"name": "n_sgst_per",
						"type": "UTF8"
					},
					{
						"name": "n_sgst_amt",
						"type": "UTF8"
					},
					{
						"name": "n_igst_per",
						"type": "UTF8"
					},
					{
						"name": "n_igst_amt",
						"type": "UTF8"
					},
					{
						"name": "n_cess_per",
						"type": "UTF8"
					},
					{
						"name": "n_cess_amt",
						"type": "UTF8"
					},
					{
						"name": "n_pk",
						"type": "UTF8"
					},
					{
						"name": "n_to_gst_type",
						"type": "UTF8"
					},
					{
						"name": "c_gst_code",
						"type": "UTF8"
					},
					{
						"name": "n_taxable_amt",
						"type": "UTF8"
					},
					{
						"name": "n_inv_qty",
						"type": "UTF8"
					},
					{
						"name": "n_ref_seq",
						"type": "UTF8"
					},
					{
						"name": "n_ord_pk",
						"type": "UTF8"
					},
					{
						"name": "n_dc_pk",
						"type": "UTF8"
					},
					{
						"name": "n_purord_pk",
						"type": "UTF8"
					},
					{
						"name": "n_std_disc_per",
						"type": "UTF8"
					},
					{
						"name": "n_total_discount",
						"type": "UTF8"
					},
					{
						"name": "n_hold_flag",
						"type": "UTF8"
					},
					{
						"name": "n_print_seq",
						"type": "UTF8"
					},
					{
						"name": "n_eb_seq",
						"type": "UTF8"
					},
					{
						"name": "c_eb_tray_Code",
						"type": "UTF8"
					},
					{
						"name": "c_eb_doc_no",
						"type": "UTF8"
					},
					{
						"name": "c_supp_code",
						"type": "UTF8"
					},
					{
						"name": "n_eb_load",
						"type": "UTF8"
					},
					{
						"name": "n_add_cess_per",
						"type": "UTF8"
					},
					{
						"name": "n_add_cess_rev_excl",
						"type": "UTF8"
					},
					{
						"name": "n_cogs_amt",
						"type": "UTF8"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/wellness_cold')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/EcoGreenItemMaster')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage_LS",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "EcoGreen_Item_Master.csv",
						"container": "ecogreen"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage_LS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Ecogreen_Itemmaster_OutputFile')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage_LS",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "EcoGreen_Item_Master",
						"folderPath": "FullLoad",
						"container": "ecogreen"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage_LS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ExcelInputTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Data360MSSQL",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [
					{
						"name": "id",
						"type": "nvarchar"
					},
					{
						"name": "userid",
						"type": "nvarchar"
					},
					{
						"name": "customer_id",
						"type": "nvarchar"
					},
					{
						"name": "customer_id_merge",
						"type": "nvarchar"
					},
					{
						"name": "afid",
						"type": "nvarchar"
					},
					{
						"name": "os",
						"type": "nvarchar"
					},
					{
						"name": "osversion",
						"type": "nvarchar"
					},
					{
						"name": "event_name",
						"type": "nvarchar"
					},
					{
						"name": "media_source",
						"type": "nvarchar"
					},
					{
						"name": "order_source",
						"type": "nvarchar"
					},
					{
						"name": "final_source",
						"type": "nvarchar"
					},
					{
						"name": "city",
						"type": "nvarchar"
					},
					{
						"name": "postal_code",
						"type": "nvarchar"
					},
					{
						"name": "platform",
						"type": "nvarchar"
					},
					{
						"name": "install_time_selected_timezone",
						"type": "nvarchar"
					},
					{
						"name": "updated",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "event_time",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "event_time_selected_timezone",
						"type": "nvarchar"
					},
					{
						"name": "gcm_date_created",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "created",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "OMS_appsflyer2"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Data360MSSQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ExcelOutPutFile')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage_LS",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"FileName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@concat(dataset().FileName,'.csv')",
							"type": "Expression"
						},
						"container": "exceldumpfiles"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage_LS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/FillRate_InputFile')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage_LS",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "FillRate.csv",
						"container": "fillrate"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\"",
					"MaxRowSize": 2000000
				},
				"schema": [
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage_LS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/FillRate_OutPutTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Data360MSSQL",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "FillRate_Staging"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Data360MSSQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/GdnDetInputFile')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage_LS1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"FolderName": {
						"type": "string",
						"defaultValue": "2021-08-13"
					}
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "gdn_det",
						"folderPath": {
							"value": "@dataset().FolderName",
							"type": "Expression"
						},
						"container": "inventory"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage_LS1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/GdnDetOutputTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Data360MSSQL",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "gdn_det_staging"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Data360MSSQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/GdnMstInputFile')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage_LS1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"FolderName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "gdn_mst",
						"folderPath": {
							"value": "@dataset().FolderName",
							"type": "Expression"
						},
						"container": "inventory"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage_LS1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/GdnMstOutputTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Data360MSSQL",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "gdn_mst"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Data360MSSQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/GrnDetInputFile')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage_LS1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"FolderName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "grn_det",
						"folderPath": {
							"value": "@dataset().FolderName",
							"type": "Expression"
						},
						"container": "inventory"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage_LS1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/GrnDetOutputTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Data360MSSQL",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "grn_det"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Data360MSSQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/GrnMstInputFile')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage_LS1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"FolderName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "grn_mst",
						"folderPath": {
							"value": "@dataset().FolderName",
							"type": "Expression"
						},
						"container": "inventory"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage_LS1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/GrnMstOutputTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Data360MSSQL",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "grn_mst"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Data360MSSQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/InvDetInputFile')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage_LS1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"FolderName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "inv_det",
						"folderPath": {
							"value": "@dataset().FolderName",
							"type": "Expression"
						},
						"container": "sales"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "c_br_code",
						"type": "UTF8"
					},
					{
						"name": "c_year",
						"type": "UTF8"
					},
					{
						"name": "c_prefix",
						"type": "UTF8"
					},
					{
						"name": "n_srno",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_seq",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "d_date",
						"type": "INT96"
					},
					{
						"name": "c_item_code",
						"type": "UTF8"
					},
					{
						"name": "c_batch_no",
						"type": "UTF8"
					},
					{
						"name": "n_qty",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_sch_qty",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_sch_disc",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_sale_rate",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_disc_per",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_st_per",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_cst_per",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_rst_per",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_tax_suffer",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_amount",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_mf_code",
						"type": "UTF8"
					},
					{
						"name": "n_2nd_sale",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_sp_sale_flag",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_cancel_flag",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "d_ldate",
						"type": "INT96"
					},
					{
						"name": "n_vaton",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_tax_on_sch_qty",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_vatts_mrp",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_mrp",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_remark",
						"type": "UTF8"
					},
					{
						"name": "n_tax_amt",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_free_tax_amt",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_print_batch",
						"type": "UTF8"
					},
					{
						"name": "d_print_exp_dt",
						"type": "INT96"
					},
					{
						"name": "n_eff_pur_rate",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_shift",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_remark2",
						"type": "UTF8"
					},
					{
						"name": "n_points",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "t_ltime",
						"type": "INT96"
					},
					{
						"name": "n_req_qty",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_allow_points",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_qty1",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_card_reverse_dis",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_dc_br_code",
						"type": "UTF8"
					},
					{
						"name": "c_dc_year",
						"type": "UTF8"
					},
					{
						"name": "c_dc_prefix",
						"type": "UTF8"
					},
					{
						"name": "n_dc_srno",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_dc_seq",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_remind_days",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_claim",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_order_br_code",
						"type": "UTF8"
					},
					{
						"name": "c_order_year",
						"type": "UTF8"
					},
					{
						"name": "c_order_prefix",
						"type": "UTF8"
					},
					{
						"name": "n_order_no",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_order_seq",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_claim_per",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "d_print_mfg_dt",
						"type": "INT96"
					},
					{
						"name": "c_ord_br_code",
						"type": "UTF8"
					},
					{
						"name": "c_ord_year",
						"type": "UTF8"
					},
					{
						"name": "c_ord_prefix",
						"type": "UTF8"
					},
					{
						"name": "n_ord_srno",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_ord_seq",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_cont_code",
						"type": "UTF8"
					},
					{
						"name": "n_verified_qty",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_claim_qty",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_claim_val",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_coupon_code",
						"type": "UTF8"
					},
					{
						"name": "c_coupon_srno",
						"type": "UTF8"
					},
					{
						"name": "n_store_track",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_claim_reason",
						"type": "UTF8"
					},
					{
						"name": "c_barcode",
						"type": "UTF8"
					},
					{
						"name": "c_sman_code",
						"type": "UTF8"
					},
					{
						"name": "c_godown_code",
						"type": "UTF8"
					},
					{
						"name": "n_stk_serial",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_bom_code",
						"type": "UTF8"
					},
					{
						"name": "n_bom_seq",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_item_tax_suffer",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_item_vatts_flag",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_item_vatts_mrp",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_item_tax_on_sch_qty",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_tray_Code",
						"type": "UTF8"
					},
					{
						"name": "n_marketplace_flag",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_quot_no",
						"type": "UTF8"
					},
					{
						"name": "n_ts_value",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_pick_seq",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_share_disc",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_ord_rate",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_ord_rate_diff",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_integration_code",
						"type": "UTF8"
					},
					{
						"name": "n_update_stock",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_adjust",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_currency",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_exchange_rate",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_gst_enabled",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_from_gst_type",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_hsn_sac_code",
						"type": "UTF8"
					},
					{
						"name": "n_cgst_per",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_cgst_amt",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_sgst_per",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_sgst_amt",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_igst_per",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_igst_amt",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_cess_per",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_cess_amt",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_pk",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_to_gst_type",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_gst_code",
						"type": "UTF8"
					},
					{
						"name": "n_taxable_amt",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_inv_qty",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_ref_seq",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_ord_pk",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_dc_pk",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_purord_pk",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_std_disc_per",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_total_discount",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_hold_flag",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_print_seq",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_eb_seq",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_eb_tray_Code",
						"type": "UTF8"
					},
					{
						"name": "c_eb_doc_no",
						"type": "UTF8"
					},
					{
						"name": "c_supp_code",
						"type": "UTF8"
					},
					{
						"name": "n_eb_load",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_add_cess_per",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_add_cess_rev_excl",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_cogs_amt",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage_LS1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/InvDetOutputTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Data360MSSQL",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "inv_det_staging"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Data360MSSQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/InvDetTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Data360MSSQL",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "Inv_Det"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Data360MSSQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/InvDetandInvMstInputTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Data360MSSQL",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Data360MSSQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/InvMstInputFile')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage_LS1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"FolderName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "inv_mst",
						"folderPath": {
							"value": "@dataset().FolderName",
							"type": "Expression"
						},
						"container": "sales"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "c_br_code",
						"type": "UTF8"
					},
					{
						"name": "c_year",
						"type": "UTF8"
					},
					{
						"name": "c_prefix",
						"type": "UTF8"
					},
					{
						"name": "n_srno",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "d_date",
						"type": "INT96"
					},
					{
						"name": "t_time",
						"type": "INT96"
					},
					{
						"name": "c_sman_code",
						"type": "UTF8"
					},
					{
						"name": "c_dman_code",
						"type": "UTF8"
					},
					{
						"name": "c_cust_code",
						"type": "UTF8"
					},
					{
						"name": "c_patient",
						"type": "UTF8"
					},
					{
						"name": "c_doctor_code",
						"type": "UTF8"
					},
					{
						"name": "c_doctor_name",
						"type": "UTF8"
					},
					{
						"name": "n_total",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_st",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_cst",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_rst",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_disc_rs",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_discount",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_other_charge",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_tax_suffer",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_discount_per",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_taxable_ret",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_non_taxable_ret",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_credit_act",
						"type": "UTF8"
					},
					{
						"name": "n_round_off",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_counter_sale",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_cnt_no",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_ok",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_cancel_flag",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "d_ldate",
						"type": "INT96"
					},
					{
						"name": "n_vaton",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_order_year",
						"type": "UTF8"
					},
					{
						"name": "c_order_prefix",
						"type": "UTF8"
					},
					{
						"name": "n_order_no",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_approved",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_shift",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_ipno",
						"type": "UTF8"
					},
					{
						"name": "c_remark",
						"type": "UTF8"
					},
					{
						"name": "c_patient_details",
						"type": "UTF8"
					},
					{
						"name": "c_card_bank_code",
						"type": "UTF8"
					},
					{
						"name": "c_ref_no",
						"type": "UTF8"
					},
					{
						"name": "c_user",
						"type": "UTF8"
					},
					{
						"name": "n_points",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_point_redeem",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_point_value",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_pcbc_charge",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "t_ltime",
						"type": "INT96"
					},
					{
						"name": "d_remind_date",
						"type": "INT96"
					},
					{
						"name": "n_card_reverse_dis",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_doctor_office_code",
						"type": "UTF8"
					},
					{
						"name": "c_mobile",
						"type": "UTF8"
					},
					{
						"name": "d_ref_dt",
						"type": "INT96"
					},
					{
						"name": "n_day_seq",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_lr_no",
						"type": "UTF8"
					},
					{
						"name": "d_lr_date",
						"type": "INT96"
					},
					{
						"name": "d_stock_sent_date",
						"type": "INT96"
					},
					{
						"name": "n_cases",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_credit_days",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_admin_settlement",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_terms_code",
						"type": "UTF8"
					},
					{
						"name": "c_reg_no",
						"type": "UTF8"
					},
					{
						"name": "c_email",
						"type": "UTF8"
					},
					{
						"name": "c_mr_code",
						"type": "UTF8"
					},
					{
						"name": "c_transport_code",
						"type": "UTF8"
					},
					{
						"name": "n_urgent",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_modiuser",
						"type": "UTF8"
					},
					{
						"name": "n_tender_amt",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_token_no",
						"type": "UTF8"
					},
					{
						"name": "c_coupon_code",
						"type": "UTF8"
					},
					{
						"name": "c_coupon_srno",
						"type": "UTF8"
					},
					{
						"name": "n_store_track",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_ip_br_code",
						"type": "UTF8"
					},
					{
						"name": "c_tran_type",
						"type": "UTF8"
					},
					{
						"name": "c_currency_code",
						"type": "UTF8"
					},
					{
						"name": "n_exchange_rate",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_computer_name",
						"type": "UTF8"
					},
					{
						"name": "c_sys_user",
						"type": "UTF8"
					},
					{
						"name": "c_sys_ip",
						"type": "UTF8"
					},
					{
						"name": "n_multi_payment",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_pay_code1",
						"type": "UTF8"
					},
					{
						"name": "n_pay_amt1",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_pay_ac_code1",
						"type": "UTF8"
					},
					{
						"name": "c_pay_code2",
						"type": "UTF8"
					},
					{
						"name": "n_pay_amt2",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_pay_ac_code2",
						"type": "UTF8"
					},
					{
						"name": "c_pay_code3",
						"type": "UTF8"
					},
					{
						"name": "n_pay_amt3",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_pay_ac_code3",
						"type": "UTF8"
					},
					{
						"name": "c_pay_code4",
						"type": "UTF8"
					},
					{
						"name": "n_pay_amt4",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_pay_ac_code4",
						"type": "UTF8"
					},
					{
						"name": "c_pay_code5",
						"type": "UTF8"
					},
					{
						"name": "n_pay_amt5",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_pay_ac_code5",
						"type": "UTF8"
					},
					{
						"name": "n_marketplace_flag",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_trader_code",
						"type": "UTF8"
					},
					{
						"name": "n_trader_comm_total",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_trader_charge_total",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_trader_charge1_total",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_inter_pur",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_order_id",
						"type": "UTF8"
					},
					{
						"name": "c_debit_act_code",
						"type": "UTF8"
					},
					{
						"name": "c_vat_act_code",
						"type": "UTF8"
					},
					{
						"name": "c_purord_no",
						"type": "UTF8"
					},
					{
						"name": "n_share_disc",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_integration_code",
						"type": "UTF8"
					},
					{
						"name": "c_cst_act_code",
						"type": "UTF8"
					},
					{
						"name": "c_st_act_code",
						"type": "UTF8"
					},
					{
						"name": "c_amt_act_code",
						"type": "UTF8"
					},
					{
						"name": "c_disc_act_code",
						"type": "UTF8"
					},
					{
						"name": "c_discrs_act_code",
						"type": "UTF8"
					},
					{
						"name": "c_oth_act_code",
						"type": "UTF8"
					},
					{
						"name": "n_update_stock",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "t_from_time",
						"type": "INT96"
					},
					{
						"name": "t_to_time",
						"type": "INT96"
					},
					{
						"name": "c_note",
						"type": "UTF8"
					},
					{
						"name": "n_point_factor",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_gst_enabled",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_from_gst_no",
						"type": "UTF8"
					},
					{
						"name": "n_from_gst_type",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_to_gst_no",
						"type": "UTF8"
					},
					{
						"name": "n_sale_type",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_cgst_act_code",
						"type": "UTF8"
					},
					{
						"name": "n_cgst_amt",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_sgst_act_code",
						"type": "UTF8"
					},
					{
						"name": "n_sgst_amt",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_igst_act_code",
						"type": "UTF8"
					},
					{
						"name": "n_igst_amt",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_cess_act_code",
						"type": "UTF8"
					},
					{
						"name": "n_cess_amt",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_state_code",
						"type": "UTF8"
					},
					{
						"name": "c_eway_bill_no",
						"type": "UTF8"
					},
					{
						"name": "n_pk",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_to_gst_type",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_print_format_code",
						"type": "UTF8"
					},
					{
						"name": "c_cess_rev_act_code",
						"type": "UTF8"
					},
					{
						"name": "c_cgst_rev_act_code",
						"type": "UTF8"
					},
					{
						"name": "c_sgst_rev_act_code",
						"type": "UTF8"
					},
					{
						"name": "c_igst_rev_act_code",
						"type": "UTF8"
					},
					{
						"name": "n_service_chg",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_port_code",
						"type": "UTF8"
					},
					{
						"name": "n_taxable_amt",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_pending_points",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_pay_ac1_flag",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_pay_ac2_flag",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_pay_ac3_flag",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_pay_ac4_flag",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_pay_ac5_flag",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "d_eway_bill_date",
						"type": "INT96"
					},
					{
						"name": "c_tran_gst_no",
						"type": "UTF8"
					},
					{
						"name": "n_dist_km",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_service_amt_act_code",
						"type": "UTF8"
					},
					{
						"name": "n_ip_det_seq",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_aadhar_no",
						"type": "UTF8"
					},
					{
						"name": "c_doctor_address",
						"type": "UTF8"
					},
					{
						"name": "c_act_sman_code",
						"type": "UTF8"
					},
					{
						"name": "n_advance_amt",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_ord_br_code",
						"type": "UTF8"
					},
					{
						"name": "c_ord_prefix",
						"type": "UTF8"
					},
					{
						"name": "c_ord_year",
						"type": "UTF8"
					},
					{
						"name": "n_ord_no",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_ord_pk",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_add_cess_amt",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_add_cess_act_code",
						"type": "UTF8"
					},
					{
						"name": "n_cogs_amt",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_inventory_act_code",
						"type": "UTF8"
					},
					{
						"name": "c_cogst_act_code",
						"type": "UTF8"
					},
					{
						"name": "c_admin_br_code",
						"type": "UTF8"
					},
					{
						"name": "n_tcs_per",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_tcs_taxable_amt",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_tcs_amt",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage_LS1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/InvMstOutputTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Data360MSSQL",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "inv_mst_staging"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Data360MSSQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/InvMstTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Data360MSSQL",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "Inv_Mst"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Data360MSSQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Inv_Master')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Data360MSSQL",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "Inv_Master"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Data360MSSQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/InventoryFolder')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage_LS1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "inventory"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage_LS1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ItemMasterOutPutTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Data360MSSQL",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "Eco_Green_Item_Master"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Data360MSSQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ItemMstInputFile')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage_LS1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "item_mst",
						"folderPath": "ecogreen/2021",
						"container": "master"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "c_code",
						"type": "UTF8"
					},
					{
						"name": "c_name",
						"type": "UTF8"
					},
					{
						"name": "c_sh_name",
						"type": "UTF8"
					},
					{
						"name": "c_barcode",
						"type": "UTF8"
					},
					{
						"name": "c_pack_code",
						"type": "UTF8"
					},
					{
						"name": "c_cat_code",
						"type": "UTF8"
					},
					{
						"name": "c_mfac_code",
						"type": "UTF8"
					},
					{
						"name": "n_qty_per_box",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_group_code",
						"type": "UTF8"
					},
					{
						"name": "n_inc_exc_tax",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_cont_code",
						"type": "UTF8"
					},
					{
						"name": "n_schedule",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_note",
						"type": "UTF8"
					},
					{
						"name": "d_ldate",
						"type": "INT96"
					},
					{
						"name": "d_adate",
						"type": "INT96"
					},
					{
						"name": "c_createuser",
						"type": "UTF8"
					},
					{
						"name": "n_audited",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_predefined",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_disease_cat_code",
						"type": "UTF8"
					},
					{
						"name": "c_pack_type_code",
						"type": "UTF8"
					},
					{
						"name": "n_min_sale_qty",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_schedule_code",
						"type": "UTF8"
					},
					{
						"name": "c_brand_name",
						"type": "UTF8"
					},
					{
						"name": "c_strength",
						"type": "UTF8"
					},
					{
						"name": "n_max_dis_per",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "t_ltime",
						"type": "INT96"
					},
					{
						"name": "n_self_barcode_req",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_min_margin_per",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_max_margin_per",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_lock_po",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_edi_code",
						"type": "UTF8"
					},
					{
						"name": "n_service_item",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_storage_code",
						"type": "UTF8"
					},
					{
						"name": "c_storage_care_code",
						"type": "UTF8"
					},
					{
						"name": "n_block_exp_print",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_gen_item",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_web_img_link",
						"type": "UTF8"
					},
					{
						"name": "n_inner_pack_lot",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_outer_pack_lot",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_uom",
						"type": "UTF8"
					},
					{
						"name": "n_item_length",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_item_width",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_item_height",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_item_weight",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_inner_length",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_inner_width",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_inner_height",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_inter_weight",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_outer_length",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_outer_width",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_outer_height",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_outer_weight",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_batch_no_rule",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_exp_dt_rule",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_shelf_life",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_full_name",
						"type": "UTF8"
					},
					{
						"name": "n_lock",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_modiuser",
						"type": "UTF8"
					},
					{
						"name": "n_price_control_product",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_max_mrp",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_barcode_label",
						"type": "UTF8"
					},
					{
						"name": "n_rate_item_batchwise",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_brand_code",
						"type": "UTF8"
					},
					{
						"name": "c_cat_log_no",
						"type": "UTF8"
					},
					{
						"name": "n_type",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_cost_centre",
						"type": "UTF8"
					},
					{
						"name": "n_stk_serial",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_qc_note1",
						"type": "UTF8"
					},
					{
						"name": "c_qc_note2",
						"type": "UTF8"
					},
					{
						"name": "c_external_code",
						"type": "UTF8"
					},
					{
						"name": "n_salable_online",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_successive_item",
						"type": "UTF8"
					},
					{
						"name": "n_mrp",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_ucode",
						"type": "UTF8"
					},
					{
						"name": "n_sp_sale_qty_from",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_non_returnable_item",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_points",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_hsn_sac_code",
						"type": "UTF8"
					},
					{
						"name": "n_hsn_sac_flag",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_discount_rate",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_gst_code",
						"type": "UTF8"
					},
					{
						"name": "n_exclude_alternate",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_brand_seq",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_origin_code",
						"type": "UTF8"
					},
					{
						"name": "n_mrp_box",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_ptr_box",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_ptr",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_consumption",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage_LS1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ItemMstOutputTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Data360MSSQL",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "item_mst"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Data360MSSQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Ledger_DatewiseOutputFile')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage_LS",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"FileName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().FileName",
							"type": "Expression"
						},
						"container": "ecogreen"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage_LS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MFMTimeframe')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage_LS",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "ETA_Bucket.csv",
						"container": "mfmtimeframe"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "MFM_timeframe",
						"type": "String"
					},
					{
						"name": "10Hrs-16 Hrs",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage_LS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MRP_API_JSON_File')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage_LS",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "MRP_Variance_JSONFile.txt",
						"folderPath": "FullLoad",
						"container": "ecogreen"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage_LS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MRP_Variance_CSVInputFile')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage_LS",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "FullLoad",
						"container": "ecogreen"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage_LS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MRP_Variance_JSONFile')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage_LS",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "MRP_Variance_JSONFile.txt",
						"folderPath": "FullLoad",
						"container": "ecogreen"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"sku": {
							"type": "string"
						},
						"host": {
							"type": "string"
						},
						"smart_price": {
							"type": "integer"
						},
						"cost": {
							"type": "integer"
						},
						"price": {
							"type": "integer"
						},
						"discount": {
							"type": "integer"
						},
						"availability": {
							"type": "string"
						},
						"url": {
							"type": "string"
						},
						"id": {
							"type": "string"
						},
						"last_updated_at": {
							"type": "string"
						},
						"competitors": {
							"type": "array"
						},
						"status": {
							"type": "string"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage_LS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MRP_Variance_OutputFile')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage_LS",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "MRPVariance",
						"folderPath": "FullLoad",
						"container": "ecogreen"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage_LS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Mega_Menu_OutputTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Data360MSSQL",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "Mega_Menu_Staging"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Data360MSSQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/OMSMySqlTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OMSMySql1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "MySqlTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OMSMySql1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/OMSSqlServerTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Data360MSSQL",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "OMS_Order_Details"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Data360MSSQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/OMS_CancelOrder_Outputtable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Data360MSSQL",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "OMS_Cancel_Order_Details"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Data360MSSQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/OrderDetInputFile')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage_LS1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"FolderName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "order_det",
						"folderPath": {
							"value": "@dataset().FolderName",
							"type": "Expression"
						},
						"container": "purchase"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "c_br_code",
						"type": "UTF8"
					},
					{
						"name": "c_year",
						"type": "UTF8"
					},
					{
						"name": "c_prefix",
						"type": "UTF8"
					},
					{
						"name": "n_srno",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_seq",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "d_date",
						"type": "INT96"
					},
					{
						"name": "c_item_code",
						"type": "UTF8"
					},
					{
						"name": "n_qty",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_ref_br_code",
						"type": "UTF8"
					},
					{
						"name": "n_cancel_flag",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "d_ldate",
						"type": "INT96"
					},
					{
						"name": "n_pack_qty",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_sch_qty",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_pack_sch_qty",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_rate",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_remark",
						"type": "UTF8"
					},
					{
						"name": "n_post",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_disc_per",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_min_qty",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_max_qty",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_bal_qty",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_shift",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_sp_rate",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_supp_code",
						"type": "UTF8"
					},
					{
						"name": "c_cust_code",
						"type": "UTF8"
					},
					{
						"name": "n_quote_rate",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_quote_mrp",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_quote_mrp_flag",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "t_ltime",
						"type": "INT96"
					},
					{
						"name": "n_min_margin_per",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_mrp",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_sale_qty",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_tran_count",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_sp_qty",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_list_id",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_ord_supp_code",
						"type": "UTF8"
					},
					{
						"name": "c_batch_no",
						"type": "UTF8"
					},
					{
						"name": "c_rack",
						"type": "UTF8"
					},
					{
						"name": "n_org_pack_qty",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_store_track",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_tax_per",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_old_order_br_code",
						"type": "UTF8"
					},
					{
						"name": "c_old_order_year",
						"type": "UTF8"
					},
					{
						"name": "c_old_order_prefix",
						"type": "UTF8"
					},
					{
						"name": "n_old_order_no",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_old_order_seq",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_ptr",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_auto_flag",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "d_delivery_date",
						"type": "INT96"
					},
					{
						"name": "c_indent_br_code",
						"type": "UTF8"
					},
					{
						"name": "c_indent_year",
						"type": "UTF8"
					},
					{
						"name": "c_indent_prefix",
						"type": "UTF8"
					},
					{
						"name": "n_indent_srno",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_indent_seq",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_currency",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_exchange_rate",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_pk",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_igst_per",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_sgst_per",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_cgst_per",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_cess_per",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_fulfillment_flag",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_dc_pk",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_dc_seq",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_indent_pk",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_supp_alt_item_code",
						"type": "UTF8"
					},
					{
						"name": "c_hsn_sac_code",
						"type": "UTF8"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage_LS1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/OrderDetOutputTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Data360MSSQL",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "order_det_staging"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Data360MSSQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/OrderLogs_OutputTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Data360MSSQL",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "OMS_Order_Logs"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Data360MSSQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/OrderMstInputFile')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage_LS1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"FolderName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "order_mst",
						"folderPath": {
							"value": "@dataset().FolderName",
							"type": "Expression"
						},
						"container": "purchase"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "c_br_Code",
						"type": "UTF8"
					},
					{
						"name": "c_year",
						"type": "UTF8"
					},
					{
						"name": "c_prefix",
						"type": "UTF8"
					},
					{
						"name": "n_srno",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "d_date",
						"type": "INT96"
					},
					{
						"name": "c_ref_br_code",
						"type": "UTF8"
					},
					{
						"name": "c_cust_code",
						"type": "UTF8"
					},
					{
						"name": "n_detail",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_total",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_cancel_flag",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "d_ldate",
						"type": "INT96"
					},
					{
						"name": "n_post",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_type",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_user",
						"type": "UTF8"
					},
					{
						"name": "c_remark",
						"type": "UTF8"
					},
					{
						"name": "n_shift",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_reason_code",
						"type": "UTF8"
					},
					{
						"name": "t_ltime",
						"type": "INT96"
					},
					{
						"name": "n_status",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_approved_by",
						"type": "UTF8"
					},
					{
						"name": "t_time",
						"type": "INT96"
					},
					{
						"name": "n_sale_data_days",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_supp_cust_code",
						"type": "UTF8"
					},
					{
						"name": "c_order_type_code",
						"type": "UTF8"
					},
					{
						"name": "n_cnt_no",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_terms_code",
						"type": "UTF8"
					},
					{
						"name": "n_debit_days",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_store_track",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_tran_type",
						"type": "UTF8"
					},
					{
						"name": "c_currency_code",
						"type": "UTF8"
					},
					{
						"name": "n_exchange_rate",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_inter_pur",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_computer_name",
						"type": "UTF8"
					},
					{
						"name": "c_sys_user",
						"type": "UTF8"
					},
					{
						"name": "c_sys_ip",
						"type": "UTF8"
					},
					{
						"name": "t_valid_till",
						"type": "INT96"
					},
					{
						"name": "t_valid_till_old",
						"type": "INT96"
					},
					{
						"name": "c_modiuser",
						"type": "UTF8"
					},
					{
						"name": "c_dc_div",
						"type": "UTF8"
					},
					{
						"name": "c_mfac_code",
						"type": "UTF8"
					},
					{
						"name": "d_delivery_date",
						"type": "INT96"
					},
					{
						"name": "n_urgent",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_note",
						"type": "UTF8"
					},
					{
						"name": "c_web_order_id",
						"type": "UTF8"
					},
					{
						"name": "c_web_order_status",
						"type": "UTF8"
					},
					{
						"name": "n_pk",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_print_format_code",
						"type": "UTF8"
					},
					{
						"name": "n_fulfillment_flag",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage_LS1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/OrderMstOutputTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Data360MSSQL",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "order_mst_staging"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Data360MSSQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/OrderStatusInputFile')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage_LS",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "order_status_master.csv",
						"container": "master"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage_LS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/OrderStatusOutputTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Data360MSSQL",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "Order_Status_Master"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Data360MSSQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ProductMasterOutputTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Data360MSSQL",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "Eco_Green_Product_Master"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Data360MSSQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Product_OutPutTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Data360MSSQL",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [
					{
						"name": "product_id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "rating_num",
						"type": "int",
						"precision": 10
					},
					{
						"name": "rating_total",
						"type": "nvarchar"
					},
					{
						"name": "rating_user",
						"type": "nvarchar"
					},
					{
						"name": "product_rating",
						"type": "nvarchar"
					},
					{
						"name": "product_popularity",
						"type": "int",
						"precision": 10
					},
					{
						"name": "product_sales",
						"type": "int",
						"precision": 10
					},
					{
						"name": "title",
						"type": "nvarchar"
					},
					{
						"name": "product_alias",
						"type": "nvarchar"
					},
					{
						"name": "is_main_product",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "main_product_id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "hsn_code",
						"type": "nvarchar"
					},
					{
						"name": "added_by",
						"type": "nvarchar"
					},
					{
						"name": "vendor_id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "category",
						"type": "int",
						"precision": 10
					},
					{
						"name": "erp_category",
						"type": "nvarchar"
					},
					{
						"name": "category_head",
						"type": "nvarchar"
					},
					{
						"name": "category_class",
						"type": "nvarchar"
					},
					{
						"name": "description",
						"type": "nvarchar"
					},
					{
						"name": "sub_category",
						"type": "int",
						"precision": 10
					},
					{
						"name": "num_of_imgs",
						"type": "nvarchar"
					},
					{
						"name": "sale_price",
						"type": "decimal",
						"precision": 20,
						"scale": 2
					},
					{
						"name": "offer_price",
						"type": "decimal",
						"precision": 10,
						"scale": 2
					},
					{
						"name": "crm_price",
						"type": "decimal",
						"precision": 10,
						"scale": 2
					},
					{
						"name": "price_to_retailer",
						"type": "decimal",
						"precision": 10,
						"scale": 2
					},
					{
						"name": "mrp",
						"type": "decimal",
						"precision": 10,
						"scale": 2
					},
					{
						"name": "old_mrp",
						"type": "decimal",
						"precision": 10,
						"scale": 2
					},
					{
						"name": "median_mrp",
						"type": "decimal",
						"precision": 10,
						"scale": 2
					},
					{
						"name": "purchase_price",
						"type": "decimal",
						"precision": 20,
						"scale": 2
					},
					{
						"name": "shipping_cost",
						"type": "float",
						"precision": 15
					},
					{
						"name": "add_timestamp",
						"type": "int",
						"precision": 10
					},
					{
						"name": "tag",
						"type": "nvarchar"
					},
					{
						"name": "is_free_product",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "status",
						"type": "nvarchar"
					},
					{
						"name": "front_image",
						"type": "nvarchar"
					},
					{
						"name": "brand_id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "current_stock",
						"type": "int",
						"precision": 10
					},
					{
						"name": "warehouse_id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "supplier_id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "unit",
						"type": "nvarchar"
					},
					{
						"name": "volumetric_weight",
						"type": "decimal",
						"precision": 10,
						"scale": 2
					},
					{
						"name": "deadweight",
						"type": "decimal",
						"precision": 10,
						"scale": 2
					},
					{
						"name": "additional_fields",
						"type": "nvarchar"
					},
					{
						"name": "number_of_view",
						"type": "int",
						"precision": 10
					},
					{
						"name": "discount",
						"type": "float",
						"precision": 15
					},
					{
						"name": "discount_per_code",
						"type": "nvarchar"
					},
					{
						"name": "discount_type",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "discount_start_date",
						"type": "datetime2",
						"scale": 0
					},
					{
						"name": "discount_end_date",
						"type": "datetime2",
						"scale": 0
					},
					{
						"name": "tax",
						"type": "nvarchar"
					},
					{
						"name": "tax_type",
						"type": "nvarchar"
					},
					{
						"name": "cgst",
						"type": "float",
						"precision": 15
					},
					{
						"name": "cgst_type",
						"type": "nvarchar"
					},
					{
						"name": "sgst",
						"type": "float",
						"precision": 15
					},
					{
						"name": "sgst_type",
						"type": "nvarchar"
					},
					{
						"name": "igst",
						"type": "float",
						"precision": 15
					},
					{
						"name": "igst_type",
						"type": "nvarchar"
					},
					{
						"name": "voucher_class_id",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "color_code",
						"type": "nvarchar"
					},
					{
						"name": "options",
						"type": "nvarchar"
					},
					{
						"name": "main_image",
						"type": "nvarchar"
					},
					{
						"name": "update_time",
						"type": "nvarchar"
					},
					{
						"name": "requirements",
						"type": "nvarchar"
					},
					{
						"name": "logo",
						"type": "nvarchar"
					},
					{
						"name": "video",
						"type": "nvarchar"
					},
					{
						"name": "notify_id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "notify_email",
						"type": "nvarchar"
					},
					{
						"name": "last_viewed",
						"type": "int",
						"precision": 10
					},
					{
						"name": "created_format",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "product_group_id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "is_active",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "all_product_published",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "izoleap_product_code",
						"type": "nvarchar"
					},
					{
						"name": "product_variant_name",
						"type": "nvarchar"
					},
					{
						"name": "stock_master_count",
						"type": "nvarchar"
					},
					{
						"name": "unit_price",
						"type": "decimal",
						"precision": 20,
						"scale": 2
					},
					{
						"name": "reorder_level",
						"type": "nvarchar"
					},
					{
						"name": "is_available",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "is_perishable",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "only_at_store",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "expiry_duration",
						"type": "nvarchar"
					},
					{
						"name": "expiry_date",
						"type": "datetime2",
						"scale": 0
					},
					{
						"name": "manufacture_date",
						"type": "datetime2",
						"scale": 0
					},
					{
						"name": "sku_code",
						"type": "nvarchar"
					},
					{
						"name": "product_code",
						"type": "nvarchar"
					},
					{
						"name": "product_brief",
						"type": "nvarchar"
					},
					{
						"name": "adjancey_tag",
						"type": "nvarchar"
					},
					{
						"name": "rank_tag",
						"type": "nvarchar"
					},
					{
						"name": "loose_sales_allowed",
						"type": "nvarchar"
					},
					{
						"name": "shopby_brand",
						"type": "nvarchar"
					},
					{
						"name": "shopby_condition",
						"type": "nvarchar"
					},
					{
						"name": "vendor_type",
						"type": "int",
						"precision": 10
					},
					{
						"name": "molecule",
						"type": "nvarchar"
					},
					{
						"name": "strength_type",
						"type": "int",
						"precision": 10
					},
					{
						"name": "vegetarian_type",
						"type": "nvarchar"
					},
					{
						"name": "rx_type",
						"type": "nvarchar"
					},
					{
						"name": "schedule_type",
						"type": "nvarchar"
					},
					{
						"name": "max_quantity",
						"type": "int",
						"precision": 10
					},
					{
						"name": "item_groupname",
						"type": "nvarchar"
					},
					{
						"name": "item_fullname",
						"type": "nvarchar"
					},
					{
						"name": "item_code",
						"type": "nvarchar"
					},
					{
						"name": "web_",
						"type": "nvarchar"
					},
					{
						"name": "branch_code",
						"type": "nvarchar"
					},
					{
						"name": "app_category_code",
						"type": "nvarchar"
					},
					{
						"name": "web_category_code",
						"type": "nvarchar"
					},
					{
						"name": "instore_category_code",
						"type": "nvarchar"
					},
					{
						"name": "manfacturer_id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ean",
						"type": "nvarchar"
					},
					{
						"name": "max_mrp",
						"type": "decimal",
						"precision": 10,
						"scale": 2
					},
					{
						"name": "min_mrp",
						"type": "decimal",
						"precision": 10,
						"scale": 2
					},
					{
						"name": "maxdiscount_percentage",
						"type": "decimal",
						"precision": 10,
						"scale": 2
					},
					{
						"name": "discount_value",
						"type": "real",
						"precision": 7
					},
					{
						"name": "gst_master_id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "gst_master_name",
						"type": "nvarchar"
					},
					{
						"name": "gst_code",
						"type": "nvarchar"
					},
					{
						"name": "inclusive_exclusive_tax",
						"type": "int",
						"precision": 10
					},
					{
						"name": "pack_id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "form_id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "packing_form",
						"type": "nvarchar"
					},
					{
						"name": "form",
						"type": "nvarchar"
					},
					{
						"name": "pack_size",
						"type": "nvarchar"
					},
					{
						"name": "seller_code",
						"type": "nvarchar"
					},
					{
						"name": "seller_name",
						"type": "nvarchar"
					},
					{
						"name": "seller_id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "schedule_name",
						"type": "nvarchar"
					},
					{
						"name": "min_sale_qty",
						"type": "int",
						"precision": 10
					},
					{
						"name": "storage_name",
						"type": "nvarchar"
					},
					{
						"name": "packaging_form_code",
						"type": "nvarchar"
					},
					{
						"name": "succesive_item",
						"type": "nvarchar"
					},
					{
						"name": "hsn_sac_code",
						"type": "nvarchar"
					},
					{
						"name": "hsn_sac_name",
						"type": "nvarchar"
					},
					{
						"name": "pims_nfs_remark",
						"type": "nvarchar"
					},
					{
						"name": "erp_nfs_remark",
						"type": "nvarchar"
					},
					{
						"name": "if_audited",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "is_chronic",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "nasp",
						"type": "nvarchar"
					},
					{
						"name": "drop_shipment",
						"type": "nvarchar"
					},
					{
						"name": "returnable",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "returnable_days",
						"type": "int",
						"precision": 10
					},
					{
						"name": "dpco",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "propaganda",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "hsn_sac_status",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "pims_status",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "erp_status",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "pims_nfs",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "erp_nfs",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "is_fragile",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "shelf_life_duration",
						"type": "nvarchar"
					},
					{
						"name": "barcode_value",
						"type": "nvarchar"
					},
					{
						"name": "main_product_name",
						"type": "nvarchar"
					},
					{
						"name": "varient_name",
						"type": "nvarchar"
					},
					{
						"name": "batch_id",
						"type": "nvarchar"
					},
					{
						"name": "created_on",
						"type": "datetime2",
						"scale": 0
					},
					{
						"name": "update_on",
						"type": "nvarchar"
					},
					{
						"name": "created_by",
						"type": "nvarchar"
					},
					{
						"name": "updated_by",
						"type": "nvarchar"
					},
					{
						"name": "manufacturer_name",
						"type": "nvarchar"
					},
					{
						"name": "manufacturer_code",
						"type": "nvarchar"
					},
					{
						"name": "wellness_exclusive",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "freebie",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "banned_product",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "banned_product_remark",
						"type": "nvarchar"
					},
					{
						"name": "pack_code",
						"type": "nvarchar"
					},
					{
						"name": "pack_type_code",
						"type": "nvarchar"
					},
					{
						"name": "flavor_code",
						"type": "nvarchar"
					},
					{
						"name": "brand_code",
						"type": "nvarchar"
					},
					{
						"name": "pack_type",
						"type": "nvarchar"
					},
					{
						"name": "if_po_locked",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "zedc_tag",
						"type": "nvarchar"
					},
					{
						"name": "pharmacist_info_dgt",
						"type": "nvarchar"
					},
					{
						"name": "item_category_code",
						"type": "nvarchar"
					},
					{
						"name": "expiry_format_code",
						"type": "int",
						"precision": 10
					},
					{
						"name": "service_item",
						"type": "nvarchar"
					},
					{
						"name": "inner_pack_lot",
						"type": "nvarchar"
					},
					{
						"name": "outer_pack_lot",
						"type": "nvarchar"
					},
					{
						"name": "unit_per_packcode",
						"type": "int",
						"precision": 10
					},
					{
						"name": "purchase_margin",
						"type": "decimal",
						"precision": 6,
						"scale": 2
					},
					{
						"name": "min_margin_percentage",
						"type": "decimal",
						"precision": 5,
						"scale": 2
					},
					{
						"name": "max_margin_percentage",
						"type": "decimal",
						"precision": 5,
						"scale": 2
					},
					{
						"name": "item_groupcode",
						"type": "nvarchar"
					},
					{
						"name": "disease_category_code",
						"type": "nvarchar"
					},
					{
						"name": "disease_categeory_name",
						"type": "nvarchar"
					},
					{
						"name": "strength",
						"type": "nvarchar"
					},
					{
						"name": "batchnotype",
						"type": "nvarchar"
					},
					{
						"name": "batch_no",
						"type": "nvarchar"
					},
					{
						"name": "batchexpiry_date",
						"type": "datetime2",
						"scale": 0
					},
					{
						"name": "pack_type_name",
						"type": "nvarchar"
					},
					{
						"name": "storage_code",
						"type": "nvarchar"
					},
					{
						"name": "storage_care_code",
						"type": "nvarchar"
					},
					{
						"name": "storage_care_name",
						"type": "nvarchar"
					},
					{
						"name": "block_expiry_print",
						"type": "int",
						"precision": 10
					},
					{
						"name": "edi_code",
						"type": "nvarchar"
					},
					{
						"name": "note",
						"type": "nvarchar"
					},
					{
						"name": "is_predefined",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "is_lock",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "premanent_lock",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "item_lock",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "is_online",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "country_origin",
						"type": "nvarchar"
					},
					{
						"name": "country_id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "rx_wsp",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "out_of_stock",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "is_otc",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "concerns",
						"type": "nvarchar"
					},
					{
						"name": "item_weight",
						"type": "decimal",
						"precision": 5,
						"scale": 2
					},
					{
						"name": "interweightount",
						"type": "decimal",
						"precision": 5,
						"scale": 2
					},
					{
						"name": "content_type_code",
						"type": "nvarchar"
					},
					{
						"name": "content_type_name",
						"type": "nvarchar"
					},
					{
						"name": "n_mrp_box",
						"type": "decimal",
						"precision": 10,
						"scale": 2
					},
					{
						"name": "storage_flag",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "is_deleted",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "is_360",
						"type": "int",
						"precision": 10
					},
					{
						"name": "is_approved",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "is_search_promoted",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "is_viewed",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "rejected_reason",
						"type": "nvarchar"
					},
					{
						"name": "is_erp_updated",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "is_mrp_updated",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "is_pims_updated",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "product_set",
						"type": "int",
						"precision": 10
					},
					{
						"name": "product_set_id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "prescription_class",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "discount_class",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "optional_class",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "aws_asin_code",
						"type": "nvarchar"
					},
					{
						"name": "aws_qty",
						"type": "int",
						"precision": 10
					},
					{
						"name": "is_etaflag_updated",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "is_restricted",
						"type": "smallint",
						"precision": 5
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "OMS_Product"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Data360MSSQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Pur_Det_InputFile')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage_LS1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "pur_det",
						"folderPath": "FullLoad",
						"container": "purchase"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "c_br_code",
						"type": "UTF8"
					},
					{
						"name": "c_year",
						"type": "UTF8"
					},
					{
						"name": "c_prefix",
						"type": "UTF8"
					},
					{
						"name": "n_srno",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_seq",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "d_date",
						"type": "INT96"
					},
					{
						"name": "c_item_code",
						"type": "UTF8"
					},
					{
						"name": "c_batch_no",
						"type": "UTF8"
					},
					{
						"name": "n_qty",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_sch_qty",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_mrp",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_pur_rate",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_sale_rate",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "d_expiry_date",
						"type": "INT96"
					},
					{
						"name": "n_new",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_mf_code",
						"type": "UTF8"
					},
					{
						"name": "n_qty_per_box",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_item_disc",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_inc_exc_tax",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_tax_suffer",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_add_val",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_sch_disc",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_eff_pur_rate",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_st_per",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_st_amt",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_post",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_cancel_flag",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "d_ldate",
						"type": "INT96"
					},
					{
						"name": "n_vaton",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_vatts_mrp",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_tax_on_sch_qty",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_shift",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_excise",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_bill_disc_per",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_sp_rate",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_supp_code",
						"type": "UTF8"
					},
					{
						"name": "c_cust_code",
						"type": "UTF8"
					},
					{
						"name": "n_quote_rate",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_quote_mrp",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_quote_mrp_flag",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_ptr",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_tax_amt",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_free_tax_amt",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_vat_diff",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "t_ltime",
						"type": "INT96"
					},
					{
						"name": "n_repl_flag",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_mfac_sh_name",
						"type": "UTF8"
					},
					{
						"name": "c_rack",
						"type": "UTF8"
					},
					{
						"name": "c_order_br_code",
						"type": "UTF8"
					},
					{
						"name": "c_order_year",
						"type": "UTF8"
					},
					{
						"name": "c_order_prefix",
						"type": "UTF8"
					},
					{
						"name": "n_order_no",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_order_seq",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_item_tax_suffer",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_batch_note",
						"type": "UTF8"
					},
					{
						"name": "n_qty1",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_stax_per",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_stax_amt",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_dc_year",
						"type": "UTF8"
					},
					{
						"name": "c_dc_prefix",
						"type": "UTF8"
					},
					{
						"name": "n_dc_srno",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_dc_seq",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_print_batch",
						"type": "UTF8"
					},
					{
						"name": "d_print_exp_dt",
						"type": "INT96"
					},
					{
						"name": "c_temp_rack",
						"type": "UTF8"
					},
					{
						"name": "c_return_reason_code",
						"type": "UTF8"
					},
					{
						"name": "n_item_vatts_flag",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_item_vatts_mrp",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_item_tax_on_sch_qty",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_barcode",
						"type": "UTF8"
					},
					{
						"name": "c_brand_name",
						"type": "UTF8"
					},
					{
						"name": "c_mfac_name",
						"type": "UTF8"
					},
					{
						"name": "d_mfg_dt",
						"type": "INT96"
					},
					{
						"name": "d_print_mfg_dt",
						"type": "INT96"
					},
					{
						"name": "n_bill_qty",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_bill_sch_qty",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_recpt_qty",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_inc_pur_rate",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_octroi_rate",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_bill_pur_rate",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_bill_item_disc",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_bill_sch_disc",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_ptr_update",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_import_type",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_loose_qty",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_sch_loose_qty",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_bill_loose_qty",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_bill_sch_loose_qty",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_recpt_loose_qty",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_currency",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_exchange_rate",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_store_track",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_custom_duty",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_other_exp",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_supp_barcode",
						"type": "UTF8"
					},
					{
						"name": "n_gr_check",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_godown_code",
						"type": "UTF8"
					},
					{
						"name": "n_stk_serial",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_qc_per1",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_qc_per2",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_quot_no",
						"type": "UTF8"
					},
					{
						"name": "n_marketplace_flag",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_ts_value",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_claim_per",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_claim_on",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_claim_val",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_integration_code",
						"type": "UTF8"
					},
					{
						"name": "c_tray_code",
						"type": "UTF8"
					},
					{
						"name": "c_doc_no",
						"type": "UTF8"
					},
					{
						"name": "n_eb_load",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_eb_seq",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_gst_enabled",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_from_gst_type",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_hsn_sac_code",
						"type": "UTF8"
					},
					{
						"name": "n_cgst_per",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_cgst_amt",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_sgst_per",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_sgst_amt",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_igst_per",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_igst_amt",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_cess_per",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_cess_amt",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_pk",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_to_gst_type",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_gst_code",
						"type": "UTF8"
					},
					{
						"name": "n_taxable_amt",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_pur_br_code",
						"type": "UTF8"
					},
					{
						"name": "c_pur_prefix",
						"type": "UTF8"
					},
					{
						"name": "c_pur_year",
						"type": "UTF8"
					},
					{
						"name": "n_pur_pk",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_pur_srno",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "d_pur_bill_date",
						"type": "INT96"
					},
					{
						"name": "n_ord_pk",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_bill_mrp",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_dc_pk",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_verified_qty",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_indent_pk",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_remark",
						"type": "UTF8"
					},
					{
						"name": "c_pur_act_code",
						"type": "UTF8"
					},
					{
						"name": "c_pur_ref_no",
						"type": "UTF8"
					},
					{
						"name": "d_pur_ref_date",
						"type": "INT96"
					},
					{
						"name": "n_cogs_amt",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_type",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_dbnt_br_code",
						"type": "UTF8"
					},
					{
						"name": "c_dbnt_year",
						"type": "UTF8"
					},
					{
						"name": "c_dbnt_prefix",
						"type": "UTF8"
					},
					{
						"name": "n_dbnt_srno",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_dbnt_seq",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_po_qty",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage_LS1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Pur_Det_OutPutTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Data360MSSQL",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "Pur_Det"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Data360MSSQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/RL_HelthTech_GC238_Credit')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage_LS",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "HelthTech_GC238_Credit",
						"container": "reconciliationledgers"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage_LS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/RL_HelthTech_JO_JV_751_701_Credit')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage_LS",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "HelthTech_JO_JV_751_701_Credit",
						"container": "reconciliationledgers"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage_LS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/RL_HelthTech_Purchase_751_Credit')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage_LS",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "HelthTech_Purchase_751_Credit",
						"container": "reconciliationledgers"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage_LS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/RL_HelthTech_Sale_751_701_Debit')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage_LS",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "HelthTech_Sale_751_701_Debit",
						"container": "reconciliationledgers"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage_LS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/RL_HelthTech_Sale_GC793_Debit')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage_LS",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "HelthTech_Sale_GC793_Debit",
						"container": "reconciliationledgers"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage_LS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/RL_HelthTech_Sale_Return_751_701_Credit')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage_LS",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "HelthTech_Sale_Return_751_701_Credit",
						"container": "reconciliationledgers"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage_LS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/RL_Medicare_S14278_Debit')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage_LS",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "Medicare_S14278_Debit",
						"container": "reconciliationledgers"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage_LS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/RL_Medicare_Sale_751_Debit')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage_LS",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "Medicare_Sale_751_Debit",
						"container": "reconciliationledgers"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage_LS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/RestResource_MRP_API')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "RestService_MRP_API",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/RestService_MRP_API')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SQL_EG_Inv_Det')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Data360MSSQL",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "EG_Inv_Det"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Data360MSSQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SQL_EG_Inv_Mst')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Data360MSSQL",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "EG_Inv_Mst"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Data360MSSQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SQL_HelthTech_GC238_Credit')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Data360MSSQL",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "HelthTech_GC238_Credit_Staging"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Data360MSSQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SQL_HelthTech_JO_JV_751_701_Credit')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Data360MSSQL",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "HelthTech_JO_JV_751_701_Credit_Staging"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Data360MSSQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SQL_HelthTech_Purchase_751_Credit')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Data360MSSQL",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "HelthTech_Purchase_751_Credit_Staging"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Data360MSSQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SQL_HelthTech_Sale_751_701_Debit')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Data360MSSQL",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "HelthTech_Sale_751_701_Debit_Staging"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Data360MSSQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SQL_HelthTech_Sale_GC793_Debit')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Data360MSSQL",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "HelthTech_Sale_GC793_Debit_Staging"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Data360MSSQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SQL_HelthTech_Sale_Return_751_701_Credit')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Data360MSSQL",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "HelthTech_Sale_Return_751_701_Credit_Staging"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Data360MSSQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SQL_MRP_Variance')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Data360MSSQL",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "MRP_Variance_Final"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Data360MSSQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SQL_Medicare_S14278_Debit')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Data360MSSQL",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "Medicare_S14278_Debit_Staging"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Data360MSSQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SQL_Medicare_Sale_751_Debit')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Data360MSSQL",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "Medicare_Sale_751_Debit_Staging"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Data360MSSQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SQL_MegaMenuStag')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Data360MSSQL",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "MegaMenuStag"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Data360MSSQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SalesFolder')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage_LS1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "sales"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage_LS1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SqlServerTable1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Data360MSSQL",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [
					{
						"name": "c_br_code",
						"type": "nvarchar"
					},
					{
						"name": "c_year",
						"type": "nvarchar"
					},
					{
						"name": "c_prefix",
						"type": "nvarchar"
					},
					{
						"name": "n_srno",
						"type": "float",
						"precision": 15
					},
					{
						"name": "n_seq",
						"type": "float",
						"precision": 15
					},
					{
						"name": "d_date",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "c_item_code",
						"type": "nvarchar"
					},
					{
						"name": "c_batch_no",
						"type": "nvarchar"
					},
					{
						"name": "n_qty",
						"type": "float",
						"precision": 15
					},
					{
						"name": "n_sch_qty",
						"type": "float",
						"precision": 15
					},
					{
						"name": "n_sch_disc",
						"type": "float",
						"precision": 15
					},
					{
						"name": "n_sale_rate",
						"type": "float",
						"precision": 15
					},
					{
						"name": "n_disc_per",
						"type": "float",
						"precision": 15
					},
					{
						"name": "n_st_per",
						"type": "float",
						"precision": 15
					},
					{
						"name": "n_cst_per",
						"type": "float",
						"precision": 15
					},
					{
						"name": "n_rst_per",
						"type": "float",
						"precision": 15
					},
					{
						"name": "n_tax_suffer",
						"type": "float",
						"precision": 15
					},
					{
						"name": "n_amount",
						"type": "float",
						"precision": 15
					},
					{
						"name": "c_mf_code",
						"type": "nvarchar"
					},
					{
						"name": "n_2nd_sale",
						"type": "float",
						"precision": 15
					},
					{
						"name": "n_sp_sale_flag",
						"type": "float",
						"precision": 15
					},
					{
						"name": "n_cancel_flag",
						"type": "float",
						"precision": 15
					},
					{
						"name": "d_ldate",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "n_vaton",
						"type": "float",
						"precision": 15
					},
					{
						"name": "n_tax_on_sch_qty",
						"type": "float",
						"precision": 15
					},
					{
						"name": "n_vatts_mrp",
						"type": "float",
						"precision": 15
					},
					{
						"name": "n_mrp",
						"type": "float",
						"precision": 15
					},
					{
						"name": "c_remark",
						"type": "nvarchar"
					},
					{
						"name": "n_tax_amt",
						"type": "float",
						"precision": 15
					},
					{
						"name": "n_free_tax_amt",
						"type": "float",
						"precision": 15
					},
					{
						"name": "c_print_batch",
						"type": "nvarchar"
					},
					{
						"name": "d_print_exp_dt",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "n_eff_pur_rate",
						"type": "float",
						"precision": 15
					},
					{
						"name": "n_shift",
						"type": "float",
						"precision": 15
					},
					{
						"name": "c_remark2",
						"type": "nvarchar"
					},
					{
						"name": "n_points",
						"type": "float",
						"precision": 15
					},
					{
						"name": "t_ltime",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "n_req_qty",
						"type": "float",
						"precision": 15
					},
					{
						"name": "n_allow_points",
						"type": "float",
						"precision": 15
					},
					{
						"name": "n_qty1",
						"type": "float",
						"precision": 15
					},
					{
						"name": "n_card_reverse_dis",
						"type": "float",
						"precision": 15
					},
					{
						"name": "c_dc_br_code",
						"type": "nvarchar"
					},
					{
						"name": "c_dc_year",
						"type": "nvarchar"
					},
					{
						"name": "c_dc_prefix",
						"type": "nvarchar"
					},
					{
						"name": "n_dc_srno",
						"type": "float",
						"precision": 15
					},
					{
						"name": "n_dc_seq",
						"type": "float",
						"precision": 15
					},
					{
						"name": "n_remind_days",
						"type": "float",
						"precision": 15
					},
					{
						"name": "n_claim",
						"type": "float",
						"precision": 15
					},
					{
						"name": "c_order_br_code",
						"type": "nvarchar"
					},
					{
						"name": "c_order_year",
						"type": "nvarchar"
					},
					{
						"name": "c_order_prefix",
						"type": "nvarchar"
					},
					{
						"name": "n_order_no",
						"type": "float",
						"precision": 15
					},
					{
						"name": "n_order_seq",
						"type": "float",
						"precision": 15
					},
					{
						"name": "n_claim_per",
						"type": "float",
						"precision": 15
					},
					{
						"name": "d_print_mfg_dt",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "c_ord_br_code",
						"type": "nvarchar"
					},
					{
						"name": "c_ord_year",
						"type": "nvarchar"
					},
					{
						"name": "c_ord_prefix",
						"type": "nvarchar"
					},
					{
						"name": "n_ord_srno",
						"type": "float",
						"precision": 15
					},
					{
						"name": "n_ord_seq",
						"type": "float",
						"precision": 15
					},
					{
						"name": "c_cont_code",
						"type": "nvarchar"
					},
					{
						"name": "n_verified_qty",
						"type": "float",
						"precision": 15
					},
					{
						"name": "n_claim_qty",
						"type": "float",
						"precision": 15
					},
					{
						"name": "n_claim_val",
						"type": "float",
						"precision": 15
					},
					{
						"name": "c_coupon_code",
						"type": "nvarchar"
					},
					{
						"name": "c_coupon_srno",
						"type": "nvarchar"
					},
					{
						"name": "n_store_track",
						"type": "float",
						"precision": 15
					},
					{
						"name": "c_claim_reason",
						"type": "nvarchar"
					},
					{
						"name": "c_barcode",
						"type": "nvarchar"
					},
					{
						"name": "c_sman_code",
						"type": "nvarchar"
					},
					{
						"name": "c_godown_code",
						"type": "nvarchar"
					},
					{
						"name": "n_stk_serial",
						"type": "float",
						"precision": 15
					},
					{
						"name": "c_bom_code",
						"type": "nvarchar"
					},
					{
						"name": "n_bom_seq",
						"type": "float",
						"precision": 15
					},
					{
						"name": "n_item_tax_suffer",
						"type": "float",
						"precision": 15
					},
					{
						"name": "n_item_vatts_flag",
						"type": "float",
						"precision": 15
					},
					{
						"name": "n_item_vatts_mrp",
						"type": "float",
						"precision": 15
					},
					{
						"name": "n_item_tax_on_sch_qty",
						"type": "float",
						"precision": 15
					},
					{
						"name": "c_tray_Code",
						"type": "nvarchar"
					},
					{
						"name": "n_marketplace_flag",
						"type": "float",
						"precision": 15
					},
					{
						"name": "c_quot_no",
						"type": "nvarchar"
					},
					{
						"name": "n_ts_value",
						"type": "float",
						"precision": 15
					},
					{
						"name": "n_pick_seq",
						"type": "float",
						"precision": 15
					},
					{
						"name": "n_share_disc",
						"type": "float",
						"precision": 15
					},
					{
						"name": "n_ord_rate",
						"type": "float",
						"precision": 15
					},
					{
						"name": "n_ord_rate_diff",
						"type": "float",
						"precision": 15
					},
					{
						"name": "c_integration_code",
						"type": "nvarchar"
					},
					{
						"name": "n_update_stock",
						"type": "float",
						"precision": 15
					},
					{
						"name": "n_adjust",
						"type": "float",
						"precision": 15
					},
					{
						"name": "n_currency",
						"type": "float",
						"precision": 15
					},
					{
						"name": "n_exchange_rate",
						"type": "float",
						"precision": 15
					},
					{
						"name": "n_gst_enabled",
						"type": "float",
						"precision": 15
					},
					{
						"name": "n_from_gst_type",
						"type": "float",
						"precision": 15
					},
					{
						"name": "c_hsn_sac_code",
						"type": "nvarchar"
					},
					{
						"name": "n_cgst_per",
						"type": "float",
						"precision": 15
					},
					{
						"name": "n_cgst_amt",
						"type": "float",
						"precision": 15
					},
					{
						"name": "n_sgst_per",
						"type": "float",
						"precision": 15
					},
					{
						"name": "n_sgst_amt",
						"type": "float",
						"precision": 15
					},
					{
						"name": "n_igst_per",
						"type": "float",
						"precision": 15
					},
					{
						"name": "n_igst_amt",
						"type": "float",
						"precision": 15
					},
					{
						"name": "n_cess_per",
						"type": "float",
						"precision": 15
					},
					{
						"name": "n_cess_amt",
						"type": "float",
						"precision": 15
					},
					{
						"name": "n_pk",
						"type": "float",
						"precision": 15
					},
					{
						"name": "n_to_gst_type",
						"type": "float",
						"precision": 15
					},
					{
						"name": "c_gst_code",
						"type": "nvarchar"
					},
					{
						"name": "n_taxable_amt",
						"type": "float",
						"precision": 15
					},
					{
						"name": "n_inv_qty",
						"type": "float",
						"precision": 15
					},
					{
						"name": "n_ref_seq",
						"type": "float",
						"precision": 15
					},
					{
						"name": "n_ord_pk",
						"type": "float",
						"precision": 15
					},
					{
						"name": "n_dc_pk",
						"type": "float",
						"precision": 15
					},
					{
						"name": "n_purord_pk",
						"type": "float",
						"precision": 15
					},
					{
						"name": "n_std_disc_per",
						"type": "float",
						"precision": 15
					},
					{
						"name": "n_total_discount",
						"type": "float",
						"precision": 15
					},
					{
						"name": "n_hold_flag",
						"type": "float",
						"precision": 15
					},
					{
						"name": "n_print_seq",
						"type": "float",
						"precision": 15
					},
					{
						"name": "n_eb_seq",
						"type": "float",
						"precision": 15
					},
					{
						"name": "c_eb_tray_Code",
						"type": "nvarchar"
					},
					{
						"name": "c_eb_doc_no",
						"type": "nvarchar"
					},
					{
						"name": "c_supp_code",
						"type": "nvarchar"
					},
					{
						"name": "n_eb_load",
						"type": "float",
						"precision": 15
					},
					{
						"name": "n_add_cess_per",
						"type": "float",
						"precision": 15
					},
					{
						"name": "n_add_cess_rev_excl",
						"type": "float",
						"precision": 15
					},
					{
						"name": "n_cogs_amt",
						"type": "float",
						"precision": 15
					},
					{
						"name": "upsert_key",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "inv_det_copy"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Data360MSSQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/StTrackMstInputFile')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage_LS1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "st_track_mst ",
						"folderPath": "ecogreen/FullLoad",
						"container": "master"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "c_br_code",
						"type": "UTF8"
					},
					{
						"name": "c_doc_no",
						"type": "UTF8"
					},
					{
						"name": "n_inout",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_phase_code",
						"type": "UTF8"
					},
					{
						"name": "c_cust_code",
						"type": "UTF8"
					},
					{
						"name": "d_date",
						"type": "INT96"
					},
					{
						"name": "c_user",
						"type": "UTF8"
					},
					{
						"name": "c_system_name",
						"type": "UTF8"
					},
					{
						"name": "c_system_ip",
						"type": "UTF8"
					},
					{
						"name": "t_time_in",
						"type": "INT96"
					},
					{
						"name": "t_time_out",
						"type": "INT96"
					},
					{
						"name": "n_complete",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_confirm",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_urgent",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_sort",
						"type": "UTF8"
					},
					{
						"name": "c_user_2",
						"type": "UTF8"
					},
					{
						"name": "c_order_id",
						"type": "UTF8"
					},
					{
						"name": "n_hold",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_note",
						"type": "UTF8"
					},
					{
						"name": "c_dc_div",
						"type": "UTF8"
					},
					{
						"name": "t_confirm_time",
						"type": "INT96"
					},
					{
						"name": "c_confirm_user",
						"type": "UTF8"
					},
					{
						"name": "n_fulfillment_flag",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage_LS1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/StTrackMstOutputTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Data360MSSQL",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "st_track_mst"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Data360MSSQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/StockMstInputFile')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage_LS1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"FolderName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "stock_mst",
						"folderPath": {
							"value": "@dataset().FolderName",
							"type": "Expression"
						},
						"container": "inventory"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "c_item_code",
						"type": "UTF8"
					},
					{
						"name": "c_batch_no",
						"type": "UTF8"
					},
					{
						"name": "d_exp_dt",
						"type": "INT96"
					},
					{
						"name": "n_mrp",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_pur_rate",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_sale_rate",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_eff_pur_rate",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_tax_suffer",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_inc_exc_tax",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_add_val",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_lock",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_mrp_box",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_pur_rate_box",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_qty_per_box",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "d_ldate",
						"type": "INT96"
					},
					{
						"name": "d_adate",
						"type": "INT96"
					},
					{
						"name": "c_createuser",
						"type": "UTF8"
					},
					{
						"name": "n_audited",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_predefined",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_ptr_box",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_ptr",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "t_ltime",
						"type": "INT96"
					},
					{
						"name": "c_mfac_sh_name",
						"type": "UTF8"
					},
					{
						"name": "n_permanent_lock",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_note",
						"type": "UTF8"
					},
					{
						"name": "c_brand_name",
						"type": "UTF8"
					},
					{
						"name": "c_mfac_name",
						"type": "UTF8"
					},
					{
						"name": "d_mfg_dt",
						"type": "INT96"
					},
					{
						"name": "c_modiuser",
						"type": "UTF8"
					},
					{
						"name": "n_qc_per1",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_qc_per2",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_old_mrp",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_old_mrp_box",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage_LS1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Stock_Godown_InputFile')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage_LS1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "stock_godown",
						"folderPath": "FullLoad",
						"container": "inventory"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "c_br_code",
						"type": "UTF8"
					},
					{
						"name": "c_item_code",
						"type": "UTF8"
					},
					{
						"name": "c_batch_no",
						"type": "UTF8"
					},
					{
						"name": "c_godown_code",
						"type": "UTF8"
					},
					{
						"name": "n_qty",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_hold_qty",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_store_track_qty",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "d_ldate",
						"type": "INT96"
					},
					{
						"name": "t_ltime",
						"type": "INT96"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage_LS1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Stock_Mst_InputFile')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage_LS1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "stock_mst",
						"folderPath": "FullLoad",
						"container": "inventory"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "c_item_code",
						"type": "UTF8"
					},
					{
						"name": "c_batch_no",
						"type": "UTF8"
					},
					{
						"name": "d_exp_dt",
						"type": "INT96"
					},
					{
						"name": "n_mrp",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_pur_rate",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_sale_rate",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_eff_pur_rate",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_tax_suffer",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_inc_exc_tax",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_add_val",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_lock",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_mrp_box",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_pur_rate_box",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_qty_per_box",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "d_ldate",
						"type": "INT96"
					},
					{
						"name": "d_adate",
						"type": "INT96"
					},
					{
						"name": "c_createuser",
						"type": "UTF8"
					},
					{
						"name": "n_audited",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_predefined",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_ptr_box",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_ptr",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "t_ltime",
						"type": "INT96"
					},
					{
						"name": "c_mfac_sh_name",
						"type": "UTF8"
					},
					{
						"name": "n_permanent_lock",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_note",
						"type": "UTF8"
					},
					{
						"name": "c_brand_name",
						"type": "UTF8"
					},
					{
						"name": "c_mfac_name",
						"type": "UTF8"
					},
					{
						"name": "d_mfg_dt",
						"type": "INT96"
					},
					{
						"name": "c_modiuser",
						"type": "UTF8"
					},
					{
						"name": "n_qc_per1",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_qc_per2",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage_LS1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Stock_mst_tempTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Data360MSSQL",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "Ex_Stock_Mst_Staging_temp"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Data360MSSQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/StoreMaster_OutPutTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Data360MSSQL",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [
					{
						"name": "id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "store_id",
						"type": "nvarchar"
					},
					{
						"name": "store_name",
						"type": "nvarchar"
					},
					{
						"name": "branch",
						"type": "nvarchar"
					},
					{
						"name": "fax",
						"type": "nvarchar"
					},
					{
						"name": "email",
						"type": "nvarchar"
					},
					{
						"name": "password",
						"type": "nvarchar"
					},
					{
						"name": "phone",
						"type": "nvarchar"
					},
					{
						"name": "fcm_token",
						"type": "nvarchar"
					},
					{
						"name": "device_type",
						"type": "nvarchar"
					},
					{
						"name": "store_address",
						"type": "nvarchar"
					},
					{
						"name": "device_id",
						"type": "nvarchar"
					},
					{
						"name": "country",
						"type": "nvarchar"
					},
					{
						"name": "state",
						"type": "nvarchar"
					},
					{
						"name": "city",
						"type": "nvarchar"
					},
					{
						"name": "pincode",
						"type": "int",
						"precision": 10
					},
					{
						"name": "vendor_id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "lattitude",
						"type": "decimal",
						"precision": 10,
						"scale": 8
					},
					{
						"name": "longitude",
						"type": "decimal",
						"precision": 10,
						"scale": 8
					},
					{
						"name": "status",
						"type": "int",
						"precision": 10
					},
					{
						"name": "deliver_phase",
						"type": "nvarchar"
					},
					{
						"name": "grid_id",
						"type": "nvarchar"
					},
					{
						"name": "vendorCode",
						"type": "nvarchar"
					},
					{
						"name": "landmark",
						"type": "nvarchar"
					},
					{
						"name": "nodeTypeName",
						"type": "nvarchar"
					},
					{
						"name": "parentNodeType",
						"type": "nvarchar"
					},
					{
						"name": "rank",
						"type": "nvarchar"
					},
					{
						"name": "special",
						"type": "nvarchar"
					},
					{
						"name": "dropShipmentVendorList",
						"type": "nvarchar"
					},
					{
						"name": "createdBy",
						"type": "nvarchar"
					},
					{
						"name": "updatedBy",
						"type": "nvarchar"
					},
					{
						"name": "created_at",
						"type": "datetime2",
						"scale": 0
					},
					{
						"name": "updatedAt",
						"type": "datetime2",
						"scale": 0
					},
					{
						"name": "store_hartbeat_status",
						"type": "int",
						"precision": 10
					},
					{
						"name": "heartbeat_update_date",
						"type": "nvarchar"
					},
					{
						"name": "area_manager",
						"type": "nvarchar"
					},
					{
						"name": "area_manager_phone",
						"type": "nvarchar"
					},
					{
						"name": "territory_manager",
						"type": "nvarchar"
					},
					{
						"name": "territory_manager_phone",
						"type": "nvarchar"
					},
					{
						"name": "store_manager",
						"type": "nvarchar"
					},
					{
						"name": "store_manager_phone",
						"type": "nvarchar"
					},
					{
						"name": "shipping_providers",
						"type": "nvarchar"
					},
					{
						"name": "last_syncdate",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "OMS_Store"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Data360MSSQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SummaryinvdetInputfiles')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage_LS1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "inv_det",
						"folderPath": "extratablesfull1/sales/FullLoad",
						"container": "summary"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "c_br_code",
						"type": "UTF8"
					},
					{
						"name": "c_year",
						"type": "UTF8"
					},
					{
						"name": "c_prefix",
						"type": "UTF8"
					},
					{
						"name": "n_srno",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_seq",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "d_date",
						"type": "INT96"
					},
					{
						"name": "c_item_code",
						"type": "UTF8"
					},
					{
						"name": "c_batch_no",
						"type": "UTF8"
					},
					{
						"name": "n_qty",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_sch_qty",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_sch_disc",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_sale_rate",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_disc_per",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_st_per",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_cst_per",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_rst_per",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_tax_suffer",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_amount",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_mf_code",
						"type": "UTF8"
					},
					{
						"name": "n_2nd_sale",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_sp_sale_flag",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_cancel_flag",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "d_ldate",
						"type": "INT96"
					},
					{
						"name": "n_vaton",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_tax_on_sch_qty",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_vatts_mrp",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_mrp",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_remark",
						"type": "UTF8"
					},
					{
						"name": "n_tax_amt",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_free_tax_amt",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_print_batch",
						"type": "UTF8"
					},
					{
						"name": "d_print_exp_dt",
						"type": "INT96"
					},
					{
						"name": "n_eff_pur_rate",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_shift",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_remark2",
						"type": "UTF8"
					},
					{
						"name": "n_points",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "t_ltime",
						"type": "INT96"
					},
					{
						"name": "n_req_qty",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_allow_points",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_qty1",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_card_reverse_dis",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_dc_br_code",
						"type": "UTF8"
					},
					{
						"name": "c_dc_year",
						"type": "UTF8"
					},
					{
						"name": "c_dc_prefix",
						"type": "UTF8"
					},
					{
						"name": "n_dc_srno",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_dc_seq",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_remind_days",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_claim",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_order_br_code",
						"type": "UTF8"
					},
					{
						"name": "c_order_year",
						"type": "UTF8"
					},
					{
						"name": "c_order_prefix",
						"type": "UTF8"
					},
					{
						"name": "n_order_no",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_order_seq",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_claim_per",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "d_print_mfg_dt",
						"type": "INT96"
					},
					{
						"name": "c_ord_br_code",
						"type": "UTF8"
					},
					{
						"name": "c_ord_year",
						"type": "UTF8"
					},
					{
						"name": "c_ord_prefix",
						"type": "UTF8"
					},
					{
						"name": "n_ord_srno",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_ord_seq",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_cont_code",
						"type": "UTF8"
					},
					{
						"name": "n_verified_qty",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_claim_qty",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_claim_val",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_coupon_code",
						"type": "UTF8"
					},
					{
						"name": "c_coupon_srno",
						"type": "UTF8"
					},
					{
						"name": "n_store_track",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_claim_reason",
						"type": "UTF8"
					},
					{
						"name": "c_barcode",
						"type": "UTF8"
					},
					{
						"name": "c_sman_code",
						"type": "UTF8"
					},
					{
						"name": "c_godown_code",
						"type": "UTF8"
					},
					{
						"name": "n_stk_serial",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_bom_code",
						"type": "UTF8"
					},
					{
						"name": "n_bom_seq",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_item_tax_suffer",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_item_vatts_flag",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_item_vatts_mrp",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_item_tax_on_sch_qty",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_tray_Code",
						"type": "UTF8"
					},
					{
						"name": "n_marketplace_flag",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_quot_no",
						"type": "UTF8"
					},
					{
						"name": "n_ts_value",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_pick_seq",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_share_disc",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_ord_rate",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_ord_rate_diff",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_integration_code",
						"type": "UTF8"
					},
					{
						"name": "n_update_stock",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_adjust",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_currency",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_exchange_rate",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_gst_enabled",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_from_gst_type",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_hsn_sac_code",
						"type": "UTF8"
					},
					{
						"name": "n_cgst_per",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_cgst_amt",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_sgst_per",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_sgst_amt",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_igst_per",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_igst_amt",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_cess_per",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_cess_amt",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_pk",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_to_gst_type",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_gst_code",
						"type": "UTF8"
					},
					{
						"name": "n_taxable_amt",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_inv_qty",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_ref_seq",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_ord_pk",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_dc_pk",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_purord_pk",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_std_disc_per",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_total_discount",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_hold_flag",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_print_seq",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_eb_seq",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_eb_tray_Code",
						"type": "UTF8"
					},
					{
						"name": "c_eb_doc_no",
						"type": "UTF8"
					},
					{
						"name": "c_supp_code",
						"type": "UTF8"
					},
					{
						"name": "n_eb_load",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_add_cess_per",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_add_cess_rev_excl",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_cogs_amt",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage_LS1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/adls_pq_EG')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"FileName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().FileName",
							"type": "Expression"
						},
						"fileSystem": "ecogreen"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dbnt_det_InputFile')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage_LS1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "dbnt_det",
						"folderPath": "FullLoad",
						"container": "finance"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "c_br_code",
						"type": "UTF8"
					},
					{
						"name": "c_year",
						"type": "UTF8"
					},
					{
						"name": "c_prefix",
						"type": "UTF8"
					},
					{
						"name": "n_srno",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_seq",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "d_date",
						"type": "INT96"
					},
					{
						"name": "c_item_code",
						"type": "UTF8"
					},
					{
						"name": "c_batch_no",
						"type": "UTF8"
					},
					{
						"name": "n_qty",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_sale_rate",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_amount",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_mf_code",
						"type": "UTF8"
					},
					{
						"name": "n_type",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_bill_no",
						"type": "UTF8"
					},
					{
						"name": "n_sch_qty",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_cancel_flag",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "d_ldate",
						"type": "INT96"
					},
					{
						"name": "n_shift",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_adj_prefix",
						"type": "UTF8"
					},
					{
						"name": "n_adj_srno",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_adj_qty",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_mrp",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_item_disc",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_tax_suffer",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_st_per",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_vatts_mrp",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_tax_on_sch_qty",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_tax_amt",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_free_tax_amt",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "t_ltime",
						"type": "INT96"
					},
					{
						"name": "c_claim_year",
						"type": "UTF8"
					},
					{
						"name": "c_claim_prefix",
						"type": "UTF8"
					},
					{
						"name": "n_claim_srno",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_claim_seq",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_claim_qty",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_item_level_settle",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_godown_code",
						"type": "UTF8"
					},
					{
						"name": "n_stk_serial",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_share_disc",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_integration_code",
						"type": "UTF8"
					},
					{
						"name": "c_supp_code",
						"type": "UTF8"
					},
					{
						"name": "c_tray_code",
						"type": "UTF8"
					},
					{
						"name": "n_store_track",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_approved",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_currency",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_exchange_rate",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_doc_no",
						"type": "UTF8"
					},
					{
						"name": "n_eb_seq",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_gst_enabled",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_from_gst_type",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_hsn_sac_code",
						"type": "UTF8"
					},
					{
						"name": "n_cgst_per",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_cgst_amt",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_sgst_per",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_sgst_amt",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_igst_per",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_igst_amt",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_cess_per",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_cess_amt",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_pk",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_to_gst_type",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_qty1",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_update_stock",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_eff_pur_rate",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_cogs_amt",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage_LS1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dbnt_det_OutPutFile')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Data360MSSQL",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "dbnt_det"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Data360MSSQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dbtn_mst_InputFile')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage_LS1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "dbnt_mst",
						"folderPath": "FullLoad",
						"container": "finance"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "c_br_Code",
						"type": "UTF8"
					},
					{
						"name": "c_year",
						"type": "UTF8"
					},
					{
						"name": "c_prefix",
						"type": "UTF8"
					},
					{
						"name": "n_srno",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "d_date",
						"type": "INT96"
					},
					{
						"name": "c_cust_code",
						"type": "UTF8"
					},
					{
						"name": "c_sman_code",
						"type": "UTF8"
					},
					{
						"name": "n_total",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_other_charge",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_detail",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_non_taxable_ret",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_round_off",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_cnt_no",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_settle",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_settle_amt",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_cancel_flag",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "d_ldate",
						"type": "INT96"
					},
					{
						"name": "n_shift",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_item_disc",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_st",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_cst",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_freight",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_remark",
						"type": "UTF8"
					},
					{
						"name": "c_user",
						"type": "UTF8"
					},
					{
						"name": "t_time",
						"type": "INT96"
					},
					{
						"name": "t_ltime",
						"type": "INT96"
					},
					{
						"name": "c_reason_code",
						"type": "UTF8"
					},
					{
						"name": "n_settle_days",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_lr_no",
						"type": "UTF8"
					},
					{
						"name": "d_lr_date",
						"type": "INT96"
					},
					{
						"name": "d_stock_sent_date",
						"type": "INT96"
					},
					{
						"name": "n_cases",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_approved",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_approved_by",
						"type": "UTF8"
					},
					{
						"name": "c_modiuser",
						"type": "UTF8"
					},
					{
						"name": "n_item_level_settle",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_currency_code",
						"type": "UTF8"
					},
					{
						"name": "n_exchange_rate",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_computer_name",
						"type": "UTF8"
					},
					{
						"name": "c_sys_user",
						"type": "UTF8"
					},
					{
						"name": "c_sys_ip",
						"type": "UTF8"
					},
					{
						"name": "c_credit_act_code",
						"type": "UTF8"
					},
					{
						"name": "n_share_disc",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_debit_act_code",
						"type": "UTF8"
					},
					{
						"name": "c_order_id",
						"type": "UTF8"
					},
					{
						"name": "c_integration_code",
						"type": "UTF8"
					},
					{
						"name": "n_store_track",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_note",
						"type": "UTF8"
					},
					{
						"name": "n_gst_enabled",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_from_gst_no",
						"type": "UTF8"
					},
					{
						"name": "n_from_gst_type",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_to_gst_no",
						"type": "UTF8"
					},
					{
						"name": "n_sale_type",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_cgst_act_code",
						"type": "UTF8"
					},
					{
						"name": "n_cgst_amt",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_sgst_act_code",
						"type": "UTF8"
					},
					{
						"name": "n_sgst_amt",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_igst_act_code",
						"type": "UTF8"
					},
					{
						"name": "n_igst_amt",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_cess_act_code",
						"type": "UTF8"
					},
					{
						"name": "n_cess_amt",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_state_code",
						"type": "UTF8"
					},
					{
						"name": "c_eway_bill_no",
						"type": "UTF8"
					},
					{
						"name": "n_pk",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_to_gst_type",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_print_format_code",
						"type": "UTF8"
					},
					{
						"name": "c_type_code",
						"type": "UTF8"
					},
					{
						"name": "n_cogs_amt",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_transport_code",
						"type": "UTF8"
					},
					{
						"name": "n_dist_km",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_tran_gst_no",
						"type": "UTF8"
					},
					{
						"name": "d_eway_bill_date",
						"type": "INT96"
					},
					{
						"name": "c_inventory_act_code",
						"type": "UTF8"
					},
					{
						"name": "c_cogst_act_code",
						"type": "UTF8"
					},
					{
						"name": "n_tcs_per",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_tcs_taxable_amt",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_tcs_amt",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_disc_per",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_godown_code",
						"type": "UTF8"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage_LS1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dbtn_mst_OutputTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Data360MSSQL",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "dbnt_mst"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Data360MSSQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/inv_det_tempOutputTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Data360MSSQL",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [
					{
						"name": "c_br_code",
						"type": "nvarchar"
					},
					{
						"name": "c_year",
						"type": "nvarchar"
					},
					{
						"name": "c_prefix",
						"type": "nvarchar"
					},
					{
						"name": "n_srno",
						"type": "float",
						"precision": 15
					},
					{
						"name": "n_seq",
						"type": "float",
						"precision": 15
					},
					{
						"name": "d_date",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "c_item_code",
						"type": "nvarchar"
					},
					{
						"name": "c_batch_no",
						"type": "nvarchar"
					},
					{
						"name": "n_qty",
						"type": "float",
						"precision": 15
					},
					{
						"name": "n_sch_qty",
						"type": "float",
						"precision": 15
					},
					{
						"name": "n_sch_disc",
						"type": "float",
						"precision": 15
					},
					{
						"name": "n_sale_rate",
						"type": "float",
						"precision": 15
					},
					{
						"name": "n_disc_per",
						"type": "float",
						"precision": 15
					},
					{
						"name": "n_st_per",
						"type": "float",
						"precision": 15
					},
					{
						"name": "n_cst_per",
						"type": "float",
						"precision": 15
					},
					{
						"name": "n_rst_per",
						"type": "float",
						"precision": 15
					},
					{
						"name": "n_tax_suffer",
						"type": "float",
						"precision": 15
					},
					{
						"name": "n_amount",
						"type": "float",
						"precision": 15
					},
					{
						"name": "c_mf_code",
						"type": "nvarchar"
					},
					{
						"name": "n_2nd_sale",
						"type": "float",
						"precision": 15
					},
					{
						"name": "n_sp_sale_flag",
						"type": "float",
						"precision": 15
					},
					{
						"name": "n_cancel_flag",
						"type": "float",
						"precision": 15
					},
					{
						"name": "d_ldate",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "n_vaton",
						"type": "float",
						"precision": 15
					},
					{
						"name": "n_tax_on_sch_qty",
						"type": "float",
						"precision": 15
					},
					{
						"name": "n_vatts_mrp",
						"type": "float",
						"precision": 15
					},
					{
						"name": "n_mrp",
						"type": "float",
						"precision": 15
					},
					{
						"name": "c_remark",
						"type": "nvarchar"
					},
					{
						"name": "n_tax_amt",
						"type": "float",
						"precision": 15
					},
					{
						"name": "n_free_tax_amt",
						"type": "float",
						"precision": 15
					},
					{
						"name": "c_print_batch",
						"type": "nvarchar"
					},
					{
						"name": "d_print_exp_dt",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "n_eff_pur_rate",
						"type": "float",
						"precision": 15
					},
					{
						"name": "n_shift",
						"type": "float",
						"precision": 15
					},
					{
						"name": "c_remark2",
						"type": "nvarchar"
					},
					{
						"name": "n_points",
						"type": "float",
						"precision": 15
					},
					{
						"name": "t_ltime",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "n_req_qty",
						"type": "float",
						"precision": 15
					},
					{
						"name": "n_allow_points",
						"type": "float",
						"precision": 15
					},
					{
						"name": "n_qty1",
						"type": "float",
						"precision": 15
					},
					{
						"name": "n_card_reverse_dis",
						"type": "float",
						"precision": 15
					},
					{
						"name": "c_dc_br_code",
						"type": "nvarchar"
					},
					{
						"name": "c_dc_year",
						"type": "nvarchar"
					},
					{
						"name": "c_dc_prefix",
						"type": "nvarchar"
					},
					{
						"name": "n_dc_srno",
						"type": "float",
						"precision": 15
					},
					{
						"name": "n_dc_seq",
						"type": "float",
						"precision": 15
					},
					{
						"name": "n_remind_days",
						"type": "float",
						"precision": 15
					},
					{
						"name": "n_claim",
						"type": "float",
						"precision": 15
					},
					{
						"name": "c_order_br_code",
						"type": "nvarchar"
					},
					{
						"name": "c_order_year",
						"type": "nvarchar"
					},
					{
						"name": "c_order_prefix",
						"type": "nvarchar"
					},
					{
						"name": "n_order_no",
						"type": "float",
						"precision": 15
					},
					{
						"name": "n_order_seq",
						"type": "float",
						"precision": 15
					},
					{
						"name": "n_claim_per",
						"type": "float",
						"precision": 15
					},
					{
						"name": "d_print_mfg_dt",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "c_ord_br_code",
						"type": "nvarchar"
					},
					{
						"name": "c_ord_year",
						"type": "nvarchar"
					},
					{
						"name": "c_ord_prefix",
						"type": "nvarchar"
					},
					{
						"name": "n_ord_srno",
						"type": "float",
						"precision": 15
					},
					{
						"name": "n_ord_seq",
						"type": "float",
						"precision": 15
					},
					{
						"name": "c_cont_code",
						"type": "nvarchar"
					},
					{
						"name": "n_verified_qty",
						"type": "float",
						"precision": 15
					},
					{
						"name": "n_claim_qty",
						"type": "float",
						"precision": 15
					},
					{
						"name": "n_claim_val",
						"type": "float",
						"precision": 15
					},
					{
						"name": "c_coupon_code",
						"type": "nvarchar"
					},
					{
						"name": "c_coupon_srno",
						"type": "nvarchar"
					},
					{
						"name": "n_store_track",
						"type": "float",
						"precision": 15
					},
					{
						"name": "c_claim_reason",
						"type": "nvarchar"
					},
					{
						"name": "c_barcode",
						"type": "nvarchar"
					},
					{
						"name": "c_sman_code",
						"type": "nvarchar"
					},
					{
						"name": "c_godown_code",
						"type": "nvarchar"
					},
					{
						"name": "n_stk_serial",
						"type": "float",
						"precision": 15
					},
					{
						"name": "c_bom_code",
						"type": "nvarchar"
					},
					{
						"name": "n_bom_seq",
						"type": "float",
						"precision": 15
					},
					{
						"name": "n_item_tax_suffer",
						"type": "float",
						"precision": 15
					},
					{
						"name": "n_item_vatts_flag",
						"type": "float",
						"precision": 15
					},
					{
						"name": "n_item_vatts_mrp",
						"type": "float",
						"precision": 15
					},
					{
						"name": "n_item_tax_on_sch_qty",
						"type": "float",
						"precision": 15
					},
					{
						"name": "c_tray_Code",
						"type": "nvarchar"
					},
					{
						"name": "n_marketplace_flag",
						"type": "float",
						"precision": 15
					},
					{
						"name": "c_quot_no",
						"type": "nvarchar"
					},
					{
						"name": "n_ts_value",
						"type": "float",
						"precision": 15
					},
					{
						"name": "n_pick_seq",
						"type": "float",
						"precision": 15
					},
					{
						"name": "n_share_disc",
						"type": "float",
						"precision": 15
					},
					{
						"name": "n_ord_rate",
						"type": "float",
						"precision": 15
					},
					{
						"name": "n_ord_rate_diff",
						"type": "float",
						"precision": 15
					},
					{
						"name": "c_integration_code",
						"type": "nvarchar"
					},
					{
						"name": "n_update_stock",
						"type": "float",
						"precision": 15
					},
					{
						"name": "n_adjust",
						"type": "float",
						"precision": 15
					},
					{
						"name": "n_currency",
						"type": "float",
						"precision": 15
					},
					{
						"name": "n_exchange_rate",
						"type": "float",
						"precision": 15
					},
					{
						"name": "n_gst_enabled",
						"type": "float",
						"precision": 15
					},
					{
						"name": "n_from_gst_type",
						"type": "float",
						"precision": 15
					},
					{
						"name": "c_hsn_sac_code",
						"type": "nvarchar"
					},
					{
						"name": "n_cgst_per",
						"type": "float",
						"precision": 15
					},
					{
						"name": "n_cgst_amt",
						"type": "float",
						"precision": 15
					},
					{
						"name": "n_sgst_per",
						"type": "float",
						"precision": 15
					},
					{
						"name": "n_sgst_amt",
						"type": "float",
						"precision": 15
					},
					{
						"name": "n_igst_per",
						"type": "float",
						"precision": 15
					},
					{
						"name": "n_igst_amt",
						"type": "float",
						"precision": 15
					},
					{
						"name": "n_cess_per",
						"type": "float",
						"precision": 15
					},
					{
						"name": "n_cess_amt",
						"type": "float",
						"precision": 15
					},
					{
						"name": "n_pk",
						"type": "float",
						"precision": 15
					},
					{
						"name": "n_to_gst_type",
						"type": "float",
						"precision": 15
					},
					{
						"name": "c_gst_code",
						"type": "nvarchar"
					},
					{
						"name": "n_taxable_amt",
						"type": "float",
						"precision": 15
					},
					{
						"name": "n_inv_qty",
						"type": "float",
						"precision": 15
					},
					{
						"name": "n_ref_seq",
						"type": "float",
						"precision": 15
					},
					{
						"name": "n_ord_pk",
						"type": "float",
						"precision": 15
					},
					{
						"name": "n_dc_pk",
						"type": "float",
						"precision": 15
					},
					{
						"name": "n_purord_pk",
						"type": "float",
						"precision": 15
					},
					{
						"name": "n_std_disc_per",
						"type": "float",
						"precision": 15
					},
					{
						"name": "n_total_discount",
						"type": "float",
						"precision": 15
					},
					{
						"name": "n_hold_flag",
						"type": "float",
						"precision": 15
					},
					{
						"name": "n_print_seq",
						"type": "float",
						"precision": 15
					},
					{
						"name": "n_eb_seq",
						"type": "float",
						"precision": 15
					},
					{
						"name": "c_eb_tray_Code",
						"type": "nvarchar"
					},
					{
						"name": "c_eb_doc_no",
						"type": "nvarchar"
					},
					{
						"name": "c_supp_code",
						"type": "nvarchar"
					},
					{
						"name": "n_eb_load",
						"type": "float",
						"precision": 15
					},
					{
						"name": "n_add_cess_per",
						"type": "float",
						"precision": 15
					},
					{
						"name": "n_add_cess_rev_excl",
						"type": "float",
						"precision": 15
					},
					{
						"name": "n_cogs_amt",
						"type": "float",
						"precision": 15
					},
					{
						"name": "upsert_key",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "inv_det_temp"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Data360MSSQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/inv_mst_tempOutputTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Data360MSSQL",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [
					{
						"name": "c_br_code",
						"type": "nvarchar"
					},
					{
						"name": "c_year",
						"type": "nvarchar"
					},
					{
						"name": "c_prefix",
						"type": "nvarchar"
					},
					{
						"name": "n_srno",
						"type": "decimal",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "d_date",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "t_time",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "c_sman_code",
						"type": "nvarchar"
					},
					{
						"name": "c_dman_code",
						"type": "nvarchar"
					},
					{
						"name": "c_cust_code",
						"type": "nvarchar"
					},
					{
						"name": "c_patient",
						"type": "nvarchar"
					},
					{
						"name": "c_doctor_code",
						"type": "nvarchar"
					},
					{
						"name": "c_doctor_name",
						"type": "nvarchar"
					},
					{
						"name": "n_total",
						"type": "decimal",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_st",
						"type": "decimal",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_cst",
						"type": "decimal",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_rst",
						"type": "decimal",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_disc_rs",
						"type": "decimal",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_discount",
						"type": "decimal",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_other_charge",
						"type": "decimal",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_tax_suffer",
						"type": "decimal",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_discount_per",
						"type": "decimal",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_taxable_ret",
						"type": "decimal",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_non_taxable_ret",
						"type": "decimal",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_credit_act",
						"type": "nvarchar"
					},
					{
						"name": "n_round_off",
						"type": "decimal",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_counter_sale",
						"type": "decimal",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_cnt_no",
						"type": "decimal",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_ok",
						"type": "decimal",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_cancel_flag",
						"type": "decimal",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "d_ldate",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "n_vaton",
						"type": "decimal",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_order_year",
						"type": "nvarchar"
					},
					{
						"name": "c_order_prefix",
						"type": "nvarchar"
					},
					{
						"name": "n_order_no",
						"type": "decimal",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_approved",
						"type": "decimal",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_shift",
						"type": "decimal",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_ipno",
						"type": "nvarchar"
					},
					{
						"name": "c_remark",
						"type": "nvarchar"
					},
					{
						"name": "c_patient_details",
						"type": "nvarchar"
					},
					{
						"name": "c_card_bank_code",
						"type": "nvarchar"
					},
					{
						"name": "c_ref_no",
						"type": "nvarchar"
					},
					{
						"name": "c_user",
						"type": "nvarchar"
					},
					{
						"name": "n_points",
						"type": "decimal",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_point_redeem",
						"type": "decimal",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_point_value",
						"type": "decimal",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_pcbc_charge",
						"type": "decimal",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "t_ltime",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "d_remind_date",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "n_card_reverse_dis",
						"type": "decimal",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_doctor_office_code",
						"type": "nvarchar"
					},
					{
						"name": "c_mobile",
						"type": "nvarchar"
					},
					{
						"name": "d_ref_dt",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "n_day_seq",
						"type": "decimal",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_lr_no",
						"type": "nvarchar"
					},
					{
						"name": "d_lr_date",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "d_stock_sent_date",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "n_cases",
						"type": "decimal",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_credit_days",
						"type": "decimal",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_admin_settlement",
						"type": "decimal",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_terms_code",
						"type": "nvarchar"
					},
					{
						"name": "c_reg_no",
						"type": "nvarchar"
					},
					{
						"name": "c_email",
						"type": "nvarchar"
					},
					{
						"name": "c_mr_code",
						"type": "nvarchar"
					},
					{
						"name": "c_transport_code",
						"type": "nvarchar"
					},
					{
						"name": "n_urgent",
						"type": "decimal",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_modiuser",
						"type": "nvarchar"
					},
					{
						"name": "n_tender_amt",
						"type": "decimal",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_token_no",
						"type": "nvarchar"
					},
					{
						"name": "c_coupon_code",
						"type": "nvarchar"
					},
					{
						"name": "c_coupon_srno",
						"type": "nvarchar"
					},
					{
						"name": "n_store_track",
						"type": "decimal",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_ip_br_code",
						"type": "nvarchar"
					},
					{
						"name": "c_tran_type",
						"type": "nvarchar"
					},
					{
						"name": "c_currency_code",
						"type": "nvarchar"
					},
					{
						"name": "n_exchange_rate",
						"type": "decimal",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_computer_name",
						"type": "nvarchar"
					},
					{
						"name": "c_sys_user",
						"type": "nvarchar"
					},
					{
						"name": "c_sys_ip",
						"type": "nvarchar"
					},
					{
						"name": "n_multi_payment",
						"type": "decimal",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_pay_code1",
						"type": "nvarchar"
					},
					{
						"name": "n_pay_amt1",
						"type": "decimal",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_pay_ac_code1",
						"type": "nvarchar"
					},
					{
						"name": "c_pay_code2",
						"type": "nvarchar"
					},
					{
						"name": "n_pay_amt2",
						"type": "decimal",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_pay_ac_code2",
						"type": "nvarchar"
					},
					{
						"name": "c_pay_code3",
						"type": "nvarchar"
					},
					{
						"name": "n_pay_amt3",
						"type": "decimal",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_pay_ac_code3",
						"type": "nvarchar"
					},
					{
						"name": "c_pay_code4",
						"type": "nvarchar"
					},
					{
						"name": "n_pay_amt4",
						"type": "decimal",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_pay_ac_code4",
						"type": "nvarchar"
					},
					{
						"name": "c_pay_code5",
						"type": "nvarchar"
					},
					{
						"name": "n_pay_amt5",
						"type": "decimal",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_pay_ac_code5",
						"type": "nvarchar"
					},
					{
						"name": "n_marketplace_flag",
						"type": "decimal",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_trader_code",
						"type": "nvarchar"
					},
					{
						"name": "n_trader_comm_total",
						"type": "decimal",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_trader_charge_total",
						"type": "decimal",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_trader_charge1_total",
						"type": "decimal",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_inter_pur",
						"type": "decimal",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_order_id",
						"type": "nvarchar"
					},
					{
						"name": "c_debit_act_code",
						"type": "nvarchar"
					},
					{
						"name": "c_vat_act_code",
						"type": "nvarchar"
					},
					{
						"name": "c_purord_no",
						"type": "nvarchar"
					},
					{
						"name": "n_share_disc",
						"type": "decimal",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_integration_code",
						"type": "nvarchar"
					},
					{
						"name": "c_cst_act_code",
						"type": "nvarchar"
					},
					{
						"name": "c_st_act_code",
						"type": "nvarchar"
					},
					{
						"name": "c_amt_act_code",
						"type": "nvarchar"
					},
					{
						"name": "c_disc_act_code",
						"type": "nvarchar"
					},
					{
						"name": "c_discrs_act_code",
						"type": "nvarchar"
					},
					{
						"name": "c_oth_act_code",
						"type": "nvarchar"
					},
					{
						"name": "n_update_stock",
						"type": "decimal",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "t_from_time",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "t_to_time",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "c_note",
						"type": "nvarchar"
					},
					{
						"name": "n_point_factor",
						"type": "decimal",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_gst_enabled",
						"type": "decimal",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_from_gst_no",
						"type": "nvarchar"
					},
					{
						"name": "n_from_gst_type",
						"type": "decimal",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_to_gst_no",
						"type": "nvarchar"
					},
					{
						"name": "n_sale_type",
						"type": "decimal",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_cgst_act_code",
						"type": "nvarchar"
					},
					{
						"name": "n_cgst_amt",
						"type": "decimal",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_sgst_act_code",
						"type": "nvarchar"
					},
					{
						"name": "n_sgst_amt",
						"type": "decimal",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_igst_act_code",
						"type": "nvarchar"
					},
					{
						"name": "n_igst_amt",
						"type": "decimal",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_cess_act_code",
						"type": "nvarchar"
					},
					{
						"name": "n_cess_amt",
						"type": "decimal",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_state_code",
						"type": "nvarchar"
					},
					{
						"name": "c_eway_bill_no",
						"type": "nvarchar"
					},
					{
						"name": "n_pk",
						"type": "decimal",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_to_gst_type",
						"type": "decimal",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_print_format_code",
						"type": "nvarchar"
					},
					{
						"name": "c_cess_rev_act_code",
						"type": "nvarchar"
					},
					{
						"name": "c_cgst_rev_act_code",
						"type": "nvarchar"
					},
					{
						"name": "c_sgst_rev_act_code",
						"type": "nvarchar"
					},
					{
						"name": "c_igst_rev_act_code",
						"type": "nvarchar"
					},
					{
						"name": "n_service_chg",
						"type": "decimal",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_port_code",
						"type": "nvarchar"
					},
					{
						"name": "n_taxable_amt",
						"type": "decimal",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_pending_points",
						"type": "decimal",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_pay_ac1_flag",
						"type": "decimal",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_pay_ac2_flag",
						"type": "decimal",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_pay_ac3_flag",
						"type": "decimal",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_pay_ac4_flag",
						"type": "decimal",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_pay_ac5_flag",
						"type": "decimal",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "d_eway_bill_date",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "c_tran_gst_no",
						"type": "nvarchar"
					},
					{
						"name": "n_dist_km",
						"type": "decimal",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_service_amt_act_code",
						"type": "nvarchar"
					},
					{
						"name": "n_ip_det_seq",
						"type": "decimal",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_aadhar_no",
						"type": "nvarchar"
					},
					{
						"name": "c_doctor_address",
						"type": "nvarchar"
					},
					{
						"name": "c_act_sman_code",
						"type": "nvarchar"
					},
					{
						"name": "n_advance_amt",
						"type": "decimal",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_ord_br_code",
						"type": "nvarchar"
					},
					{
						"name": "c_ord_prefix",
						"type": "nvarchar"
					},
					{
						"name": "c_ord_year",
						"type": "nvarchar"
					},
					{
						"name": "n_ord_no",
						"type": "decimal",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_ord_pk",
						"type": "decimal",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_add_cess_amt",
						"type": "decimal",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_add_cess_act_code",
						"type": "nvarchar"
					},
					{
						"name": "n_cogs_amt",
						"type": "decimal",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_inventory_act_code",
						"type": "nvarchar"
					},
					{
						"name": "c_cogst_act_code",
						"type": "nvarchar"
					},
					{
						"name": "c_admin_br_code",
						"type": "nvarchar"
					},
					{
						"name": "n_tcs_per",
						"type": "decimal",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_tcs_taxable_amt",
						"type": "decimal",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_tcs_amt",
						"type": "decimal",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "upsert_key",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "inv_mst_temp"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Data360MSSQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/rnt_inv_det_InputFile')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage_LS1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "rtn_inv_det",
						"folderPath": "FullLoad",
						"container": "sales"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "c_br_code",
						"type": "UTF8"
					},
					{
						"name": "c_year",
						"type": "UTF8"
					},
					{
						"name": "c_prefix",
						"type": "UTF8"
					},
					{
						"name": "n_srno",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_seq",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "d_date",
						"type": "INT96"
					},
					{
						"name": "c_item_code",
						"type": "UTF8"
					},
					{
						"name": "c_batch_no",
						"type": "UTF8"
					},
					{
						"name": "n_qty",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_sch_qty",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_sch_disc",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_sale_rate",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_disc_per",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_st_per",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_cst_per",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_rst_per",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_tax_suffer",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_amount",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_mf_code",
						"type": "UTF8"
					},
					{
						"name": "n_2nd_sale",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_sp_sale_flag",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_cancel_flag",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "d_ldate",
						"type": "INT96"
					},
					{
						"name": "n_vaton",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_tax_on_sch_qty",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_vatts_mrp",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_mrp",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_remark",
						"type": "UTF8"
					},
					{
						"name": "n_tax_amt",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_free_tax_amt",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_print_batch",
						"type": "UTF8"
					},
					{
						"name": "d_print_exp_dt",
						"type": "INT96"
					},
					{
						"name": "n_eff_pur_rate",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_shift",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_remark2",
						"type": "UTF8"
					},
					{
						"name": "n_points",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "t_ltime",
						"type": "INT96"
					},
					{
						"name": "n_req_qty",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_allow_points",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_qty1",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_card_reverse_dis",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_dc_br_code",
						"type": "UTF8"
					},
					{
						"name": "c_dc_year",
						"type": "UTF8"
					},
					{
						"name": "c_dc_prefix",
						"type": "UTF8"
					},
					{
						"name": "n_dc_srno",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_dc_seq",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_remind_days",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_claim",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_order_br_code",
						"type": "UTF8"
					},
					{
						"name": "c_order_year",
						"type": "UTF8"
					},
					{
						"name": "c_order_prefix",
						"type": "UTF8"
					},
					{
						"name": "n_order_no",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_order_seq",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_claim_per",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "d_print_mfg_dt",
						"type": "INT96"
					},
					{
						"name": "c_ord_br_code",
						"type": "UTF8"
					},
					{
						"name": "c_ord_year",
						"type": "UTF8"
					},
					{
						"name": "c_ord_prefix",
						"type": "UTF8"
					},
					{
						"name": "n_ord_srno",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_ord_seq",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_cont_code",
						"type": "UTF8"
					},
					{
						"name": "n_verified_qty",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_claim_qty",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_claim_val",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_coupon_code",
						"type": "UTF8"
					},
					{
						"name": "c_coupon_srno",
						"type": "UTF8"
					},
					{
						"name": "n_store_track",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_claim_reason",
						"type": "UTF8"
					},
					{
						"name": "c_barcode",
						"type": "UTF8"
					},
					{
						"name": "c_sman_code",
						"type": "UTF8"
					},
					{
						"name": "c_godown_code",
						"type": "UTF8"
					},
					{
						"name": "n_stk_serial",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_bom_code",
						"type": "UTF8"
					},
					{
						"name": "n_bom_seq",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_item_tax_suffer",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_item_vatts_flag",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_item_vatts_mrp",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_item_tax_on_sch_qty",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_tray_Code",
						"type": "UTF8"
					},
					{
						"name": "n_marketplace_flag",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_quot_no",
						"type": "UTF8"
					},
					{
						"name": "n_ts_value",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_pick_seq",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_share_disc",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_ord_rate",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_ord_rate_diff",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_integration_code",
						"type": "UTF8"
					},
					{
						"name": "n_update_stock",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_adjust",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_currency",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_exchange_rate",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_gst_enabled",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_from_gst_type",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_hsn_sac_code",
						"type": "UTF8"
					},
					{
						"name": "n_cgst_per",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_cgst_amt",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_sgst_per",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_sgst_amt",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_igst_per",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_igst_amt",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_cess_per",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_cess_amt",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_pk",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_to_gst_type",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_gst_code",
						"type": "UTF8"
					},
					{
						"name": "n_stock_effect",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_adj_qty",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_dbnt_br_code",
						"type": "UTF8"
					},
					{
						"name": "c_dbnt_year",
						"type": "UTF8"
					},
					{
						"name": "c_dbnt_prefix",
						"type": "UTF8"
					},
					{
						"name": "n_dbnt_srno",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_dbnt_seq",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_taxable_amt",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_reason_code",
						"type": "UTF8"
					},
					{
						"name": "n_eff_pur_rate_incl_sch",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_act_code",
						"type": "UTF8"
					},
					{
						"name": "c_ref_no",
						"type": "UTF8"
					},
					{
						"name": "d_ref_date",
						"type": "INT96"
					},
					{
						"name": "c_doc_no",
						"type": "UTF8"
					},
					{
						"name": "c_cust_code",
						"type": "UTF8"
					},
					{
						"name": "n_qty_per_box",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_eb_load",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_eb_seq",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_approved",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_cogs_amt",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage_LS1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/rnt_inv_det_OutputTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Data360MSSQL",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "rnt_inv_det"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Data360MSSQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/rnt_inv_mst_InputFile')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage_LS1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "rtn_inv_mst",
						"folderPath": "FullLoad",
						"container": "sales"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "c_br_code",
						"type": "UTF8"
					},
					{
						"name": "c_year",
						"type": "UTF8"
					},
					{
						"name": "c_prefix",
						"type": "UTF8"
					},
					{
						"name": "n_srno",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "d_date",
						"type": "INT96"
					},
					{
						"name": "t_time",
						"type": "INT96"
					},
					{
						"name": "c_sman_code",
						"type": "UTF8"
					},
					{
						"name": "c_dman_code",
						"type": "UTF8"
					},
					{
						"name": "c_cust_code",
						"type": "UTF8"
					},
					{
						"name": "c_patient",
						"type": "UTF8"
					},
					{
						"name": "c_doctor_code",
						"type": "UTF8"
					},
					{
						"name": "c_doctor_name",
						"type": "UTF8"
					},
					{
						"name": "n_total",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_st",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_cst",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_rst",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_disc_rs",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_discount",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_other_charge",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_tax_suffer",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_discount_per",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_taxable_ret",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_non_taxable_ret",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_credit_act",
						"type": "UTF8"
					},
					{
						"name": "n_round_off",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_counter_sale",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_cnt_no",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_ok",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_cancel_flag",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "d_ldate",
						"type": "INT96"
					},
					{
						"name": "n_vaton",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_order_year",
						"type": "UTF8"
					},
					{
						"name": "c_order_prefix",
						"type": "UTF8"
					},
					{
						"name": "n_order_no",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_approved",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_shift",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_ipno",
						"type": "UTF8"
					},
					{
						"name": "c_remark",
						"type": "UTF8"
					},
					{
						"name": "c_patient_details",
						"type": "UTF8"
					},
					{
						"name": "c_card_bank_code",
						"type": "UTF8"
					},
					{
						"name": "c_ref_no",
						"type": "UTF8"
					},
					{
						"name": "c_user",
						"type": "UTF8"
					},
					{
						"name": "n_points",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_point_redeem",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_point_value",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_pcbc_charge",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "t_ltime",
						"type": "INT96"
					},
					{
						"name": "d_remind_date",
						"type": "INT96"
					},
					{
						"name": "n_card_reverse_dis",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_doctor_office_code",
						"type": "UTF8"
					},
					{
						"name": "c_mobile",
						"type": "UTF8"
					},
					{
						"name": "d_ref_dt",
						"type": "INT96"
					},
					{
						"name": "n_day_seq",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_lr_no",
						"type": "UTF8"
					},
					{
						"name": "d_lr_date",
						"type": "INT96"
					},
					{
						"name": "d_stock_sent_date",
						"type": "INT96"
					},
					{
						"name": "n_cases",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_credit_days",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_admin_settlement",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_terms_code",
						"type": "UTF8"
					},
					{
						"name": "c_reg_no",
						"type": "UTF8"
					},
					{
						"name": "c_email",
						"type": "UTF8"
					},
					{
						"name": "c_mr_code",
						"type": "UTF8"
					},
					{
						"name": "c_transport_code",
						"type": "UTF8"
					},
					{
						"name": "n_urgent",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_modiuser",
						"type": "UTF8"
					},
					{
						"name": "n_tender_amt",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_token_no",
						"type": "UTF8"
					},
					{
						"name": "c_coupon_code",
						"type": "UTF8"
					},
					{
						"name": "c_coupon_srno",
						"type": "UTF8"
					},
					{
						"name": "n_store_track",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_ip_br_code",
						"type": "UTF8"
					},
					{
						"name": "c_tran_type",
						"type": "UTF8"
					},
					{
						"name": "c_currency_code",
						"type": "UTF8"
					},
					{
						"name": "n_exchange_rate",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_computer_name",
						"type": "UTF8"
					},
					{
						"name": "c_sys_user",
						"type": "UTF8"
					},
					{
						"name": "c_sys_ip",
						"type": "UTF8"
					},
					{
						"name": "n_multi_payment",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_pay_code1",
						"type": "UTF8"
					},
					{
						"name": "n_pay_amt1",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_pay_ac_code1",
						"type": "UTF8"
					},
					{
						"name": "c_pay_code2",
						"type": "UTF8"
					},
					{
						"name": "n_pay_amt2",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_pay_ac_code2",
						"type": "UTF8"
					},
					{
						"name": "c_pay_code3",
						"type": "UTF8"
					},
					{
						"name": "n_pay_amt3",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_pay_ac_code3",
						"type": "UTF8"
					},
					{
						"name": "c_pay_code4",
						"type": "UTF8"
					},
					{
						"name": "n_pay_amt4",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_pay_ac_code4",
						"type": "UTF8"
					},
					{
						"name": "c_pay_code5",
						"type": "UTF8"
					},
					{
						"name": "n_pay_amt5",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_pay_ac_code5",
						"type": "UTF8"
					},
					{
						"name": "n_marketplace_flag",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_trader_code",
						"type": "UTF8"
					},
					{
						"name": "n_trader_comm_total",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_trader_charge_total",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_trader_charge1_total",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_inter_pur",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_order_id",
						"type": "UTF8"
					},
					{
						"name": "c_debit_act_code",
						"type": "UTF8"
					},
					{
						"name": "c_vat_act_code",
						"type": "UTF8"
					},
					{
						"name": "c_purord_no",
						"type": "UTF8"
					},
					{
						"name": "n_share_disc",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_integration_code",
						"type": "UTF8"
					},
					{
						"name": "c_cst_act_code",
						"type": "UTF8"
					},
					{
						"name": "c_st_act_code",
						"type": "UTF8"
					},
					{
						"name": "c_amt_act_code",
						"type": "UTF8"
					},
					{
						"name": "c_disc_act_code",
						"type": "UTF8"
					},
					{
						"name": "c_discrs_act_code",
						"type": "UTF8"
					},
					{
						"name": "c_oth_act_code",
						"type": "UTF8"
					},
					{
						"name": "n_update_stock",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "t_from_time",
						"type": "INT96"
					},
					{
						"name": "t_to_time",
						"type": "INT96"
					},
					{
						"name": "c_note",
						"type": "UTF8"
					},
					{
						"name": "n_point_factor",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_gst_enabled",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_from_gst_no",
						"type": "UTF8"
					},
					{
						"name": "n_from_gst_type",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_to_gst_no",
						"type": "UTF8"
					},
					{
						"name": "n_sale_type",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_cgst_act_code",
						"type": "UTF8"
					},
					{
						"name": "n_cgst_amt",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_sgst_act_code",
						"type": "UTF8"
					},
					{
						"name": "n_sgst_amt",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_igst_act_code",
						"type": "UTF8"
					},
					{
						"name": "n_igst_amt",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_cess_act_code",
						"type": "UTF8"
					},
					{
						"name": "n_cess_amt",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_state_code",
						"type": "UTF8"
					},
					{
						"name": "c_eway_bill_no",
						"type": "UTF8"
					},
					{
						"name": "n_pk",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_to_gst_type",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_print_format_code",
						"type": "UTF8"
					},
					{
						"name": "c_cess_rev_act_code",
						"type": "UTF8"
					},
					{
						"name": "c_cgst_rev_act_code",
						"type": "UTF8"
					},
					{
						"name": "c_sgst_rev_act_code",
						"type": "UTF8"
					},
					{
						"name": "c_igst_rev_act_code",
						"type": "UTF8"
					},
					{
						"name": "n_taxable_amt",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_reason_code",
						"type": "UTF8"
					},
					{
						"name": "d_eway_bill_date",
						"type": "INT96"
					},
					{
						"name": "c_tran_gst_no",
						"type": "UTF8"
					},
					{
						"name": "n_dist_km",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_cogs_amt",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_cogst_act_code",
						"type": "UTF8"
					},
					{
						"name": "c_inventory_act_code",
						"type": "UTF8"
					},
					{
						"name": "c_admin_br_code",
						"type": "UTF8"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage_LS1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/rnt_inv_mst_OutputTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Data360MSSQL",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "rnt_inv_mst"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Data360MSSQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/stock_godown_OutputTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Data360MSSQL",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "stock_godown"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Data360MSSQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/summaryInvmstInputFile')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage_LS1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "inv_mst",
						"folderPath": "extratablesfull1/sales/FullLoad",
						"container": "summary"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "c_br_code",
						"type": "UTF8"
					},
					{
						"name": "c_year",
						"type": "UTF8"
					},
					{
						"name": "c_prefix",
						"type": "UTF8"
					},
					{
						"name": "n_srno",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "d_date",
						"type": "INT96"
					},
					{
						"name": "t_time",
						"type": "INT96"
					},
					{
						"name": "c_sman_code",
						"type": "UTF8"
					},
					{
						"name": "c_dman_code",
						"type": "UTF8"
					},
					{
						"name": "c_cust_code",
						"type": "UTF8"
					},
					{
						"name": "c_patient",
						"type": "UTF8"
					},
					{
						"name": "c_doctor_code",
						"type": "UTF8"
					},
					{
						"name": "c_doctor_name",
						"type": "UTF8"
					},
					{
						"name": "n_total",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_st",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_cst",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_rst",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_disc_rs",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_discount",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_other_charge",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_tax_suffer",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_discount_per",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_taxable_ret",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_non_taxable_ret",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_credit_act",
						"type": "UTF8"
					},
					{
						"name": "n_round_off",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_counter_sale",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_cnt_no",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_ok",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_cancel_flag",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "d_ldate",
						"type": "INT96"
					},
					{
						"name": "n_vaton",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_order_year",
						"type": "UTF8"
					},
					{
						"name": "c_order_prefix",
						"type": "UTF8"
					},
					{
						"name": "n_order_no",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_approved",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_shift",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_ipno",
						"type": "UTF8"
					},
					{
						"name": "c_remark",
						"type": "UTF8"
					},
					{
						"name": "c_patient_details",
						"type": "UTF8"
					},
					{
						"name": "c_card_bank_code",
						"type": "UTF8"
					},
					{
						"name": "c_ref_no",
						"type": "UTF8"
					},
					{
						"name": "c_user",
						"type": "UTF8"
					},
					{
						"name": "n_points",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_point_redeem",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_point_value",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_pcbc_charge",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "t_ltime",
						"type": "INT96"
					},
					{
						"name": "d_remind_date",
						"type": "INT96"
					},
					{
						"name": "n_card_reverse_dis",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_doctor_office_code",
						"type": "UTF8"
					},
					{
						"name": "c_mobile",
						"type": "UTF8"
					},
					{
						"name": "d_ref_dt",
						"type": "INT96"
					},
					{
						"name": "n_day_seq",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_lr_no",
						"type": "UTF8"
					},
					{
						"name": "d_lr_date",
						"type": "INT96"
					},
					{
						"name": "d_stock_sent_date",
						"type": "INT96"
					},
					{
						"name": "n_cases",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_credit_days",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_admin_settlement",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_terms_code",
						"type": "UTF8"
					},
					{
						"name": "c_reg_no",
						"type": "UTF8"
					},
					{
						"name": "c_email",
						"type": "UTF8"
					},
					{
						"name": "c_mr_code",
						"type": "UTF8"
					},
					{
						"name": "c_transport_code",
						"type": "UTF8"
					},
					{
						"name": "n_urgent",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_modiuser",
						"type": "UTF8"
					},
					{
						"name": "n_tender_amt",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_token_no",
						"type": "UTF8"
					},
					{
						"name": "c_coupon_code",
						"type": "UTF8"
					},
					{
						"name": "c_coupon_srno",
						"type": "UTF8"
					},
					{
						"name": "n_store_track",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_ip_br_code",
						"type": "UTF8"
					},
					{
						"name": "c_tran_type",
						"type": "UTF8"
					},
					{
						"name": "c_currency_code",
						"type": "UTF8"
					},
					{
						"name": "n_exchange_rate",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_computer_name",
						"type": "UTF8"
					},
					{
						"name": "c_sys_user",
						"type": "UTF8"
					},
					{
						"name": "c_sys_ip",
						"type": "UTF8"
					},
					{
						"name": "n_multi_payment",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_pay_code1",
						"type": "UTF8"
					},
					{
						"name": "n_pay_amt1",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_pay_ac_code1",
						"type": "UTF8"
					},
					{
						"name": "c_pay_code2",
						"type": "UTF8"
					},
					{
						"name": "n_pay_amt2",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_pay_ac_code2",
						"type": "UTF8"
					},
					{
						"name": "c_pay_code3",
						"type": "UTF8"
					},
					{
						"name": "n_pay_amt3",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_pay_ac_code3",
						"type": "UTF8"
					},
					{
						"name": "c_pay_code4",
						"type": "UTF8"
					},
					{
						"name": "n_pay_amt4",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_pay_ac_code4",
						"type": "UTF8"
					},
					{
						"name": "c_pay_code5",
						"type": "UTF8"
					},
					{
						"name": "n_pay_amt5",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_pay_ac_code5",
						"type": "UTF8"
					},
					{
						"name": "n_marketplace_flag",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_trader_code",
						"type": "UTF8"
					},
					{
						"name": "n_trader_comm_total",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_trader_charge_total",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_trader_charge1_total",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_inter_pur",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_order_id",
						"type": "UTF8"
					},
					{
						"name": "c_debit_act_code",
						"type": "UTF8"
					},
					{
						"name": "c_vat_act_code",
						"type": "UTF8"
					},
					{
						"name": "c_purord_no",
						"type": "UTF8"
					},
					{
						"name": "n_share_disc",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_integration_code",
						"type": "UTF8"
					},
					{
						"name": "c_cst_act_code",
						"type": "UTF8"
					},
					{
						"name": "c_st_act_code",
						"type": "UTF8"
					},
					{
						"name": "c_amt_act_code",
						"type": "UTF8"
					},
					{
						"name": "c_disc_act_code",
						"type": "UTF8"
					},
					{
						"name": "c_discrs_act_code",
						"type": "UTF8"
					},
					{
						"name": "c_oth_act_code",
						"type": "UTF8"
					},
					{
						"name": "n_update_stock",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "t_from_time",
						"type": "INT96"
					},
					{
						"name": "t_to_time",
						"type": "INT96"
					},
					{
						"name": "c_note",
						"type": "UTF8"
					},
					{
						"name": "n_point_factor",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_gst_enabled",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_from_gst_no",
						"type": "UTF8"
					},
					{
						"name": "n_from_gst_type",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_to_gst_no",
						"type": "UTF8"
					},
					{
						"name": "n_sale_type",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_cgst_act_code",
						"type": "UTF8"
					},
					{
						"name": "n_cgst_amt",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_sgst_act_code",
						"type": "UTF8"
					},
					{
						"name": "n_sgst_amt",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_igst_act_code",
						"type": "UTF8"
					},
					{
						"name": "n_igst_amt",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_cess_act_code",
						"type": "UTF8"
					},
					{
						"name": "n_cess_amt",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_state_code",
						"type": "UTF8"
					},
					{
						"name": "c_eway_bill_no",
						"type": "UTF8"
					},
					{
						"name": "n_pk",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_to_gst_type",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_print_format_code",
						"type": "UTF8"
					},
					{
						"name": "c_cess_rev_act_code",
						"type": "UTF8"
					},
					{
						"name": "c_cgst_rev_act_code",
						"type": "UTF8"
					},
					{
						"name": "c_sgst_rev_act_code",
						"type": "UTF8"
					},
					{
						"name": "c_igst_rev_act_code",
						"type": "UTF8"
					},
					{
						"name": "n_service_chg",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_port_code",
						"type": "UTF8"
					},
					{
						"name": "n_taxable_amt",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_pending_points",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_pay_ac1_flag",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_pay_ac2_flag",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_pay_ac3_flag",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_pay_ac4_flag",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_pay_ac5_flag",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "d_eway_bill_date",
						"type": "INT96"
					},
					{
						"name": "c_tran_gst_no",
						"type": "UTF8"
					},
					{
						"name": "n_dist_km",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_service_amt_act_code",
						"type": "UTF8"
					},
					{
						"name": "n_ip_det_seq",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_aadhar_no",
						"type": "UTF8"
					},
					{
						"name": "c_doctor_address",
						"type": "UTF8"
					},
					{
						"name": "c_act_sman_code",
						"type": "UTF8"
					},
					{
						"name": "n_advance_amt",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_ord_br_code",
						"type": "UTF8"
					},
					{
						"name": "c_ord_prefix",
						"type": "UTF8"
					},
					{
						"name": "c_ord_year",
						"type": "UTF8"
					},
					{
						"name": "n_ord_no",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_ord_pk",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_add_cess_amt",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_add_cess_act_code",
						"type": "UTF8"
					},
					{
						"name": "n_cogs_amt",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "c_inventory_act_code",
						"type": "UTF8"
					},
					{
						"name": "c_cogst_act_code",
						"type": "UTF8"
					},
					{
						"name": "c_admin_br_code",
						"type": "UTF8"
					},
					{
						"name": "n_tcs_per",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_tcs_taxable_amt",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "n_tcs_amt",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage_LS1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage_LS')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "AzureKeyVault_LS",
							"type": "LinkedServiceReference"
						},
						"secretName": "[parameters('AzureBlobStorage_LS_properties_typeProperties_connectionString_secretName')]"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureKeyVault_LS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage_LS1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage_LS1_connectionString')]",
					"accountKey": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "AzureKeyVault_LS",
							"type": "LinkedServiceReference"
						},
						"secretName": "wellnessforeveradls-secret"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureKeyVault_LS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureDataLakeStorage1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('AzureDataLakeStorage1_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('AzureDataLakeStorage1_accountKey')]"
					}
				},
				"connectVia": {
					"referenceName": "SybaseIRMaster",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/SybaseIRMaster')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureDatabricks_Logesys')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureDatabricks",
				"typeProperties": {
					"domain": "https://adb-7105904630102323.3.azuredatabricks.net",
					"accessToken": {
						"type": "SecureString",
						"value": "[parameters('AzureDatabricks_Logesys_accessToken')]"
					},
					"existingClusterId": "1122-102848-2eaj6fo7"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureKeyVault1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('AzureKeyVault1_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureKeyVault_LS')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('AzureKeyVault_LS_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Data360MSSQL')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": "[parameters('Data360MSSQL_connectionString')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "AzureKeyVault1",
							"type": "LinkedServiceReference"
						},
						"secretName": "D360-PWD"
					}
				},
				"connectVia": {
					"referenceName": "Wellness-IntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/Wellness-IntegrationRuntime')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureKeyVault1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/EG21')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Ecogreen2021",
				"annotations": [],
				"type": "Sybase",
				"typeProperties": {
					"server": "[parameters('EG21_properties_typeProperties_server')]",
					"database": "[parameters('EG21_properties_typeProperties_database')]",
					"authenticationType": "Basic",
					"username": "[parameters('EG21_properties_typeProperties_username')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "AzureKeyVault1",
							"type": "LinkedServiceReference"
						},
						"secretName": "EG2021-pwd"
					}
				},
				"connectVia": {
					"referenceName": "SybaseIRMaster",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/SybaseIRMaster')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureKeyVault1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/OMSMySql1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "MySql",
				"typeProperties": {
					"connectionString": "[parameters('OMSMySql1_connectionString')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "AzureKeyVault1",
							"type": "LinkedServiceReference"
						},
						"secretName": "OMSNewPawd"
					}
				},
				"connectVia": {
					"referenceName": "Wellness-IntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/Wellness-IntegrationRuntime')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureKeyVault1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/RestService_MRP_API')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('RestService_MRP_API_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/wellness_cold')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('wellness_cold_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Appsflyer Data Incremental Load')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "Incremental Load Appsflyer Master",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2021-10-29T09:15:00",
						"timeZone": "India Standard Time"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Incremental Load Appsflyer Master')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Daily T-7 Amzaon Order Details Incremental Load')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "Daily T-7 Amzaon Order Details Incremental Load",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2022-02-24T09:15:00",
						"timeZone": "India Standard Time",
						"schedule": {
							"minutes": [
								15
							],
							"hours": [
								9
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Daily T-7 Amzaon Order Details Incremental Load')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Daily T-7 Cancel Order Details Incremental Load')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "Daily T-7 Cancel Order Details Incremental Load",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2022-02-24T09:15:00",
						"timeZone": "India Standard Time",
						"schedule": {
							"minutes": [
								15
							],
							"hours": [
								9
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Daily T-7 Cancel Order Details Incremental Load')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Daily T-7 Invoice Master Incremental Load')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "Daily T-7 Invoice Master Incremental Load",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2022-02-23T09:15:00",
						"timeZone": "India Standard Time",
						"schedule": {
							"minutes": [
								0
							],
							"hours": [
								8
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Daily T-7 Invoice Master Incremental Load')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Daily T-7 OMS Order Details Incremental Load')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "Daily T-7 OMS Order Details Incremental Load",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2022-02-24T09:15:00",
						"timeZone": "India Standard Time",
						"schedule": {
							"minutes": [
								15
							],
							"hours": [
								9
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Daily T-7 OMS Order Details Incremental Load')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Full Load Channel Master')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "Full Load Channel Master",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2022-02-24T09:15:00",
						"timeZone": "India Standard Time"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Full Load Channel Master')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Full Load Customer Retention')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "Full Load Customer Retention",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2022-03-09T10:00:00",
						"timeZone": "India Standard Time"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Full Load Customer Retention')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Full Load EG Product Master')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "Full Load EG Product Master",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2021-12-09T09:15:00",
						"timeZone": "India Standard Time"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Full Load EG Product Master')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Full Load Eco green Item Master')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "Full Load Item Master _Live_SKU",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2021-12-07T19:00:00",
						"timeZone": "India Standard Time"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Full Load Item Master _Live_SKU')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Full Load MRP Variance')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "Full Load MRP Variance",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2022-02-25T09:45:00",
						"timeZone": "India Standard Time"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Full Load MRP Variance')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Full Load Mega Menu')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "Full Load Mega Menu",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2022-02-24T08:30:00",
						"timeZone": "India Standard Time"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Full Load Mega Menu')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Full Load Product Master')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "Full Load Product Master",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2022-02-24T09:15:00",
						"timeZone": "India Standard Time"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Full Load Product Master')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Full Load Store Master')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "Full Load Store Master",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2022-02-24T09:15:00",
						"timeZone": "India Standard Time"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Full Load Store Master')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/HelthTech_GC793_Debit_HelthTech_751_Credit')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "HelthTech_GC793_Debit_HelthTech_751_Credit",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2022-01-12T10:10:00",
						"timeZone": "India Standard Time"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/HelthTech_GC793_Debit_HelthTech_751_Credit')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/HelthTech_Sale_Debit_HelthTech_JO_JV_751_701_Credit')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "HelthTech_Sale_Debit_HelthTech_JO_JV_751_701_Credit",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2022-02-26T10:00:00",
						"timeZone": "India Standard Time"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/HelthTech_Sale_Debit_HelthTech_JO_JV_751_701_Credit')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Inv_Order_Amazon_Incremental_Load')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2021-10-11T09:15:00",
						"timeZone": "India Standard Time"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Medicare_000_Debit_HelthTech_751_Credit')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "Medicare_000_Debit_HelthTech_751_Credit",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2022-01-12T10:00:00",
						"timeZone": "India Standard Time"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Medicare_000_Debit_HelthTech_751_Credit')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Medicare_S14278_Debit_Helthtech_GC238_Credit')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "Medicare_S14278_Debit_Helthtech_GC238_Credit",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2022-01-12T10:00:00",
						"timeZone": "India Standard Time"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Medicare_S14278_Debit_Helthtech_GC238_Credit')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Upsert for invoice Master')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "Upsert Incremental For inv Master",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2021-12-14T15:45:00",
						"timeZone": "India Standard Time"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Upsert Incremental For inv Master')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SybaseIRMaster')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "SelfHosted",
				"typeProperties": {
					"linkedInfo": {
						"resourceId": "[parameters('SybaseIRMaster_properties_typeProperties_linkedInfo_resourceId')]",
						"authorizationType": "Rbac"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Wellness-IntegrationRuntime')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "SelfHosted",
				"typeProperties": {
					"linkedInfo": {
						"resourceId": "[parameters('Wellness-IntegrationRuntime_properties_typeProperties_linkedInfo_resourceId')]",
						"authorizationType": "Rbac"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/integrationRuntime1')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "SelfHosted",
				"typeProperties": {
					"linkedInfo": {
						"resourceId": "[parameters('integrationRuntime1_properties_typeProperties_linkedInfo_resourceId')]",
						"authorizationType": "Rbac"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/selfHost-Wellness')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "SelfHosted",
				"typeProperties": {
					"linkedInfo": {
						"resourceId": "[parameters('selfHost-Wellness_properties_typeProperties_linkedInfo_resourceId')]",
						"authorizationType": "Rbac"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "MRP_Variance_JSONFile",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "MRP_Variance_CSVInputFile",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "flatten1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          availability as string,",
						"          competitors as (availability as string, discount as float, host as string, match_type as string, price as float, sku as string, url as string)[],",
						"          cost as boolean,",
						"          discount as float,",
						"          host as string,",
						"          id as string,",
						"          last_updated_at as string,",
						"          price as float,",
						"          sku as integer,",
						"          smart_price as float,",
						"          status as string,",
						"          url as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine',",
						"     dateFormats: ['yyyy-MM-dd'],",
						"     preferredIntegralType: 'integer',",
						"     preferredFractionalType: 'float') ~> source1",
						"source1 foldDown(unroll(competitors),",
						"     mapColumn(",
						"          sku,",
						"          host,",
						"          smart_price,",
						"          cost,",
						"          price,",
						"          discount,",
						"          availability,",
						"          url,",
						"          id,",
						"          last_updated_at,",
						"          status,",
						"          competitors_sku = competitors.sku,",
						"          competitors_availability = competitors.availability,",
						"          competitors_discount = competitors.discount,",
						"          competitors_price = competitors.price,",
						"          competitors_match_type = competitors.match_type,",
						"          competitors_host = competitors.host,",
						"          competitors_url = competitors.url",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten1",
						"flatten1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['MRP_Variance_CSVInputFile.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/MRP_Variance_JSONFile')]",
				"[concat(variables('factoryId'), '/datasets/MRP_Variance_CSVInputFile')]"
			]
		}
	]
}