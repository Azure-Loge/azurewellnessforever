{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "ADF-BIDevelopment"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/Full Load Store Master')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data Store Master",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "MySqlSource",
								"query": "select * from store;"
							},
							"sink": {
								"type": "SqlServerSink",
								"preCopyScript": "truncate table OMS_Store;",
								"tableOption": "autoCreate"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "id",
											"type": "Int32"
										},
										"sink": {
											"name": "id",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "store_id",
											"type": "String"
										},
										"sink": {
											"name": "store_id",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "store_name",
											"type": "String"
										},
										"sink": {
											"name": "store_name",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "branch",
											"type": "String"
										},
										"sink": {
											"name": "branch",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "fax",
											"type": "String"
										},
										"sink": {
											"name": "fax",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "email",
											"type": "String"
										},
										"sink": {
											"name": "email",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "password",
											"type": "String"
										},
										"sink": {
											"name": "password",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "phone",
											"type": "String"
										},
										"sink": {
											"name": "phone",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "fcm_token",
											"type": "String"
										},
										"sink": {
											"name": "fcm_token",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "device_type",
											"type": "String"
										},
										"sink": {
											"name": "device_type",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "store_address",
											"type": "String"
										},
										"sink": {
											"name": "store_address",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "device_id",
											"type": "String"
										},
										"sink": {
											"name": "device_id",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "country",
											"type": "String"
										},
										"sink": {
											"name": "country",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "state",
											"type": "String"
										},
										"sink": {
											"name": "state",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "city",
											"type": "String"
										},
										"sink": {
											"name": "city",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "pincode",
											"type": "Int32"
										},
										"sink": {
											"name": "pincode",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "vendor_id",
											"type": "Int32"
										},
										"sink": {
											"name": "vendor_id",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "lattitude",
											"type": "Decimal"
										},
										"sink": {
											"name": "lattitude",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 8,
											"precision": 10
										}
									},
									{
										"source": {
											"name": "longitude",
											"type": "Decimal"
										},
										"sink": {
											"name": "longitude",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 8,
											"precision": 10
										}
									},
									{
										"source": {
											"name": "status",
											"type": "Int32"
										},
										"sink": {
											"name": "status",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "deliver_phase",
											"type": "String"
										},
										"sink": {
											"name": "deliver_phase",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "grid_id",
											"type": "String"
										},
										"sink": {
											"name": "grid_id",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "vendorCode",
											"type": "String"
										},
										"sink": {
											"name": "vendorCode",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "landmark",
											"type": "String"
										},
										"sink": {
											"name": "landmark",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "nodeTypeName",
											"type": "String"
										},
										"sink": {
											"name": "nodeTypeName",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "parentNodeType",
											"type": "String"
										},
										"sink": {
											"name": "parentNodeType",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "rank",
											"type": "String"
										},
										"sink": {
											"name": "rank",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "special",
											"type": "String"
										},
										"sink": {
											"name": "special",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "dropShipmentVendorList",
											"type": "String"
										},
										"sink": {
											"name": "dropShipmentVendorList",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "createdBy",
											"type": "String"
										},
										"sink": {
											"name": "createdBy",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "updatedBy",
											"type": "String"
										},
										"sink": {
											"name": "updatedBy",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "created_at",
											"type": "DateTime"
										},
										"sink": {
											"name": "created_at",
											"type": "DateTime",
											"physicalType": "datetime2"
										}
									},
									{
										"source": {
											"name": "updatedAt",
											"type": "DateTime"
										},
										"sink": {
											"name": "updatedAt",
											"type": "DateTime",
											"physicalType": "datetime2"
										}
									},
									{
										"source": {
											"name": "store_hartbeat_status",
											"type": "Int32"
										},
										"sink": {
											"name": "store_hartbeat_status",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "heartbeat_update_date",
											"type": "String"
										},
										"sink": {
											"name": "heartbeat_update_date",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "area_manager",
											"type": "String"
										},
										"sink": {
											"name": "area_manager",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "area_manager_phone",
											"type": "String"
										},
										"sink": {
											"name": "area_manager_phone",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "territory_manager",
											"type": "String"
										},
										"sink": {
											"name": "territory_manager",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "territory_manager_phone",
											"type": "String"
										},
										"sink": {
											"name": "territory_manager_phone",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "store_manager",
											"type": "String"
										},
										"sink": {
											"name": "store_manager",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "store_manager_phone",
											"type": "String"
										},
										"sink": {
											"name": "store_manager_phone",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "shipping_providers",
											"type": "String"
										},
										"sink": {
											"name": "shipping_providers",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "last_syncdate",
											"type": "String"
										},
										"sink": {
											"name": "last_syncdate",
											"type": "String",
											"physicalType": "nvarchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "OMSMySqlTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "StoreMaster_OutPutTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Master"
				},
				"annotations": [],
				"lastPublishTime": "2021-12-24T03:58:00Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Full Load Wellness Medicare S14278 Debit')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data Medicare S14278 Debit",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Delete file",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SybaseSource",
								"query": "Select ( cogs.c_br_code ) as c_br_code,\n\t\t( cogs.c_year ) as c_year,   \n\t\t( cogs.c_prefix ) as c_prefix,   \n\t\t( cogs.n_tran_no ) as n_tran_no,   \n\t\t( cogs.c_act_code ) as c_act_code,   \n\t\t( cogs.d_date ) as d_date,   \n\t\tSUM( cogs.n_amount ) as n_amount,   \n\t\t( cogs.c_opp_act_code ) as c_opp_act_code,   \n\t\t( cogs.c_ref_br_code ) as c_ref_br_code,\n\t\t( cogs.c_ref_no ) as c_ref_no,   \n\t\t( cogs.d_chq_date) as d_chq_date,   \n\t\t( cogs.c_remark ) as c_remark,   \n\t\t( cogs.c_act_name ) as c_act_name,   \n\t\t( cogs.c_opp_act_name ) as c_opp_act_name,\n\t\t( cogs.c_add_1 ) as c_add_1,\n\t\t( cogs.c_add_2 ) as c_add_2, \n\t\t( cogs.c_add_3 ) as c_add_3,\n\t\t( cogs.c_city ) as c_city,\n\t\t( cogs.n_ref_srno ) as n_ref_srno,\n\t\t( cogs.n_order_no ) as n_order_no,\n\t\t( cogs.recon_dt) as recon_dt,\n\t\t( if recon_dt is null then 0 else 1 endif ) as chq_pass,\n\t\t( cogs.multi_act_name) as multi_act_name,\n\t\tisnull( case when n_amount  > 0 then n_amount else 0 end,0) as Debit,\n\t\tisnull( case when n_amount  < 0 then n_amount else 0 end,0) as credit\nFrom\n(\n\tSELECT ( ledger.c_br_code ) as c_br_code,\n\t\t\t( ledger.c_year ) as c_year,   \n\t\t\t( ledger.c_prefix ) as c_prefix,   \n\t\t\t( ledger.n_tran_no ) as n_tran_no,   \n\t\t\t( ledger.c_act_code ) as c_act_code,   \n\t\t\t( ledger.d_date ) as d_date,   \n\t\t\t( ledger.n_amount ) as n_amount,   \n\t\t\t( ledger.c_opp_act_code ) as c_opp_act_code,   \n\t\t\t( ledger.c_ref_br_code ) as c_ref_br_code,\n\t\t\t( settle_mst_header.c_ref_no ) as c_ref_no,   \n\t\t\tdate(settle_mst_header.d_ref_date) as d_chq_date,   \n\t\t\t( settle_mst_header.c_remark ) as c_remark,   \n\t\t\t( act_mst_a.c_name ) as c_act_name,   \n\t\t\t( act_mst_b.c_name ) as c_opp_act_name,\n\t\t\t( act_mst_a.c_add_1 ) as c_add_1,\n\t\t\t( act_mst_a.c_add_2 ) as c_add_2, \n\t\t\t( act_mst_a.c_add_3 ) as c_add_3,\n\t\t\t( act_mst_a.c_city ) as c_city,\n\t\t\t( grn_mst.n_ref_srno ) as n_ref_srno,\n\t\t\t( gdn_mst.n_order_no ) as n_order_no,\n\t\t\t(d_reconcile_date) as recon_dt,\n\t\t\t(if recon_dt is null then 0 else 1 endif) as chq_pass,\n\t\t\tif ledger.c_opp_act_code='~~~~~~~~~~~~' then \n\t\t\t\t(select list(ac.c_name+' : '+string(n_amount),char(13)) from ledger ll , act_mst ac  where ac.c_code=ll.c_act_code and\n\t\t\t\t\t\tll.c_br_code=ledger.c_br_code and ll.c_year=ledger.c_year\n\t\t\t\t\t\tand ll.c_prefix=ledger.c_prefix and ll.n_tran_no=ledger.n_tran_no and \n\t\t\t\t\t\t(ledger.n_amount<0 and ll.n_amount>0 or ledger.n_amount>0 and ll.n_amount<0))\n\t\t\telse '' endif as multi_act_name\n    FROM ledger\n\t\t\t\tinner join (select c_br_code as brcode from branch_group_det where length('000') = 6 and c_code = '000' and  branch_group_det.n_cancel_flag = 0 \n            union \n            select c_code from act_mst where length('000')<> 6 and c_code >= (if '000' = 'zzz' then '000' else '000' endif ) and ( c_code <= '000' ) \n            ) brlist on brlist.brcode=ledger.c_ref_br_code  \n\t\t\tleft outer join settle_mst_header  on  ledger.c_br_code = settle_mst_header.c_br_code  and \n\t\t\t ledger.c_year = settle_mst_header.c_year  and \n          ledger.c_prefix = settle_mst_header.c_prefix  and \n          ledger.n_tran_no = settle_mst_header.n_srno  \n          left outer join grn_mst on  ledger.c_br_code = grn_mst.c_br_code  and \n\t\t\t\tledger.c_year = grn_mst.c_year  and \n\t\t\t\tledger.c_prefix = grn_mst.c_prefix  and \n\t\t\t\tledger.n_tran_no = grn_mst.n_srno\n\t\t\tleft outer join gdn_mst  on  ledger.c_br_code = gdn_mst.c_br_code  and \n\t\t\t\tledger.c_year = gdn_mst.c_year  and \n\t\t\t\tledger.c_prefix = gdn_mst.c_prefix  and \n\t\t\t\tledger.n_tran_no = gdn_mst.n_srno\n\t\t\t\tleft outer join reconcile_mst  on  ledger.c_br_code= reconcile_mst.c_br_code and ledger.c_year = reconcile_mst.c_year and\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  ledger.c_prefix = reconcile_mst.c_prefix and  ledger.n_tran_no = reconcile_mst.n_srno, \n          act_mst act_mst_a,   \n         act_mst act_mst_b  \n   WHERE \n         ( act_mst_a.c_code = ledger.c_act_code ) and \n         ( act_mst_b.c_code = ledger.c_opp_act_code ) and\t\n         ( ( ledger.d_date >= '2021-10-01' ) and\t\n         ( ledger.d_date <= getDate() ) and \n         ( ledger.c_act_code >= 'S14278' ) and \n         ( ledger.c_act_code <= 'S14278' )   and\n\t\t\t( ledger.n_amount <> 0) )\n\tUnion All\n\t SELECT ( ledger.c_br_code ) as c_br_code,\n\t\t\t( ledger.c_year ) as c_year,   \n\t\t\t( ledger.c_prefix ) as c_prefix,   \n\t\t\t( ledger.n_tran_no ) as n_tran_no,   \n\t\t\t( ledger.c_act_code ) as c_act_code,   \n\t\t\t( ledger.d_date ) as d_date,   \n\t\t\t( ledger.n_amount ) as n_amount,   \n\t\t\t( ledger.c_opp_act_code ) as c_opp_act_code,   \n\t\t\t( ledger.c_ref_br_code ) as c_ref_br_code,\n\t\t\t( settle_mst_header.c_ref_no ) as c_ref_no,   \n\t\t\tdate(settle_mst_header.d_ref_date) as d_chq_date,   \n\t\t\t( settle_mst_header.c_remark ) as c_remark,   \n\t\t\t( act_mst_a.c_name ) as c_act_name,   \n\t\t\t( act_mst_b.c_name ) as c_opp_act_name,\n\t\t\t( act_mst_a.c_add_1 ) as c_add_1,\n\t\t\t( act_mst_a.c_add_2 ) as c_add_2, \n\t\t\t( act_mst_a.c_add_3 ) as c_add_3,\n\t\t\t( act_mst_a.c_city ) as c_city,\n\t\t\t( grn_mst.n_ref_srno ) as n_ref_srno,\n\t\t\t( gdn_mst.n_order_no ) as n_order_no,\n\t\t\t(d_reconcile_date) as recon_dt,\n\t\t\t(if recon_dt is null then 0 else 1 endif) as chq_pass,\n\t\t\tif ledger.c_opp_act_code='~~~~~~~~~~~~' then \n\t\t\t\t(select list(ac.c_name+' : '+string(n_amount),char(13)) from ledger ll , act_mst ac  where ac.c_code=ll.c_act_code and\n\t\t\t\t\t\tll.c_br_code=ledger.c_br_code and ll.c_year=ledger.c_year\n\t\t\t\t\t\tand ll.c_prefix=ledger.c_prefix and ll.n_tran_no=ledger.n_tran_no and \n\t\t\t\t\t\t(ledger.n_amount<0 and ll.n_amount>0 or ledger.n_amount>0 and ll.n_amount<0))\n\t\t\telse '' endif as multi_act_name\n    FROM cogs_ledger as ledger\n\t\t\t\tinner join (select c_br_code as brcode from branch_group_det where length('000') = 6 and c_code = '000' and  branch_group_det.n_cancel_flag = 0 \n            union \n            select c_code from act_mst where length('000')<> 6 and c_code >= (if '000' = 'zzz' then '000' else '000' endif ) and ( c_code <= '000' ) \n            ) brlist on brlist.brcode=ledger.c_ref_br_code  \n\t\t\tleft outer join settle_mst_header  on  ledger.c_br_code = settle_mst_header.c_br_code  and \n\t\t\t ledger.c_year = settle_mst_header.c_year  and \n          ledger.c_prefix = settle_mst_header.c_prefix  and \n          ledger.n_tran_no = settle_mst_header.n_srno  \n          left outer join grn_mst on  ledger.c_br_code = grn_mst.c_br_code  and \n\t\t\t\tledger.c_year = grn_mst.c_year  and \n\t\t\t\tledger.c_prefix = grn_mst.c_prefix  and \n\t\t\t\tledger.n_tran_no = grn_mst.n_srno\n\t\t\tleft outer join gdn_mst  on  ledger.c_br_code = gdn_mst.c_br_code  and \n\t\t\t\tledger.c_year = gdn_mst.c_year  and \n\t\t\t\tledger.c_prefix = gdn_mst.c_prefix  and \n\t\t\t\tledger.n_tran_no = gdn_mst.n_srno\n\t\t\t\tleft outer join reconcile_mst  on  ledger.c_br_code= reconcile_mst.c_br_code and ledger.c_year = reconcile_mst.c_year and\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  ledger.c_prefix = reconcile_mst.c_prefix and  ledger.n_tran_no = reconcile_mst.n_srno, \n          act_mst act_mst_a,   \n         act_mst act_mst_b  \n   WHERE \n         ( act_mst_a.c_code = ledger.c_act_code ) and \n         ( act_mst_b.c_code = ledger.c_opp_act_code ) and\t\n         ( ( ledger.d_date >= '2021-10-01' ) and\t\n         ( ledger.d_date <= getDate() ) and \n         ( ledger.c_act_code >= 'S14278' ) and \n         ( ledger.c_act_code <= 'S14278' )   and\n\t\t\t( ledger.n_amount <> 0) ) --and :li_cogs =1\n) as cogs\nGroup By c_br_code,c_year,c_prefix,n_tran_no,c_act_code,d_date,c_opp_act_code,c_ref_br_code,c_ref_no,   \n\t\td_chq_date,c_remark,c_act_name,c_opp_act_name,c_add_1,c_add_2,c_add_3,c_city,n_ref_srno,\n\t\tn_order_no,recon_dt,multi_act_name\nUNION   ALL\n  SELECT ('') as c_br_code,\n\t\t\t('00') as c_year,   \n         ('OP') as c_prefix,   \n         ( 0 ) as c_tran_no,   \n         ( ledger.c_act_code ) as c_act_code,   \n         ( date('2021-10-21')) as d_date,   \n         sum(ledger.n_amount) as n_amount,   \n         ( '' ) as c_opp_act_code,   \n         ( '' ) as c_ref_br_code,   \n         ( '' ) as c_ref_no,   \n         date('2021-10-21') as d_chq_date,   \n         ( '' ) as c_remark,   \n         ( act_mst.c_name ) as c_act_name,   \n         ( 'Opening Balance' ) as c_opp_act_name,\n\t\t\t( act_mst.c_add_1 )  as c_add_1,\n\t\t\t( act_mst.c_add_2 )  as c_add_2, \n\t\t\t( act_mst.c_add_3 )  as c_add_3,\n\t\t\t( act_mst.c_city ) as c_city,\n\t\t\t(0) as n_ref_srno,\n\t\t\t(0) as n_order_no,\n\t\t\t( null )  as recon_dt,\n\t\t\t( 0 )  \tas chq_pass,\n\t\t\t( '' ) as multi_act_name\t,\n\t\tisnull( case when n_amount  > 0 then n_amount else 0 end,0) as Debit,\n\t\tisnull( case when n_amount  < 0 then n_amount else 0 end,0) as credit\n    FROM dba.ledger\n\t\t\t\tinner join (select c_br_code as brcode from dba.branch_group_det where length('000') = 6 and c_code = '000' and  branch_group_det.n_cancel_flag = 0 \n            union \n            select c_code from dba.act_mst where length('000')<> 6 and c_code >= (if '000' = 'zzz' then '000' else '000' endif ) and ( c_code <= '000' ) \n            ) brlist on brlist.brcode=ledger.c_ref_br_code,  \n         act_mst  \n   WHERE ( act_mst.c_code = ledger.c_act_code ) and  \n         ( ( ledger.d_date <= getDate() ) and\t\n         ( ledger.c_act_code >= 'S14278' ) and\t\n         ( ledger.c_act_code <= 'S14278' ) )   \nGROUP BY c_act_code,c_act_name,c_add_1,c_add_2,c_add_3,c_city"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "Ds_Ecogreenv2",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "RL_Medicare_S14278_Debit",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Copy data Medicare S14278 File to Table",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Copy data Medicare S14278 Debit",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "SqlServerSink",
								"preCopyScript": "truncate table Medicare_S14278_Debit_Staging",
								"tableOption": "autoCreate"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "RL_Medicare_S14278_Debit",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "SQL_Medicare_S14278_Debit",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Delete file",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "RL_Medicare_S14278_Debit",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Reconciliation Ledgers"
				},
				"annotations": [],
				"lastPublishTime": "2022-01-05T10:19:51Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Full Load Wellness Medicare sale 751 Debit')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data medicare sale 751 Debit  into file",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Delete File",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SybaseSource",
								"query": "SELECT \nc_br_code,c_year,c_prefix,n_srno,d_date,c_cust_code,n_total,n_cancel_flag,c_order_id,\nn_taxable_amt,c_ord_br_code,c_ord_prefix,c_ord_year,n_ord_no\nFROM dba.inv_mst \nwhere c_cust_code = '751' and n_cancel_flag=0 and convert(date,d_date) > '2021-10-01'"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "Ds_Ecogreenv2",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "RL_Medicare_Sale_751_Debit",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Copy data file to Table",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Copy data medicare sale 751 Debit  into file",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "SqlServerSink",
								"preCopyScript": "truncate table Medicare_Sale_751_Debit_Staging",
								"tableOption": "autoCreate"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "RL_Medicare_Sale_751_Debit",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "SQL_Medicare_Sale_751_Debit",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Delete File",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "RL_Medicare_Sale_751_Debit",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Reconciliation Ledgers"
				},
				"annotations": [],
				"lastPublishTime": "2022-01-04T10:54:09Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Full Load dbnt_det')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data dbnt_det",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "SqlServerSink",
								"tableOption": "autoCreate"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "c_br_code",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_br_code",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "c_year",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_year",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "c_prefix",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_prefix",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "n_srno",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_srno",
											"type": "Decimal",
											"physicalType": "Decimal"
										}
									},
									{
										"source": {
											"name": "d_date",
											"type": "DateTime",
											"physicalType": "INT96"
										},
										"sink": {
											"name": "d_date",
											"type": "DateTime",
											"physicalType": "DateTime"
										}
									},
									{
										"source": {
											"name": "c_item_code",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_item_code",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "c_batch_no",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_batch_no",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "n_qty",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_qty",
											"type": "Decimal",
											"physicalType": "Decimal"
										}
									},
									{
										"source": {
											"name": "n_sale_rate",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_sale_rate",
											"type": "Decimal",
											"physicalType": "Decimal"
										}
									},
									{
										"source": {
											"name": "n_amount",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_amount",
											"type": "Decimal",
											"physicalType": "Decimal"
										}
									},
									{
										"source": {
											"name": "c_mf_code",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_mf_code",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "n_eff_pur_rate",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_eff_pur_rate",
											"type": "Decimal",
											"physicalType": "Decimal"
										}
									},
									{
										"source": {
											"name": "n_cogs_amt",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_cogs_amt",
											"type": "Decimal",
											"physicalType": "Decimal"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "dbnt_det_InputFile",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "dbnt_det_OutPutFile",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Expiry Analysis"
				},
				"annotations": [],
				"lastPublishTime": "2021-11-11T04:39:03Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Full Load dbnt_mst')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data dbtn_mst",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "SqlServerSink",
								"tableOption": "autoCreate"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "c_br_Code",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_br_Code",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "c_year",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_year",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "c_prefix",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_prefix",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "n_srno",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_srno",
											"type": "Decimal",
											"physicalType": "Decimal"
										}
									},
									{
										"source": {
											"name": "d_date",
											"type": "DateTime",
											"physicalType": "INT96"
										},
										"sink": {
											"name": "d_date",
											"type": "DateTime",
											"physicalType": "DateTime"
										}
									},
									{
										"source": {
											"name": "c_cust_code",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_cust_code",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "n_total",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_total",
											"type": "Decimal",
											"physicalType": "Decimal"
										}
									},
									{
										"source": {
											"name": "n_non_taxable_ret",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_non_taxable_ret",
											"type": "Decimal",
											"physicalType": "Decimal"
										}
									},
									{
										"source": {
											"name": "c_reason_code",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_reason_code",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "n_approved",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_approved",
											"type": "Decimal",
											"physicalType": "Decimal"
										}
									},
									{
										"source": {
											"name": "n_cogs_amt",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_cogs_amt",
											"type": "Decimal",
											"physicalType": "Decimal"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "dbtn_mst_InputFile",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "dbtn_mst_OutputTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Expiry Analysis"
				},
				"annotations": [],
				"lastPublishTime": "2021-11-11T04:29:47Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Full Load rtn inv mst')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data rnt_inv_mst",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "SqlServerSink",
								"tableOption": "autoCreate"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "c_br_code",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_br_code",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "c_year",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_year",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "c_prefix",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_prefix",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "n_srno",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_srno",
											"type": "Decimal",
											"physicalType": "Decimal"
										}
									},
									{
										"source": {
											"name": "d_date",
											"type": "DateTime",
											"physicalType": "INT96"
										},
										"sink": {
											"name": "d_date",
											"type": "DateTime",
											"physicalType": "DateTime"
										}
									},
									{
										"source": {
											"name": "t_time",
											"type": "DateTime",
											"physicalType": "INT96"
										},
										"sink": {
											"name": "t_time",
											"type": "DateTime",
											"physicalType": "DateTime"
										}
									},
									{
										"source": {
											"name": "c_cust_code",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_cust_code",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "c_patient",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_patient",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "c_reason_code",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_reason_code",
											"type": "String",
											"physicalType": "String"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "rnt_inv_mst_InputFile",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "rnt_inv_mst_OutputTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Expiry Analysis"
				},
				"annotations": [],
				"lastPublishTime": "2021-11-11T06:38:35Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Full Load rtn_inv_det')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data rnt_inv_det",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "SqlServerSink",
								"tableOption": "autoCreate"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "c_br_code",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_br_code",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "c_year",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_year",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "c_prefix",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_prefix",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "n_srno",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_srno",
											"type": "Decimal",
											"physicalType": "Decimal"
										}
									},
									{
										"source": {
											"name": "d_date",
											"type": "DateTime",
											"physicalType": "INT96"
										},
										"sink": {
											"name": "d_date",
											"type": "DateTime",
											"physicalType": "DateTime"
										}
									},
									{
										"source": {
											"name": "c_item_code",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_item_code",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "c_batch_no",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_batch_no",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "n_qty",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_qty",
											"type": "Decimal",
											"physicalType": "Decimal"
										}
									},
									{
										"source": {
											"name": "n_amount",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_amount",
											"type": "Decimal",
											"physicalType": "Decimal"
										}
									},
									{
										"source": {
											"name": "c_mf_code",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_mf_code",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "n_eff_pur_rate",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_eff_pur_rate",
											"type": "Decimal",
											"physicalType": "Decimal"
										}
									},
									{
										"source": {
											"name": "n_taxable_amt",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_taxable_amt",
											"type": "Decimal",
											"physicalType": "Decimal"
										}
									},
									{
										"source": {
											"name": "c_reason_code",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_reason_code",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "c_act_code",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_act_code",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "c_ref_no",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_ref_no",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "c_cust_code",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_cust_code",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "n_approved",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_approved",
											"type": "Decimal",
											"physicalType": "Decimal"
										}
									},
									{
										"source": {
											"name": "n_cogs_amt",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_cogs_amt",
											"type": "Decimal",
											"physicalType": "Decimal"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "rnt_inv_det_InputFile",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "rnt_inv_det_OutputTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Expiry Analysis"
				},
				"annotations": [],
				"lastPublishTime": "2021-11-11T04:16:12Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Full Load stock_mst')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data stock_mst",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "SqlServerSink",
								"preCopyScript": "truncate table Ex_Stock_Mst_Staging;",
								"tableOption": "autoCreate"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "c_item_code",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_item_code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "c_batch_no",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_batch_no",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "d_exp_dt",
											"type": "DateTime",
											"physicalType": "INT96"
										},
										"sink": {
											"name": "d_exp_dt",
											"type": "DateTime",
											"physicalType": "datetime2"
										}
									},
									{
										"source": {
											"name": "n_mrp",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_mrp",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_pur_rate",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_pur_rate",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_sale_rate",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_sale_rate",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_eff_pur_rate",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_eff_pur_rate",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_tax_suffer",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_tax_suffer",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_inc_exc_tax",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_inc_exc_tax",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_add_val",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_add_val",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_lock",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_lock",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_mrp_box",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_mrp_box",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_pur_rate_box",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_pur_rate_box",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_qty_per_box",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_qty_per_box",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "d_ldate",
											"type": "DateTime",
											"physicalType": "INT96"
										},
										"sink": {
											"name": "d_ldate",
											"type": "DateTime",
											"physicalType": "datetime2"
										}
									},
									{
										"source": {
											"name": "d_adate",
											"type": "DateTime",
											"physicalType": "INT96"
										},
										"sink": {
											"name": "d_adate",
											"type": "DateTime",
											"physicalType": "datetime2"
										}
									},
									{
										"source": {
											"name": "c_createuser",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_createuser",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "n_audited",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_audited",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_predefined",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_predefined",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_ptr_box",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_ptr_box",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_ptr",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_ptr",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "t_ltime",
											"type": "DateTime",
											"physicalType": "INT96"
										},
										"sink": {
											"name": "t_ltime",
											"type": "DateTime",
											"physicalType": "datetime2"
										}
									},
									{
										"source": {
											"name": "c_mfac_sh_name",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_mfac_sh_name",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "n_permanent_lock",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_permanent_lock",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "c_note",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_note",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "c_brand_name",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_brand_name",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "c_mfac_name",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_mfac_name",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "d_mfg_dt",
											"type": "DateTime",
											"physicalType": "INT96"
										},
										"sink": {
											"name": "d_mfg_dt",
											"type": "DateTime",
											"physicalType": "datetime2"
										}
									},
									{
										"source": {
											"name": "c_modiuser",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_modiuser",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "n_qc_per1",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_qc_per1",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_qc_per2",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_qc_per2",
											"type": "Double",
											"physicalType": "float"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "Stock_Mst_InputFile",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "EAStock_MstOutPutTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Stored procedure update Column",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy data stock_mst",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[usp_Expiry_Stock_Mst_Update_Column]"
						},
						"linkedServiceName": {
							"referenceName": "Data360MSSQL",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Expiry Analysis"
				},
				"annotations": [],
				"lastPublishTime": "2021-11-13T13:36:00Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/FullLoad EG Inv_Det')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data EG Inv_Det",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Delete EG Inv_Det",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SybaseSource",
								"query": "Select * from inv_det where convert(date,d_date) between '2022-02-14' and '2022-02-15'"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "Ds_Ecogreenv2",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "EG_Inv_Det_OutPutFile",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Copy data EG Inv_det file to Table",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Copy data EG Inv_Det",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "SqlServerSink",
								"preCopyScript": "Truncate table Inv_Det_Staging",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "c_br_code",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_br_code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "c_year",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_year",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "c_prefix",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_prefix",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "n_srno",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_srno",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_seq",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_seq",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "d_date",
											"type": "DateTime",
											"physicalType": "INT96"
										},
										"sink": {
											"name": "d_date",
											"type": "DateTime",
											"physicalType": "datetime2"
										}
									},
									{
										"source": {
											"name": "c_item_code",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_item_code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "c_batch_no",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_batch_no",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "n_qty",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_qty",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_sch_qty",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_sch_qty",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_sch_disc",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_sch_disc",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_sale_rate",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_sale_rate",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_disc_per",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_disc_per",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_st_per",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_st_per",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_cst_per",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_cst_per",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_rst_per",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_rst_per",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_tax_suffer",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_tax_suffer",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_amount",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_amount",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "c_mf_code",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_mf_code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "n_2nd_sale",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_2nd_sale",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_sp_sale_flag",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_sp_sale_flag",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_cancel_flag",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_cancel_flag",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "d_ldate",
											"type": "DateTime",
											"physicalType": "INT96"
										},
										"sink": {
											"name": "d_ldate",
											"type": "DateTime",
											"physicalType": "datetime2"
										}
									},
									{
										"source": {
											"name": "n_vaton",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_vaton",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_tax_on_sch_qty",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_tax_on_sch_qty",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_vatts_mrp",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_vatts_mrp",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_mrp",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_mrp",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "c_remark",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_remark",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "n_tax_amt",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_tax_amt",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_free_tax_amt",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_free_tax_amt",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "c_print_batch",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_print_batch",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "d_print_exp_dt",
											"type": "DateTime",
											"physicalType": "INT96"
										},
										"sink": {
											"name": "d_print_exp_dt",
											"type": "DateTime",
											"physicalType": "datetime2"
										}
									},
									{
										"source": {
											"name": "n_eff_pur_rate",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_eff_pur_rate",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_shift",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_shift",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "c_remark2",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_remark2",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "n_points",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_points",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "t_ltime",
											"type": "DateTime",
											"physicalType": "INT96"
										},
										"sink": {
											"name": "t_ltime",
											"type": "DateTime",
											"physicalType": "datetime2"
										}
									},
									{
										"source": {
											"name": "n_req_qty",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_req_qty",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_allow_points",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_allow_points",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_qty1",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_qty1",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_card_reverse_dis",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_card_reverse_dis",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "c_dc_br_code",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_dc_br_code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "c_dc_year",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_dc_year",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "c_dc_prefix",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_dc_prefix",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "n_dc_srno",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_dc_srno",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_dc_seq",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_dc_seq",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_remind_days",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_remind_days",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_claim",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_claim",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "c_order_br_code",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_order_br_code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "c_order_year",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_order_year",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "c_order_prefix",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_order_prefix",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "n_order_no",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_order_no",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_order_seq",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_order_seq",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_claim_per",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_claim_per",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "d_print_mfg_dt",
											"type": "DateTime",
											"physicalType": "INT96"
										},
										"sink": {
											"name": "d_print_mfg_dt",
											"type": "DateTime",
											"physicalType": "datetime2"
										}
									},
									{
										"source": {
											"name": "c_ord_br_code",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_ord_br_code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "c_ord_year",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_ord_year",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "c_ord_prefix",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_ord_prefix",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "n_ord_srno",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_ord_srno",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_ord_seq",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_ord_seq",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "c_cont_code",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_cont_code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "n_verified_qty",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_verified_qty",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_claim_qty",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_claim_qty",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_claim_val",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_claim_val",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "c_coupon_code",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_coupon_code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "c_coupon_srno",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_coupon_srno",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "n_store_track",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_store_track",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "c_claim_reason",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_claim_reason",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "c_barcode",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_barcode",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "c_sman_code",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_sman_code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "c_godown_code",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_godown_code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "n_stk_serial",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_stk_serial",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "c_bom_code",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_bom_code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "n_bom_seq",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_bom_seq",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_item_tax_suffer",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_item_tax_suffer",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_item_vatts_flag",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_item_vatts_flag",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_item_vatts_mrp",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_item_vatts_mrp",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_item_tax_on_sch_qty",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_item_tax_on_sch_qty",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "c_tray_Code",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_tray_Code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "n_marketplace_flag",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_marketplace_flag",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "c_quot_no",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_quot_no",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "n_ts_value",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_ts_value",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_pick_seq",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_pick_seq",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_share_disc",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_share_disc",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_ord_rate",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_ord_rate",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_ord_rate_diff",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_ord_rate_diff",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "c_integration_code",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_integration_code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "n_update_stock",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_update_stock",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_adjust",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_adjust",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_currency",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_currency",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_exchange_rate",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_exchange_rate",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_gst_enabled",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_gst_enabled",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_from_gst_type",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_from_gst_type",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "c_hsn_sac_code",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_hsn_sac_code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "n_cgst_per",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_cgst_per",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_cgst_amt",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_cgst_amt",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_sgst_per",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_sgst_per",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_sgst_amt",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_sgst_amt",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_igst_per",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_igst_per",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_igst_amt",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_igst_amt",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_cess_per",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_cess_per",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_cess_amt",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_cess_amt",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_pk",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_pk",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_to_gst_type",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_to_gst_type",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "c_gst_code",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_gst_code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "n_taxable_amt",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_taxable_amt",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_inv_qty",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_inv_qty",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_ref_seq",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_ref_seq",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_ord_pk",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_ord_pk",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_dc_pk",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_dc_pk",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_purord_pk",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_purord_pk",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_std_disc_per",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_std_disc_per",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_total_discount",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_total_discount",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_hold_flag",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_hold_flag",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_print_seq",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_print_seq",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_eb_seq",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_eb_seq",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "c_eb_tray_Code",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_eb_tray_Code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "c_eb_doc_no",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_eb_doc_no",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "c_supp_code",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_supp_code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "n_eb_load",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_eb_load",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_add_cess_per",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_add_cess_per",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_add_cess_rev_excl",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_add_cess_rev_excl",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "n_cogs_amt",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "n_cogs_amt",
											"type": "Double",
											"physicalType": "float"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "EG_Inv_Det_OutPutFile",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "InvDetOutputTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Delete EG Inv_Det",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "EG_Inv_Det_OutPutFile",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Invoice"
				},
				"annotations": [],
				"lastPublishTime": "2022-02-23T11:49:43Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/FullLoad EG Inv_Mst')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data EG Inv_Mst",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Delete EG Inv_Mst",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SybaseSource",
								"query": "Select * from inv_mst where convert(date,d_date) between '2022-02-14' and '2022-02-15'"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "Ds_Ecogreenv2",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "EG_Inv_Mst_OutPutFile",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Copy data EG inv_mst File to table",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Copy data EG Inv_Mst",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "SqlServerSink",
								"preCopyScript": "Truncate table Inv_Mst_Staging",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "EG_Inv_Mst_OutPutFile",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "InvMstOutputTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Delete EG Inv_Mst",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "EG_Inv_Mst_OutPutFile",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Invoice"
				},
				"annotations": [],
				"lastPublishTime": "2022-02-23T11:49:43Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Grn Gdn')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Metadata",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "InventoryFolder",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "ForEach",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Metadata",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadata').output.childItems",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Copy data Grn Mst",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ParquetSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"modifiedDatetimeStart": "2021-06-02T00:00:00Z",
												"modifiedDatetimeEnd": "2021-06-11T00:00:00Z",
												"enablePartitionDiscovery": false
											}
										},
										"sink": {
											"type": "SqlServerSink",
											"tableOption": "autoCreate"
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "GrnMstInputFile",
											"type": "DatasetReference",
											"parameters": {
												"FolderName": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "GrnMstOutputTable",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								},
								{
									"name": "Copy data Gdn Mst",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Copy data Grn Mst",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ParquetSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"modifiedDatetimeStart": "2021-06-02T00:00:00Z",
												"modifiedDatetimeEnd": "2021-06-11T00:00:00Z",
												"enablePartitionDiscovery": false
											}
										},
										"sink": {
											"type": "SqlServerSink",
											"tableOption": "autoCreate"
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "GdnMstInputFile",
											"type": "DatasetReference",
											"parameters": {
												"FolderName": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "GdnMstOutputTable",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								},
								{
									"name": "Copy data Gdn Det",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Copy data Gdn Mst",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ParquetSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"modifiedDatetimeStart": "2021-06-02T00:00:00Z",
												"modifiedDatetimeEnd": "2021-06-11T00:00:00Z",
												"enablePartitionDiscovery": false
											}
										},
										"sink": {
											"type": "SqlServerSink"
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "c_br_code",
														"type": "String",
														"physicalType": "UTF8"
													},
													"sink": {
														"name": "c_br_code",
														"type": "Int32",
														"physicalType": "int"
													}
												},
												{
													"source": {
														"name": "c_item_code",
														"type": "String",
														"physicalType": "UTF8"
													},
													"sink": {
														"name": "gdn_item_code",
														"type": "Int64",
														"physicalType": "bigint"
													}
												},
												{
													"source": {
														"name": "d_ldate",
														"type": "DateTime",
														"physicalType": "INT96"
													},
													"sink": {
														"name": "d_idate",
														"type": "DateTime",
														"physicalType": "datetime"
													}
												},
												{
													"source": {
														"name": "c_year",
														"type": "String",
														"physicalType": "UTF8"
													},
													"sink": {
														"name": "c_year",
														"type": "Int32",
														"physicalType": "int"
													}
												},
												{
													"source": {
														"name": "c_prefix",
														"type": "String",
														"physicalType": "UTF8"
													},
													"sink": {
														"name": "c_prefix",
														"type": "String",
														"physicalType": "nvarchar"
													}
												},
												{
													"source": {
														"name": "n_srno",
														"type": "Decimal",
														"physicalType": "DECIMAL"
													},
													"sink": {
														"name": "n_srno",
														"type": "Int64",
														"physicalType": "bigint"
													}
												},
												{
													"source": {
														"name": "n_seq",
														"type": "Decimal",
														"physicalType": "DECIMAL"
													},
													"sink": {
														"name": "n_seq",
														"type": "Int32",
														"physicalType": "int"
													}
												},
												{
													"source": {
														"name": "d_date",
														"type": "DateTime",
														"physicalType": "INT96"
													},
													"sink": {
														"name": "d_date",
														"type": "DateTime",
														"physicalType": "datetime"
													}
												},
												{
													"source": {
														"name": "n_qty",
														"type": "Decimal",
														"physicalType": "DECIMAL"
													},
													"sink": {
														"name": "gdn_qty",
														"type": "Double",
														"physicalType": "float"
													}
												},
												{
													"source": {
														"name": "n_pur_rate",
														"type": "Decimal",
														"physicalType": "DECIMAL"
													},
													"sink": {
														"name": "n_pur_rate",
														"type": "Double",
														"physicalType": "float"
													}
												},
												{
													"source": {
														"name": "n_amount",
														"type": "Decimal",
														"physicalType": "DECIMAL"
													},
													"sink": {
														"name": "gdn_amount",
														"type": "Double",
														"physicalType": "float"
													}
												},
												{
													"source": {
														"name": "n_sale_rate",
														"type": "Decimal",
														"physicalType": "DECIMAL"
													},
													"sink": {
														"name": "n_sale_rate",
														"type": "Double",
														"physicalType": "float"
													}
												},
												{
													"source": {
														"name": "n_taxable_amt",
														"type": "Decimal",
														"physicalType": "DECIMAL"
													},
													"sink": {
														"name": "n_taxable_amt",
														"type": "Double",
														"physicalType": "float"
													}
												},
												{
													"source": {
														"name": "n_cogs_amt",
														"type": "Decimal",
														"physicalType": "DECIMAL"
													},
													"sink": {
														"name": "n_cogs_amt",
														"type": "Double",
														"physicalType": "float"
													}
												}
											],
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "GdnDetInputFile",
											"type": "DatasetReference",
											"parameters": {
												"FolderName": "@item().name"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "GdnDetOutputTable",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								},
								{
									"name": "Copy data Grn Det",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Copy data Gdn Det",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ParquetSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"sink": {
											"type": "SqlServerSink"
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "c_br_code",
														"type": "String",
														"physicalType": "UTF8"
													},
													"sink": {
														"name": "c_br_code",
														"type": "Int32",
														"physicalType": "int"
													}
												},
												{
													"source": {
														"name": "c_item_code",
														"type": "String",
														"physicalType": "UTF8"
													},
													"sink": {
														"name": "grn_item_code",
														"type": "Int64",
														"physicalType": "bigint"
													}
												},
												{
													"source": {
														"name": "c_year",
														"type": "String",
														"physicalType": "UTF8"
													},
													"sink": {
														"name": "c_year",
														"type": "Int32",
														"physicalType": "int"
													}
												},
												{
													"source": {
														"name": "c_prefix",
														"type": "String",
														"physicalType": "UTF8"
													},
													"sink": {
														"name": "c_prefix",
														"type": "String",
														"physicalType": "nvarchar"
													}
												},
												{
													"source": {
														"name": "n_srno",
														"type": "Decimal",
														"physicalType": "DECIMAL"
													},
													"sink": {
														"name": "n_srno",
														"type": "Int64",
														"physicalType": "bigint"
													}
												},
												{
													"source": {
														"name": "d_date",
														"type": "DateTime",
														"physicalType": "INT96"
													},
													"sink": {
														"name": "d_date",
														"type": "DateTime",
														"physicalType": "datetime"
													}
												},
												{
													"source": {
														"name": "n_qty",
														"type": "Decimal",
														"physicalType": "DECIMAL"
													},
													"sink": {
														"name": "grn_qty",
														"type": "Double",
														"physicalType": "float"
													}
												},
												{
													"source": {
														"name": "n_amount",
														"type": "Decimal",
														"physicalType": "DECIMAL"
													},
													"sink": {
														"name": "grn_amount",
														"type": "Double",
														"physicalType": "float"
													}
												}
											],
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "GrnDetInputFile",
											"type": "DatasetReference",
											"parameters": {
												"FolderName": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "GrnDetOutputTable",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2021-08-17T07:34:15Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/HelthTech_GC793_Debit_HelthTech_751_Credit')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Delete File HelthTech Sale GC793",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "RL_HelthTech_Sale_GC793_Debit",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "Copy data HelthTech Sale GC793 Debit",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Delete File HelthTech Sale GC793",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SybaseSource",
								"query": "SELECT c_br_code,c_year,c_prefix,n_srno,d_date,c_cust_code,c_order_id,n_total FROM dba.inv_mst where c_br_code = '751' and c_cust_code = 'GC793' and convert(date,d_date) > '2021-10-01'"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "Ds_Ecogreenv2",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "RL_HelthTech_Sale_GC793_Debit",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Copy data HelthTech Sale GC793 File to Table",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Copy data HelthTech Sale GC793 Debit",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "SqlServerSink",
								"tableOption": "autoCreate"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "RL_HelthTech_Sale_GC793_Debit",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "SQL_HelthTech_Sale_GC793_Debit",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Copy data HelthTech 751 File to Table",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "SqlServerSink",
								"tableOption": "autoCreate"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "RL_HelthTech_Purchase_751_Credit",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "SQL_HelthTech_Purchase_751_Credit",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Stored procedure get Final Data",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy data HelthTech Sale GC793 File to Table",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Copy data HelthTech 751 File to Table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[usp_HelthTech_GC793_Debit_HelthTech_751_Credit]"
						},
						"linkedServiceName": {
							"referenceName": "Data360MSSQL",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Reconciliation Ledgers/Final Ledgers"
				},
				"annotations": [],
				"lastPublishTime": "2022-01-11T09:47:07Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/HelthTech_Sale_Debit_HelthTech_JO_JV_751_701_Credit')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data HelthTech Sale 751  and 701 to File",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Delete File HelthTech Sale 751and701",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SybaseSource",
								"query": "SELECT c_br_code,c_year,c_prefix,n_srno,d_date,c_cust_code,c_order_id,n_total FROM dba.inv_mst where c_br_code in ('751' ,'701') and c_cust_code = 'GC793' and convert(date,d_date) > '2021-10-01'"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "Ds_Ecogreenv2",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "RL_HelthTech_Sale_751_701_Debit",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Copy dataHelthTech Sale 751 and 701 Debit File to Table",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Copy data HelthTech Sale 751  and 701 to File",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "SqlServerSink",
								"preCopyScript": "truncate table HelthTech_Sale_751_701_Debit_Staging",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "RL_HelthTech_Sale_751_701_Debit",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "SQL_HelthTech_Sale_751_701_Debit",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Delete File HelthTech Sale 751and701",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "RL_HelthTech_Sale_751_701_Debit",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "Copy data HelthTech JO-JV 751 and 701 Credit",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Delete HelthTech JO-JV 751and701 File",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SybaseSource",
								"query": "Select ( cogs.c_br_code ) as c_br_code,\n\t\t( cogs.c_year ) as c_year,   \n\t\t( cogs.c_prefix ) as c_prefix,   \n\t\t( cogs.n_tran_no ) as n_tran_no,   \n\t\t( cogs.c_act_code ) as c_act_code,   \n\t\t( cogs.d_date ) as d_date,   \n\t\tSUM( cogs.n_amount ) as n_amount,   \n\t\t( cogs.c_opp_act_code ) as c_opp_act_code,   \n\t\t( cogs.c_ref_br_code ) as c_ref_br_code,\n\t\t( cogs.c_ref_no ) as c_ref_no,   \n\t\t( cogs.d_chq_date) as d_chq_date,   \n\t\t( cogs.c_remark ) as c_remark,   \n\t\t( cogs.c_act_name ) as c_act_name,   \n\t\t( cogs.c_opp_act_name ) as c_opp_act_name,\n\t\t( cogs.c_add_1 ) as c_add_1,\n\t\t( cogs.c_add_2 ) as c_add_2, \n\t\t( cogs.c_add_3 ) as c_add_3,\n\t\t( cogs.c_city ) as c_city,\n\t\t( cogs.n_ref_srno ) as n_ref_srno,\n\t\t( cogs.n_order_no ) as n_order_no,\n\t\t( cogs.recon_dt) as recon_dt,\n\t\t( if recon_dt is null then 0 else 1 endif ) as chq_pass,\n\t\t( cogs.multi_act_name) as multi_act_name,\n\t\tisnull( case when n_amount  > 0 then n_amount else 0 end,0) as Debit,\n\t\tisnull( case when n_amount  < 0 then n_amount else 0 end,0) as credit\nFrom\n(\n\tSELECT ( ledger.c_br_code ) as c_br_code,\n\t\t\t( ledger.c_year ) as c_year,   \n\t\t\t( ledger.c_prefix ) as c_prefix,   \n\t\t\t( ledger.n_tran_no ) as n_tran_no,   \n\t\t\t( ledger.c_act_code ) as c_act_code,   \n\t\t\t( ledger.d_date ) as d_date,   \n\t\t\t( ledger.n_amount ) as n_amount,   \n\t\t\t( ledger.c_opp_act_code ) as c_opp_act_code,   \n\t\t\t( ledger.c_ref_br_code ) as c_ref_br_code,\n\t\t\t( settle_mst_header.c_ref_no ) as c_ref_no,   \n\t\t\tdate(settle_mst_header.d_ref_date) as d_chq_date,   \n\t\t\t( settle_mst_header.c_remark ) as c_remark,   \n\t\t\t( act_mst_a.c_name ) as c_act_name,   \n\t\t\t( act_mst_b.c_name ) as c_opp_act_name,\n\t\t\t( act_mst_a.c_add_1 ) as c_add_1,\n\t\t\t( act_mst_a.c_add_2 ) as c_add_2, \n\t\t\t( act_mst_a.c_add_3 ) as c_add_3,\n\t\t\t( act_mst_a.c_city ) as c_city,\n\t\t\t( grn_mst.n_ref_srno ) as n_ref_srno,\n\t\t\t( gdn_mst.n_order_no ) as n_order_no,\n\t\t\t(d_reconcile_date) as recon_dt,\n\t\t\t(if recon_dt is null then 0 else 1 endif) as chq_pass,\n\t\t\tif ledger.c_opp_act_code='~~~~~~~~~~~~' then \n\t\t\t\t(select list(ac.c_name+' : '+string(n_amount),char(13)) from ledger ll , act_mst ac  where ac.c_code=ll.c_act_code and\n\t\t\t\t\t\tll.c_br_code=ledger.c_br_code and ll.c_year=ledger.c_year\n\t\t\t\t\t\tand ll.c_prefix=ledger.c_prefix and ll.n_tran_no=ledger.n_tran_no and \n\t\t\t\t\t\t(ledger.n_amount<0 and ll.n_amount>0 or ledger.n_amount>0 and ll.n_amount<0))\n\t\t\telse '' endif as multi_act_name\n    FROM ledger\n\t\t\t\tinner join (select c_br_code as brcode from branch_group_det where length('701') = 6 and c_code = '701' and  branch_group_det.n_cancel_flag = 0 \n            union \n            select c_code from act_mst where length('701')<> 6 and c_code >= (if '701' = 'zzz' then '701' else '701' endif ) and ( c_code <= '701' ) \n            ) brlist on brlist.brcode=ledger.c_ref_br_code  \n\t\t\tleft outer join settle_mst_header  on  ledger.c_br_code = settle_mst_header.c_br_code  and \n\t\t\t ledger.c_year = settle_mst_header.c_year  and \n          ledger.c_prefix = settle_mst_header.c_prefix  and \n          ledger.n_tran_no = settle_mst_header.n_srno  \n          left outer join grn_mst on  ledger.c_br_code = grn_mst.c_br_code  and \n\t\t\t\tledger.c_year = grn_mst.c_year  and \n\t\t\t\tledger.c_prefix = grn_mst.c_prefix  and \n\t\t\t\tledger.n_tran_no = grn_mst.n_srno\n\t\t\tleft outer join gdn_mst  on  ledger.c_br_code = gdn_mst.c_br_code  and \n\t\t\t\tledger.c_year = gdn_mst.c_year  and \n\t\t\t\tledger.c_prefix = gdn_mst.c_prefix  and \n\t\t\t\tledger.n_tran_no = gdn_mst.n_srno\n\t\t\t\tleft outer join reconcile_mst  on  ledger.c_br_code= reconcile_mst.c_br_code and ledger.c_year = reconcile_mst.c_year and\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  ledger.c_prefix = reconcile_mst.c_prefix and  ledger.n_tran_no = reconcile_mst.n_srno, \n          act_mst act_mst_a,   \n         act_mst act_mst_b  \n   WHERE \n         ( act_mst_a.c_code = ledger.c_act_code ) and \n         ( act_mst_b.c_code = ledger.c_opp_act_code ) and\t\n         ( ( ledger.d_date >= '2021-10-01' ) and\t\n         ( ledger.d_date <= getDate() ) and \n         ( ledger.c_act_code >= 'GC793' ) and \n         ( ledger.c_act_code <= 'GC793' )   and\n\t\t\t( ledger.n_amount <> 0) )\n\tUnion All\n\t SELECT ( ledger.c_br_code ) as c_br_code,\n\t\t\t( ledger.c_year ) as c_year,   \n\t\t\t( ledger.c_prefix ) as c_prefix,   \n\t\t\t( ledger.n_tran_no ) as n_tran_no,   \n\t\t\t( ledger.c_act_code ) as c_act_code,   \n\t\t\t( ledger.d_date ) as d_date,   \n\t\t\t( ledger.n_amount ) as n_amount,   \n\t\t\t( ledger.c_opp_act_code ) as c_opp_act_code,   \n\t\t\t( ledger.c_ref_br_code ) as c_ref_br_code,\n\t\t\t( settle_mst_header.c_ref_no ) as c_ref_no,   \n\t\t\tdate(settle_mst_header.d_ref_date) as d_chq_date,   \n\t\t\t( settle_mst_header.c_remark ) as c_remark,   \n\t\t\t( act_mst_a.c_name ) as c_act_name,   \n\t\t\t( act_mst_b.c_name ) as c_opp_act_name,\n\t\t\t( act_mst_a.c_add_1 ) as c_add_1,\n\t\t\t( act_mst_a.c_add_2 ) as c_add_2, \n\t\t\t( act_mst_a.c_add_3 ) as c_add_3,\n\t\t\t( act_mst_a.c_city ) as c_city,\n\t\t\t( grn_mst.n_ref_srno ) as n_ref_srno,\n\t\t\t( gdn_mst.n_order_no ) as n_order_no,\n\t\t\t(d_reconcile_date) as recon_dt,\n\t\t\t(if recon_dt is null then 0 else 1 endif) as chq_pass,\n\t\t\tif ledger.c_opp_act_code='~~~~~~~~~~~~' then \n\t\t\t\t(select list(ac.c_name+' : '+string(n_amount),char(13)) from ledger ll , act_mst ac  where ac.c_code=ll.c_act_code and\n\t\t\t\t\t\tll.c_br_code=ledger.c_br_code and ll.c_year=ledger.c_year\n\t\t\t\t\t\tand ll.c_prefix=ledger.c_prefix and ll.n_tran_no=ledger.n_tran_no and \n\t\t\t\t\t\t(ledger.n_amount<0 and ll.n_amount>0 or ledger.n_amount>0 and ll.n_amount<0))\n\t\t\telse '' endif as multi_act_name\n    FROM cogs_ledger as ledger\n\t\t\t\tinner join (select c_br_code as brcode from branch_group_det where length('701') = 6 and c_code = '701' and  branch_group_det.n_cancel_flag = 0 \n            union \n            select c_code from act_mst where length('701')<> 6 and c_code >= (if '701' = 'zzz' then '701' else '701' endif ) and ( c_code <= '701' ) \n            ) brlist on brlist.brcode=ledger.c_ref_br_code  \n\t\t\tleft outer join settle_mst_header  on  ledger.c_br_code = settle_mst_header.c_br_code  and \n\t\t\t ledger.c_year = settle_mst_header.c_year  and \n          ledger.c_prefix = settle_mst_header.c_prefix  and \n          ledger.n_tran_no = settle_mst_header.n_srno  \n          left outer join grn_mst on  ledger.c_br_code = grn_mst.c_br_code  and \n\t\t\t\tledger.c_year = grn_mst.c_year  and \n\t\t\t\tledger.c_prefix = grn_mst.c_prefix  and \n\t\t\t\tledger.n_tran_no = grn_mst.n_srno\n\t\t\tleft outer join gdn_mst  on  ledger.c_br_code = gdn_mst.c_br_code  and \n\t\t\t\tledger.c_year = gdn_mst.c_year  and \n\t\t\t\tledger.c_prefix = gdn_mst.c_prefix  and \n\t\t\t\tledger.n_tran_no = gdn_mst.n_srno\n\t\t\t\tleft outer join reconcile_mst  on  ledger.c_br_code= reconcile_mst.c_br_code and ledger.c_year = reconcile_mst.c_year and\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  ledger.c_prefix = reconcile_mst.c_prefix and  ledger.n_tran_no = reconcile_mst.n_srno, \n          act_mst act_mst_a,   \n         act_mst act_mst_b  \n   WHERE \n         ( act_mst_a.c_code = ledger.c_act_code ) and \n         ( act_mst_b.c_code = ledger.c_opp_act_code ) and\t\n         ( ( ledger.d_date >= '2021-10-01' ) and\t\n         ( ledger.d_date <= getDate() ) and \n         ( ledger.c_act_code >= 'GC793' ) and \n         ( ledger.c_act_code <= 'GC793' )   and\n\t\t\t( ledger.n_amount <> 0) ) --and :li_cogs =1\n) as cogs \nGroup By c_br_code,c_year,c_prefix,n_tran_no,c_act_code,d_date,c_opp_act_code,c_ref_br_code,c_ref_no,   \n\t\td_chq_date,c_remark,c_act_name,c_opp_act_name,c_add_1,c_add_2,c_add_3,c_city,n_ref_srno,\n\t\tn_order_no,recon_dt,multi_act_name\nUNION   ALL\n  SELECT ('') as c_br_code,\n\t\t\t('00') as c_year,   \n         ('OP') as c_prefix,   \n         ( 0 ) as c_tran_no,   \n         ( ledger.c_act_code ) as c_act_code,   \n         ( date('2021-10-21')) as d_date,   \n         sum(ledger.n_amount) as n_amount,   \n         ( '' ) as c_opp_act_code,   \n         ( '' ) as c_ref_br_code,   \n         ( '' ) as c_ref_no,   \n         date('2021-10-21') as d_chq_date,   \n         ( '' ) as c_remark,   \n         ( act_mst.c_name ) as c_act_name,   \n         ( 'Opening Balance' ) as c_opp_act_name,\n\t\t\t( act_mst.c_add_1 )  as c_add_1,\n\t\t\t( act_mst.c_add_2 )  as c_add_2, \n\t\t\t( act_mst.c_add_3 )  as c_add_3,\n\t\t\t( act_mst.c_city ) as c_city,\n\t\t\t(0) as n_ref_srno,\n\t\t\t(0) as n_order_no,\n\t\t\t( null )  as recon_dt,\n\t\t\t( 0 )  \tas chq_pass,\n\t\t\t( '' ) as multi_act_name\t,\n\t\tisnull( case when n_amount  > 0 then n_amount else 0 end,0) as Debit,\n\t\tisnull( case when n_amount  < 0 then n_amount else 0 end,0) as credit\n    FROM dba.ledger\n\t\t\t\tinner join (select c_br_code as brcode from dba.branch_group_det where length('701') = 6 and c_code = '701' and  branch_group_det.n_cancel_flag = 0 \n            union \n            select c_code from dba.act_mst where length('701')<> 6 and c_code >= (if '701' = 'zzz' then '701' else '701' endif ) and ( c_code <= '701' ) \n            ) brlist on brlist.brcode=ledger.c_ref_br_code,  \n         act_mst  \n   WHERE ( act_mst.c_code = ledger.c_act_code ) and  \n         ( ( ledger.d_date <= getDate() ) and\t\n         ( ledger.c_act_code >= 'GC793' ) and\t\n         ( ledger.c_act_code <= 'GC793' ) )   \nGROUP BY c_act_code,c_act_name,c_add_1,c_add_2,c_add_3,c_city\n\n\nUNION\n\n\nSelect ( cogs.c_br_code ) as c_br_code,\n\t\t( cogs.c_year ) as c_year,   \n\t\t( cogs.c_prefix ) as c_prefix,   \n\t\t( cogs.n_tran_no ) as n_tran_no,   \n\t\t( cogs.c_act_code ) as c_act_code,   \n\t\t( cogs.d_date ) as d_date,   \n\t\tSUM( cogs.n_amount ) as n_amount,   \n\t\t( cogs.c_opp_act_code ) as c_opp_act_code,   \n\t\t( cogs.c_ref_br_code ) as c_ref_br_code,\n\t\t( cogs.c_ref_no ) as c_ref_no,   \n\t\t( cogs.d_chq_date) as d_chq_date,   \n\t\t( cogs.c_remark ) as c_remark,   \n\t\t( cogs.c_act_name ) as c_act_name,   \n\t\t( cogs.c_opp_act_name ) as c_opp_act_name,\n\t\t( cogs.c_add_1 ) as c_add_1,\n\t\t( cogs.c_add_2 ) as c_add_2, \n\t\t( cogs.c_add_3 ) as c_add_3,\n\t\t( cogs.c_city ) as c_city,\n\t\t( cogs.n_ref_srno ) as n_ref_srno,\n\t\t( cogs.n_order_no ) as n_order_no,\n\t\t( cogs.recon_dt) as recon_dt,\n\t\t( if recon_dt is null then 0 else 1 endif ) as chq_pass,\n\t\t( cogs.multi_act_name) as multi_act_name,\n\t\tisnull( case when n_amount  > 0 then n_amount else 0 end,0) as Debit,\n\t\tisnull( case when n_amount  < 0 then n_amount else 0 end,0) as credit\nFrom\n(\n\tSELECT ( ledger.c_br_code ) as c_br_code,\n\t\t\t( ledger.c_year ) as c_year,   \n\t\t\t( ledger.c_prefix ) as c_prefix,   \n\t\t\t( ledger.n_tran_no ) as n_tran_no,   \n\t\t\t( ledger.c_act_code ) as c_act_code,   \n\t\t\t( ledger.d_date ) as d_date,   \n\t\t\t( ledger.n_amount ) as n_amount,   \n\t\t\t( ledger.c_opp_act_code ) as c_opp_act_code,   \n\t\t\t( ledger.c_ref_br_code ) as c_ref_br_code,\n\t\t\t( settle_mst_header.c_ref_no ) as c_ref_no,   \n\t\t\tdate(settle_mst_header.d_ref_date) as d_chq_date,   \n\t\t\t( settle_mst_header.c_remark ) as c_remark,   \n\t\t\t( act_mst_a.c_name ) as c_act_name,   \n\t\t\t( act_mst_b.c_name ) as c_opp_act_name,\n\t\t\t( act_mst_a.c_add_1 ) as c_add_1,\n\t\t\t( act_mst_a.c_add_2 ) as c_add_2, \n\t\t\t( act_mst_a.c_add_3 ) as c_add_3,\n\t\t\t( act_mst_a.c_city ) as c_city,\n\t\t\t( grn_mst.n_ref_srno ) as n_ref_srno,\n\t\t\t( gdn_mst.n_order_no ) as n_order_no,\n\t\t\t(d_reconcile_date) as recon_dt,\n\t\t\t(if recon_dt is null then 0 else 1 endif) as chq_pass,\n\t\t\tif ledger.c_opp_act_code='~~~~~~~~~~~~' then \n\t\t\t\t(select list(ac.c_name+' : '+string(n_amount),char(13)) from ledger ll , act_mst ac  where ac.c_code=ll.c_act_code and\n\t\t\t\t\t\tll.c_br_code=ledger.c_br_code and ll.c_year=ledger.c_year\n\t\t\t\t\t\tand ll.c_prefix=ledger.c_prefix and ll.n_tran_no=ledger.n_tran_no and \n\t\t\t\t\t\t(ledger.n_amount<0 and ll.n_amount>0 or ledger.n_amount>0 and ll.n_amount<0))\n\t\t\telse '' endif as multi_act_name\n    FROM ledger\n\t\t\t\tinner join (select c_br_code as brcode from branch_group_det where length('751') = 6 and c_code = '751' and  branch_group_det.n_cancel_flag = 0 \n            union \n            select c_code from act_mst where length('751')<> 6 and c_code >= (if '751' = 'zzz' then '751' else '751' endif ) and ( c_code <= '751' ) \n            ) brlist on brlist.brcode=ledger.c_ref_br_code  \n\t\t\tleft outer join settle_mst_header  on  ledger.c_br_code = settle_mst_header.c_br_code  and \n\t\t\t ledger.c_year = settle_mst_header.c_year  and \n          ledger.c_prefix = settle_mst_header.c_prefix  and \n          ledger.n_tran_no = settle_mst_header.n_srno  \n          left outer join grn_mst on  ledger.c_br_code = grn_mst.c_br_code  and \n\t\t\t\tledger.c_year = grn_mst.c_year  and \n\t\t\t\tledger.c_prefix = grn_mst.c_prefix  and \n\t\t\t\tledger.n_tran_no = grn_mst.n_srno\n\t\t\tleft outer join gdn_mst  on  ledger.c_br_code = gdn_mst.c_br_code  and \n\t\t\t\tledger.c_year = gdn_mst.c_year  and \n\t\t\t\tledger.c_prefix = gdn_mst.c_prefix  and \n\t\t\t\tledger.n_tran_no = gdn_mst.n_srno\n\t\t\t\tleft outer join reconcile_mst  on  ledger.c_br_code= reconcile_mst.c_br_code and ledger.c_year = reconcile_mst.c_year and\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  ledger.c_prefix = reconcile_mst.c_prefix and  ledger.n_tran_no = reconcile_mst.n_srno, \n          act_mst act_mst_a,   \n         act_mst act_mst_b  \n   WHERE \n         ( act_mst_a.c_code = ledger.c_act_code ) and \n         ( act_mst_b.c_code = ledger.c_opp_act_code ) and\t\n         ( ( ledger.d_date >= '2021-10-01' ) and\t\n         ( ledger.d_date <= getDate() ) and \n         ( ledger.c_act_code >= 'GC793' ) and \n         ( ledger.c_act_code <= 'GC793' )   and\n\t\t\t( ledger.n_amount <> 0) )\n\tUnion All\n\t SELECT ( ledger.c_br_code ) as c_br_code,\n\t\t\t( ledger.c_year ) as c_year,   \n\t\t\t( ledger.c_prefix ) as c_prefix,   \n\t\t\t( ledger.n_tran_no ) as n_tran_no,   \n\t\t\t( ledger.c_act_code ) as c_act_code,   \n\t\t\t( ledger.d_date ) as d_date,   \n\t\t\t( ledger.n_amount ) as n_amount,   \n\t\t\t( ledger.c_opp_act_code ) as c_opp_act_code,   \n\t\t\t( ledger.c_ref_br_code ) as c_ref_br_code,\n\t\t\t( settle_mst_header.c_ref_no ) as c_ref_no,   \n\t\t\tdate(settle_mst_header.d_ref_date) as d_chq_date,   \n\t\t\t( settle_mst_header.c_remark ) as c_remark,   \n\t\t\t( act_mst_a.c_name ) as c_act_name,   \n\t\t\t( act_mst_b.c_name ) as c_opp_act_name,\n\t\t\t( act_mst_a.c_add_1 ) as c_add_1,\n\t\t\t( act_mst_a.c_add_2 ) as c_add_2, \n\t\t\t( act_mst_a.c_add_3 ) as c_add_3,\n\t\t\t( act_mst_a.c_city ) as c_city,\n\t\t\t( grn_mst.n_ref_srno ) as n_ref_srno,\n\t\t\t( gdn_mst.n_order_no ) as n_order_no,\n\t\t\t(d_reconcile_date) as recon_dt,\n\t\t\t(if recon_dt is null then 0 else 1 endif) as chq_pass,\n\t\t\tif ledger.c_opp_act_code='~~~~~~~~~~~~' then \n\t\t\t\t(select list(ac.c_name+' : '+string(n_amount),char(13)) from ledger ll , act_mst ac  where ac.c_code=ll.c_act_code and\n\t\t\t\t\t\tll.c_br_code=ledger.c_br_code and ll.c_year=ledger.c_year\n\t\t\t\t\t\tand ll.c_prefix=ledger.c_prefix and ll.n_tran_no=ledger.n_tran_no and \n\t\t\t\t\t\t(ledger.n_amount<0 and ll.n_amount>0 or ledger.n_amount>0 and ll.n_amount<0))\n\t\t\telse '' endif as multi_act_name\n    FROM cogs_ledger as ledger\n\t\t\t\tinner join (select c_br_code as brcode from branch_group_det where length('751') = 6 and c_code = '751' and  branch_group_det.n_cancel_flag = 0 \n            union \n            select c_code from act_mst where length('751')<> 6 and c_code >= (if '751' = 'zzz' then '751' else '751' endif ) and ( c_code <= '751' ) \n            ) brlist on brlist.brcode=ledger.c_ref_br_code  \n\t\t\tleft outer join settle_mst_header  on  ledger.c_br_code = settle_mst_header.c_br_code  and \n\t\t\t ledger.c_year = settle_mst_header.c_year  and \n          ledger.c_prefix = settle_mst_header.c_prefix  and \n          ledger.n_tran_no = settle_mst_header.n_srno  \n          left outer join grn_mst on  ledger.c_br_code = grn_mst.c_br_code  and \n\t\t\t\tledger.c_year = grn_mst.c_year  and \n\t\t\t\tledger.c_prefix = grn_mst.c_prefix  and \n\t\t\t\tledger.n_tran_no = grn_mst.n_srno\n\t\t\tleft outer join gdn_mst  on  ledger.c_br_code = gdn_mst.c_br_code  and \n\t\t\t\tledger.c_year = gdn_mst.c_year  and \n\t\t\t\tledger.c_prefix = gdn_mst.c_prefix  and \n\t\t\t\tledger.n_tran_no = gdn_mst.n_srno\n\t\t\t\tleft outer join reconcile_mst  on  ledger.c_br_code= reconcile_mst.c_br_code and ledger.c_year = reconcile_mst.c_year and\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  ledger.c_prefix = reconcile_mst.c_prefix and  ledger.n_tran_no = reconcile_mst.n_srno, \n          act_mst act_mst_a,   \n         act_mst act_mst_b  \n   WHERE \n         ( act_mst_a.c_code = ledger.c_act_code ) and \n         ( act_mst_b.c_code = ledger.c_opp_act_code ) and\t\n         ( ( ledger.d_date >= '2021-10-01' ) and\t\n         ( ledger.d_date <= getDate() ) and \n         ( ledger.c_act_code >= 'GC793' ) and \n         ( ledger.c_act_code <= 'GC793' )   and\n\t\t\t( ledger.n_amount <> 0) ) --and :li_cogs =1\n) as cogs \nGroup By c_br_code,c_year,c_prefix,n_tran_no,c_act_code,d_date,c_opp_act_code,c_ref_br_code,c_ref_no,   \n\t\td_chq_date,c_remark,c_act_name,c_opp_act_name,c_add_1,c_add_2,c_add_3,c_city,n_ref_srno,\n\t\tn_order_no,recon_dt,multi_act_name\nUNION   ALL\n  SELECT ('') as c_br_code,\n\t\t\t('00') as c_year,   \n         ('OP') as c_prefix,   \n         ( 0 ) as c_tran_no,   \n         ( ledger.c_act_code ) as c_act_code,   \n         ( date('2021-10-21')) as d_date,   \n         sum(ledger.n_amount) as n_amount,   \n         ( '' ) as c_opp_act_code,   \n         ( '' ) as c_ref_br_code,   \n         ( '' ) as c_ref_no,   \n         date('2021-10-21') as d_chq_date,   \n         ( '' ) as c_remark,   \n         ( act_mst.c_name ) as c_act_name,   \n         ( 'Opening Balance' ) as c_opp_act_name,\n\t\t\t( act_mst.c_add_1 )  as c_add_1,\n\t\t\t( act_mst.c_add_2 )  as c_add_2, \n\t\t\t( act_mst.c_add_3 )  as c_add_3,\n\t\t\t( act_mst.c_city ) as c_city,\n\t\t\t(0) as n_ref_srno,\n\t\t\t(0) as n_order_no,\n\t\t\t( null )  as recon_dt,\n\t\t\t( 0 )  \tas chq_pass,\n\t\t\t( '' ) as multi_act_name\t,\n\t\tisnull( case when n_amount  > 0 then n_amount else 0 end,0) as Debit,\n\t\tisnull( case when n_amount  < 0 then n_amount else 0 end,0) as credit\n    FROM dba.ledger\n\t\t\t\tinner join (select c_br_code as brcode from dba.branch_group_det where length('751') = 6 and c_code = '751' and  branch_group_det.n_cancel_flag = 0 \n            union \n            select c_code from dba.act_mst where length('751')<> 6 and c_code >= (if '751' = 'zzz' then '751' else '751' endif ) and ( c_code <= '751' ) \n            ) brlist on brlist.brcode=ledger.c_ref_br_code,  \n         act_mst  \n   WHERE ( act_mst.c_code = ledger.c_act_code ) and  \n         ( ( ledger.d_date <= getDate() ) and\t\n         ( ledger.c_act_code >= 'GC793' ) and\t\n         ( ledger.c_act_code <= 'GC793' ) )   \nGROUP BY c_act_code,c_act_name,c_add_1,c_add_2,c_add_3,c_city"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "Ds_Ecogreenv2",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "RL_HelthTech_JO_JV_751_701_Credit",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Copy data HelthTech JO-JV 751 and 701 File to Table",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Copy data HelthTech JO-JV 751 and 701 Credit",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "SqlServerSink",
								"preCopyScript": "truncate table HelthTech_JO_JV_751_701_Credit_Staging",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "RL_HelthTech_JO_JV_751_701_Credit",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "SQL_HelthTech_JO_JV_751_701_Credit",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Delete HelthTech JO-JV 751and701 File",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "RL_HelthTech_JO_JV_751_701_Credit",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "Stored procedure get Final Data",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy dataHelthTech Sale 751 and 701 Debit File to Table",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Copy data HelthTech JO-JV 751 and 701 File to Table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[usp_HelthTech_Sale_Debit_HelthTech_JO_JV_751_701_Credit]"
						},
						"linkedServiceName": {
							"referenceName": "Data360MSSQL",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Reconciliation Ledgers/Final Ledgers"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Incremental Load Amazon Order Details Data')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Max Date from Order Detail",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "Select max(order_date) as maxdate from Amazon_OMS_Order_Details_staging",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "OMSSqlServerTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Copy data Amazon Item Data",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Get Max Date from Order Detail",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "MySqlSource",
								"query": {
									"value": "SELECT \nDISTINCT \nws.sale_id AS Order_Id\n,ws.sale_code\n,ws.created_date AS Order_Date\n,STR_TO_DATE(ws.processing_date,'%Y-%m-%d %H:%i:%s') as processing_date\n,STR_TO_DATE(ws.invoice_date,'%Y-%m-%d %H:%i:%s') as invoice_date\n,ws.user_name AS Customer_Name\n,ws.Customer_id\n,ws.store_id\n,wd.rx_type AS RX_type\n,wd.product_id\n,wd.mrp\n,wd.price\n,wd.quantity\n,ws.coupon_discount AS discount_on_order\n,ws.coupon_code\n,ws.grand_total\n,ws.order_invoice_amt\n,ws.txn_status\n,ws.payment_type AS Payment_mode\n,ws.online_TXN\n,ws.ERP_transactionid AS ERP_Id\n,ws.order_invoice_no AS Invoice_no\n,ws.delivery_status AS Order_Status\n,ws.partial_invoice\n,ws.DMS_jobid\n,ws.dman_id\n,ws.dman_name\n,ws.thirdPartyJobStatus\n,ws.three_pl_name\n,STR_TO_DATE(ws.DMS_eta_IST,'%Y-%m-%d %H:%i:%s') AS Actual_Delivery_date\n,STR_TO_DATE(ws.delivered_date,'%Y-%m-%d %H:%i:%s') AS Delivered_date\n,ws.cancel_reason\n,ws.remark\n,ws.MFM_timeframe\n,ws.sale_platform\n,ws.dman_payment_status AS Reconciled\n,ws.collected_amount AS Collected_amount\n,p.item_code\n,concat(ws.store_id, '/', ws.sale_id, '/', p.item_code) as brcode_orderid_itemcode_key\n,ws.order_parent_id\n,ws.buyer\nFROM wellnessDB.order_details wd\nLEFT JOIN wellnessDB.sale ws ON wd.sale_id = ws.sale_id\nleft JOIN setproduct_items sp ON sp.set_id=wd.product_id\nleft JOIN product p ON sp.product_id=p.product_id\nWHERE\nws.created_date >='@{activity('Get Max Date from Order Detail').output.firstRow.maxdate}'\nAND wd.status = 1 and ws.sale_platform='6' and p.item_code IS NOT NULL\nORDER BY ws.sale_id ASC\n\n\n",
									"type": "Expression"
								}
							},
							"sink": {
								"type": "SqlServerSink",
								"preCopyScript": {
									"value": "Delete from Amazon_OMS_Order_Details_staging where \nconvert(date,order_date)='@{activity('Get Max Date from Order Detail').output.firstRow.maxdate}'",
									"type": "Expression"
								},
								"tableOption": "autoCreate"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "OMSMySqlTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Amazon_Item_OutPutTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Stored procedure update columns",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy data Amazon Item Data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[usp_Incremental_Amazon_Order_deatils_update_columns]",
							"storedProcedureParameters": {
								"date": {
									"value": {
										"value": "@activity('Get Max Date from Order Detail').output.firstRow.maxdate",
										"type": "Expression"
									},
									"type": "DateTime"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Data360MSSQL",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Incremental Load"
				},
				"annotations": [],
				"lastPublishTime": "2021-10-11T04:28:54Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Incremental Load Appsflyer Master')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Max Date from Appsflyer source Data",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "select max(LastRun_Date) as maxdate from LastRunTime",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "OMSSqlServerTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Distinct Appsflyer IDs",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Get Max Date from Appsflyer source Data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": {
									"value": "select  distinct afid from OMS_appsflyer2 where convert(date,created) >=\n'@{activity('Get Max Date from Appsflyer source Data').output.firstRow.maxdate}'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "SqlServerSink",
								"preCopyScript": "truncate table temp_appsflyerIDs;",
								"tableOption": "autoCreate"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "OMSSqlServerTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AppsflyerIDs_TempTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Loads Customer Master",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Distinct Appsflyer IDs",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[usp_Incremental_Load_appsflyer_customer_master]"
						},
						"linkedServiceName": {
							"referenceName": "Data360MSSQL",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Load Appsflyer flags",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Loads Customer Master",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[usp_Incremental_Load_Appsflyer_update_flags]"
						},
						"linkedServiceName": {
							"referenceName": "Data360MSSQL",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "AppsFlyer"
				},
				"annotations": [],
				"lastPublishTime": "2021-10-22T09:50:02Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Incremental Load Cancel Order Details')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "MySQL to SQL server Cancel Order",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Get Max Date from Order Detail",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "MySqlSource",
								"query": {
									"value": "SELECT DISTINCT \nws.sale_id AS Order_Id\n,ws.sale_code\n,ws.created_date AS Order_Date\n,STR_TO_DATE(ws.processing_date,'%Y-%m-%d %H:%i:%s') as processing_date\n,STR_TO_DATE(ws.invoice_date,'%Y-%m-%d %H:%i:%s') as invoice_date\n,ws.user_name AS Customer_Name\n,ws.Customer_id\n,ws.store_id\n,wd.rx_type AS RX_type\n,wd.product_id\n,wd.mrp\n,wd.price\n,wd.quantity\n,ws.coupon_discount AS discount_on_order\n,ws.coupon_code\n,ws.grand_total\n,ws.order_invoice_amt\n,ws.txn_status\n,ws.payment_type AS Payment_mode\n,ws.online_TXN\n,ws.ERP_transactionid AS ERP_Id\n,ws.order_invoice_no AS Invoice_no\n,ws.delivery_status AS Order_Status\n,ws.partial_invoice\n,ws.DMS_jobid\n,ws.dman_id\n,ws.dman_name\n,ws.thirdPartyJobStatus\n,ws.three_pl_name\n,STR_TO_DATE(ws.DMS_eta_IST,'%Y-%m-%d %H:%i:%s') AS Actual_Delivery_date\n,STR_TO_DATE(ws.delivered_date,'%Y-%m-%d %H:%i:%s') AS Delivered_date\n,ws.cancel_reason\n,ws.remark\n,ws.MFM_timeframe\n,ws.sale_platform\n,ws.dman_payment_status AS Reconciled\n,ws.collected_amount AS Collected_amount\n,wd.item_code\n,concat(ws.store_id, '/', ws.sale_id, '/', wd.item_code) as brcode_orderid_itemcode_key\n,ws.order_parent_id\n,ws.buyer\nFROM wellnessDB.order_details wd\nLEFT JOIN wellnessDB.sale ws ON wd.sale_id = ws.sale_id\nWHERE \nws.created_date >='@{activity('Get Max Date from Order Detail').output.firstRow.maxdate}'\nAND wd.status = 1 and ws.delivery_status like '%cancel%'\nORDER BY ws.sale_id ASC",
									"type": "Expression"
								}
							},
							"sink": {
								"type": "SqlServerSink",
								"preCopyScript": {
									"value": "Delete from OMS_Cancel_Order_Details where \nconvert(date,order_date)='@{activity('Get Max Date from Order Detail').output.firstRow.maxdate}'",
									"type": "Expression"
								},
								"tableOption": "autoCreate"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "OMSMySqlTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "OMS_CancelOrder_Outputtable",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Stored procedure update columns",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "MySQL to SQL server Cancel Order",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[usp_Incremental_Cancel_Order_deatils_update_columns]",
							"storedProcedureParameters": {
								"date": {
									"value": {
										"value": "@activity('Get Max Date from Order Detail').output.firstRow.maxdate",
										"type": "Expression"
									},
									"type": "DateTime"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Data360MSSQL",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Get Max Date from Order Detail",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "Select max(order_date) as maxdate from OMS_Cancel_Order_Details",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "OMSSqlServerTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Incremental Load"
				},
				"annotations": [],
				"lastPublishTime": "2021-10-22T07:24:35Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Incremental Load Order Details')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Max Date from Order Detail",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "Select max(order_date) as maxdate from OMS_Order_Details",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "OMSSqlServerTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "MySQL to SQL server",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Get Max Date from Order Detail",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "MySqlSource",
								"query": {
									"value": "SELECT DISTINCT \nws.sale_id AS Order_Id\n,ws.sale_code\n,ws.created_date AS Order_Date\n,STR_TO_DATE(ws.processing_date,'%Y-%m-%d %H:%i:%s') as processing_date\n,STR_TO_DATE(ws.invoice_date,'%Y-%m-%d %H:%i:%s') as invoice_date\n,ws.user_name AS Customer_Name\n,ws.Customer_id\n,ws.store_id\n,wd.rx_type AS RX_type\n,wd.product_id\n,wd.mrp\n,wd.price\n,wd.quantity\n,ws.coupon_discount AS discount_on_order\n,ws.coupon_code\n,ws.grand_total\n,ws.order_invoice_amt\n,ws.txn_status\n,ws.payment_type AS Payment_mode\n,ws.online_TXN\n,ws.ERP_transactionid AS ERP_Id\n,ws.order_invoice_no AS Invoice_no\n,ws.delivery_status AS Order_Status\n,ws.partial_invoice\n,ws.DMS_jobid\n,ws.dman_id\n,ws.dman_name\n,ws.thirdPartyJobStatus\n,ws.three_pl_name\n,STR_TO_DATE(ws.DMS_eta_IST,'%Y-%m-%d %H:%i:%s') AS Actual_Delivery_date\n,STR_TO_DATE(ws.delivered_date,'%Y-%m-%d %H:%i:%s') AS Delivered_date\n,ws.cancel_reason\n,ws.remark\n,ws.MFM_timeframe\n,ws.sale_platform\n,ws.dman_payment_status AS Reconciled\n,ws.collected_amount AS Collected_amount\n,wd.item_code\n,concat(ws.store_id, '/', ws.sale_id, '/', wd.item_code) as brcode_orderid_itemcode_key\n,ws.order_parent_id\n,ws.buyer\nFROM wellnessDB.order_details wd\nLEFT JOIN wellnessDB.sale ws ON wd.sale_id = ws.sale_id\nWHERE \nws.created_date >='@{activity('Get Max Date from Order Detail').output.firstRow.maxdate}'\nAND wd.status = 1\nORDER BY ws.sale_id ASC",
									"type": "Expression"
								}
							},
							"sink": {
								"type": "SqlServerSink",
								"preCopyScript": {
									"value": "Delete from OMS_Order_Details where \nconvert(date,order_date)='@{activity('Get Max Date from Order Detail').output.firstRow.maxdate}'",
									"type": "Expression"
								},
								"tableOption": "autoCreate"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "OMSMySqlTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "OMSSqlServerTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Add columns",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "MySQL to SQL server",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[usp_Incremental_Load_oms_order_details_add_column]",
							"storedProcedureParameters": {
								"date": {
									"value": {
										"value": "@activity('Get Max Date from Order Detail').output.firstRow.maxdate",
										"type": "Expression"
									},
									"type": "DateTime"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Data360MSSQL",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "SP Update Hour Bucket",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Add columns",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[usp_Incremental_Load_OMS_Order_Details_Update_Hour_Bucket]",
							"storedProcedureParameters": {
								"date": {
									"value": {
										"value": "@activity('Get Max Date from Order Detail').output.firstRow.maxdate",
										"type": "Expression"
									},
									"type": "DateTime"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Data360MSSQL",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Incremental Load"
				},
				"annotations": [],
				"lastPublishTime": "2021-10-11T04:28:54Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Inv Det Mst Backup')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.FolderNameArray",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Inv Det_copy1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ParquetSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"sink": {
											"type": "SqlServerSink",
											"tableOption": "autoCreate"
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "InvDetInputFile",
											"type": "DatasetReference",
											"parameters": {
												"FolderName": {
													"value": "@item()",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "InvDetOutputTable",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								},
								{
									"name": "Copy data Inv Mst",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Inv Det_copy1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ParquetSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"sink": {
											"type": "SqlServerSink",
											"tableOption": "autoCreate"
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "InvMstInputFile",
											"type": "DatasetReference",
											"parameters": {
												"FolderName": {
													"value": "@item()",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "InvMstOutputTable",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"FolderNameArray": {
						"type": "array",
						"defaultValue": [
							"2021-08-18",
							"2021-08-18Sync",
							"2021-08-19",
							"FullLoad"
						]
					}
				},
				"folder": {
					"name": "Invoice"
				},
				"annotations": [],
				"lastPublishTime": "2022-02-23T11:49:43Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Inv Det Mst')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Metadata",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadata').output.childItems",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Inv Det Copy",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [
										{
											"name": "Source",
											"value": "sales/@{item().name}/inv_det"
										},
										{
											"name": "Destination",
											"value": "dbo.inv_det_staging"
										}
									],
									"typeProperties": {
										"source": {
											"type": "ParquetSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"modifiedDatetimeStart": "2021-06-04T00:00:00Z",
												"modifiedDatetimeEnd": "2021-08-25T00:00:00Z",
												"enablePartitionDiscovery": false
											}
										},
										"sink": {
											"type": "SqlServerSink",
											"tableOption": "autoCreate"
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "InvDetInputFile",
											"type": "DatasetReference",
											"parameters": {
												"FolderName": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "InvDetOutputTable",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								},
								{
									"name": "Inv Mst Copy",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Inv Det Copy",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [
										{
											"name": "Source",
											"value": "sales/@{item().name}/inv_mst"
										},
										{
											"name": "Destination",
											"value": "dbo.inv_mst_staging"
										}
									],
									"typeProperties": {
										"source": {
											"type": "ParquetSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"modifiedDatetimeStart": "2021-06-04T00:00:00Z",
												"modifiedDatetimeEnd": "2021-08-25T00:00:00Z",
												"enablePartitionDiscovery": false
											}
										},
										"sink": {
											"type": "SqlServerSink",
											"tableOption": "autoCreate"
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "InvMstInputFile",
											"type": "DatasetReference",
											"parameters": {
												"FolderName": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "InvMstOutputTable",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								}
							]
						}
					},
					{
						"name": "Get Metadata",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "SalesFolder",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Invoice"
				},
				"annotations": [],
				"lastPublishTime": "2022-02-23T11:49:43Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Load Fill Rate Data')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data Fill Rate Data",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "SqlServerSink",
								"tableOption": "autoCreate"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "FillRate_InputFile",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "FillRate_OutPutTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Stored procedure Fill rate",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy data Fill Rate Data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[usp_FillRate]"
						},
						"linkedServiceName": {
							"referenceName": "Data360MSSQL",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Fill Rate"
				},
				"annotations": [],
				"lastPublishTime": "2022-01-19T07:55:27Z"
			},
			"dependsOn": []
		}
	]
}