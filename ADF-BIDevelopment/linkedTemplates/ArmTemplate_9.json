{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "ADF-BIDevelopment"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/Load Inv Det')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data Inv_Det_Staging to Inv_Det",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "SqlServerSink",
								"preCopyScript": "TRUNCATE TABLE Inv_Det",
								"tableOption": "autoCreate"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "InvDetOutputTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "InvDetTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Copy data Inv_Mst_Staging to Inv_Mst",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Copy data Inv_Det_Staging to Inv_Det",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "SqlServerSink",
								"preCopyScript": "TRUNCATE TABLE  Inv_Mst",
								"tableOption": "autoCreate"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "InvMstOutputTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "InvMstTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Invoice"
				},
				"annotations": [],
				"lastPublishTime": "2022-02-23T11:49:43Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Load Order logs')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data order logs",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "MySqlSource",
								"query": "select * from wellnessDB.order_logs"
							},
							"sink": {
								"type": "SqlServerSink",
								"tableOption": "autoCreate"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "OMSMySqlTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "OrderLogs_OutputTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Order Details"
				},
				"annotations": [],
				"lastPublishTime": "2021-10-09T11:53:48Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Load excl_bzn_customers')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data excl_bzn_customers",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "SqlServerSink",
								"tableOption": "autoCreate"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "CRMCustomerInputFile",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "CRMCustomerOutPutTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "CRM"
				},
				"annotations": [],
				"lastPublishTime": "2021-09-03T14:17:10Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Load inv_det')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data inv_det file to eco green",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "SqlServerSink",
								"writeBatchTimeout": "15:00:00",
								"tableOption": "autoCreate"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "c_item_code",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "c_item_code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "EG_inv_Det_InputFile",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "EG_Inv_Det_OutPutTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "ECO Green"
				},
				"annotations": [],
				"lastPublishTime": "2021-10-28T03:40:23Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Medicare_000_Debit_HelthTech_751_Credit')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data medicare sale 751 Debit  into file",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Delete File Medicare sale 751",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SybaseSource",
								"query": "SELECT \nc_br_code,c_year,c_prefix,n_srno,d_date,c_cust_code,n_total,n_cancel_flag,c_order_id,\nn_taxable_amt,c_ord_br_code,c_ord_prefix,c_ord_year,n_ord_no\nFROM dba.inv_mst \nwhere c_cust_code = '751' and n_cancel_flag=0 and convert(date,d_date) > '2021-10-01'"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "Ds_Ecogreenv2",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "RL_Medicare_Sale_751_Debit",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Copy data file to Table",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Copy data medicare sale 751 Debit  into file",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "SqlServerSink",
								"preCopyScript": "truncate table Medicare_Sale_751_Debit_Staging",
								"tableOption": "autoCreate"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "RL_Medicare_Sale_751_Debit",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "SQL_Medicare_Sale_751_Debit",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Delete File Medicare sale 751",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "RL_Medicare_Sale_751_Debit",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "Delete File HelthTech Purchase 751",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "RL_HelthTech_Purchase_751_Credit",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "Copy data HelthTech Purchase 751 Credit",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Delete File HelthTech Purchase 751",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SybaseSource",
								"query": "SELECT c_br_code,c_year,c_prefix,n_srno,d_date,n_subtotal,n_total,d_ldate,c_order_id,n_taxable_amt FROM dba.pur_mst where c_br_code = '751' and n_cancel_flag=0 and\n n_post = 1 and c_prefix in('K','KO') and convert(date,d_date) > '2021-10-01'"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "Ds_Ecogreenv2",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "RL_HelthTech_Purchase_751_Credit",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Copy data HelthTech 751 File to Table",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Copy data HelthTech Purchase 751 Credit",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "SqlServerSink",
								"preCopyScript": "truncate table HelthTech_Purchase_751_Credit_Staging;",
								"tableOption": "autoCreate"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "RL_HelthTech_Purchase_751_Credit",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "SQL_HelthTech_Purchase_751_Credit",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Stored procedure Get Final Data",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy data file to Table",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Copy data HelthTech 751 File to Table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[usp_Medicare_000_Debit_HelthTech_751_Credit]"
						},
						"linkedServiceName": {
							"referenceName": "Data360MSSQL",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Reconciliation Ledgers/Final Ledgers"
				},
				"annotations": [],
				"lastPublishTime": "2022-02-11T04:03:32Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Medicare_S14278_Debit_Helthtech_GC238_Credit')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Delete file Medicare S14278",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "RL_Medicare_S14278_Debit",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "Copy data Medicare S14278 Debit",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Delete file Medicare S14278",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SybaseSource",
								"query": "Select ( cogs.c_br_code ) as c_br_code,\n\t\t( cogs.c_year ) as c_year,   \n\t\t( cogs.c_prefix ) as c_prefix,   \n\t\t( cogs.n_tran_no ) as n_tran_no,   \n\t\t( cogs.c_act_code ) as c_act_code,   \n\t\t( cogs.d_date ) as d_date,   \n\t\tSUM( cogs.n_amount ) as n_amount,   \n\t\t( cogs.c_opp_act_code ) as c_opp_act_code,   \n\t\t( cogs.c_ref_br_code ) as c_ref_br_code,\n\t\t( cogs.c_ref_no ) as c_ref_no,   \n\t\t( cogs.d_chq_date) as d_chq_date,   \n\t\t( cogs.c_remark ) as c_remark,   \n\t\t( cogs.c_act_name ) as c_act_name,   \n\t\t( cogs.c_opp_act_name ) as c_opp_act_name,\n\t\t( cogs.c_add_1 ) as c_add_1,\n\t\t( cogs.c_add_2 ) as c_add_2, \n\t\t( cogs.c_add_3 ) as c_add_3,\n\t\t( cogs.c_city ) as c_city,\n\t\t( cogs.n_ref_srno ) as n_ref_srno,\n\t\t( cogs.n_order_no ) as n_order_no,\n\t\t( cogs.recon_dt) as recon_dt,\n\t\t( if recon_dt is null then 0 else 1 endif ) as chq_pass,\n\t\t( cogs.multi_act_name) as multi_act_name,\n\t\tisnull( case when n_amount  > 0 then n_amount else 0 end,0) as Debit,\n\t\tisnull( case when n_amount  < 0 then n_amount else 0 end,0) as credit\nFrom\n(\n\tSELECT ( ledger.c_br_code ) as c_br_code,\n\t\t\t( ledger.c_year ) as c_year,   \n\t\t\t( ledger.c_prefix ) as c_prefix,   \n\t\t\t( ledger.n_tran_no ) as n_tran_no,   \n\t\t\t( ledger.c_act_code ) as c_act_code,   \n\t\t\t( ledger.d_date ) as d_date,   \n\t\t\t( ledger.n_amount ) as n_amount,   \n\t\t\t( ledger.c_opp_act_code ) as c_opp_act_code,   \n\t\t\t( ledger.c_ref_br_code ) as c_ref_br_code,\n\t\t\t( settle_mst_header.c_ref_no ) as c_ref_no,   \n\t\t\tdate(settle_mst_header.d_ref_date) as d_chq_date,   \n\t\t\t( settle_mst_header.c_remark ) as c_remark,   \n\t\t\t( act_mst_a.c_name ) as c_act_name,   \n\t\t\t( act_mst_b.c_name ) as c_opp_act_name,\n\t\t\t( act_mst_a.c_add_1 ) as c_add_1,\n\t\t\t( act_mst_a.c_add_2 ) as c_add_2, \n\t\t\t( act_mst_a.c_add_3 ) as c_add_3,\n\t\t\t( act_mst_a.c_city ) as c_city,\n\t\t\t( grn_mst.n_ref_srno ) as n_ref_srno,\n\t\t\t( gdn_mst.n_order_no ) as n_order_no,\n\t\t\t(d_reconcile_date) as recon_dt,\n\t\t\t(if recon_dt is null then 0 else 1 endif) as chq_pass,\n\t\t\tif ledger.c_opp_act_code='~~~~~~~~~~~~' then \n\t\t\t\t(select list(ac.c_name+' : '+string(n_amount),char(13)) from ledger ll , act_mst ac  where ac.c_code=ll.c_act_code and\n\t\t\t\t\t\tll.c_br_code=ledger.c_br_code and ll.c_year=ledger.c_year\n\t\t\t\t\t\tand ll.c_prefix=ledger.c_prefix and ll.n_tran_no=ledger.n_tran_no and \n\t\t\t\t\t\t(ledger.n_amount<0 and ll.n_amount>0 or ledger.n_amount>0 and ll.n_amount<0))\n\t\t\telse '' endif as multi_act_name\n    FROM ledger\n\t\t\t\tinner join (select c_br_code as brcode from branch_group_det where length('000') = 6 and c_code = '000' and  branch_group_det.n_cancel_flag = 0 \n            union \n            select c_code from act_mst where length('000')<> 6 and c_code >= (if '000' = 'zzz' then '000' else '000' endif ) and ( c_code <= '000' ) \n            ) brlist on brlist.brcode=ledger.c_ref_br_code  \n\t\t\tleft outer join settle_mst_header  on  ledger.c_br_code = settle_mst_header.c_br_code  and \n\t\t\t ledger.c_year = settle_mst_header.c_year  and \n          ledger.c_prefix = settle_mst_header.c_prefix  and \n          ledger.n_tran_no = settle_mst_header.n_srno  \n          left outer join grn_mst on  ledger.c_br_code = grn_mst.c_br_code  and \n\t\t\t\tledger.c_year = grn_mst.c_year  and \n\t\t\t\tledger.c_prefix = grn_mst.c_prefix  and \n\t\t\t\tledger.n_tran_no = grn_mst.n_srno\n\t\t\tleft outer join gdn_mst  on  ledger.c_br_code = gdn_mst.c_br_code  and \n\t\t\t\tledger.c_year = gdn_mst.c_year  and \n\t\t\t\tledger.c_prefix = gdn_mst.c_prefix  and \n\t\t\t\tledger.n_tran_no = gdn_mst.n_srno\n\t\t\t\tleft outer join reconcile_mst  on  ledger.c_br_code= reconcile_mst.c_br_code and ledger.c_year = reconcile_mst.c_year and\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  ledger.c_prefix = reconcile_mst.c_prefix and  ledger.n_tran_no = reconcile_mst.n_srno, \n          act_mst act_mst_a,   \n         act_mst act_mst_b  \n   WHERE \n         ( act_mst_a.c_code = ledger.c_act_code ) and \n         ( act_mst_b.c_code = ledger.c_opp_act_code ) and\t\n         ( ( ledger.d_date >= '2021-10-01' ) and\t\n         ( ledger.d_date <= getDate() ) and \n         ( ledger.c_act_code >= 'S14278' ) and \n         ( ledger.c_act_code <= 'S14278' )   and\n\t\t\t( ledger.n_amount <> 0) )\n\tUnion All\n\t SELECT ( ledger.c_br_code ) as c_br_code,\n\t\t\t( ledger.c_year ) as c_year,   \n\t\t\t( ledger.c_prefix ) as c_prefix,   \n\t\t\t( ledger.n_tran_no ) as n_tran_no,   \n\t\t\t( ledger.c_act_code ) as c_act_code,   \n\t\t\t( ledger.d_date ) as d_date,   \n\t\t\t( ledger.n_amount ) as n_amount,   \n\t\t\t( ledger.c_opp_act_code ) as c_opp_act_code,   \n\t\t\t( ledger.c_ref_br_code ) as c_ref_br_code,\n\t\t\t( settle_mst_header.c_ref_no ) as c_ref_no,   \n\t\t\tdate(settle_mst_header.d_ref_date) as d_chq_date,   \n\t\t\t( settle_mst_header.c_remark ) as c_remark,   \n\t\t\t( act_mst_a.c_name ) as c_act_name,   \n\t\t\t( act_mst_b.c_name ) as c_opp_act_name,\n\t\t\t( act_mst_a.c_add_1 ) as c_add_1,\n\t\t\t( act_mst_a.c_add_2 ) as c_add_2, \n\t\t\t( act_mst_a.c_add_3 ) as c_add_3,\n\t\t\t( act_mst_a.c_city ) as c_city,\n\t\t\t( grn_mst.n_ref_srno ) as n_ref_srno,\n\t\t\t( gdn_mst.n_order_no ) as n_order_no,\n\t\t\t(d_reconcile_date) as recon_dt,\n\t\t\t(if recon_dt is null then 0 else 1 endif) as chq_pass,\n\t\t\tif ledger.c_opp_act_code='~~~~~~~~~~~~' then \n\t\t\t\t(select list(ac.c_name+' : '+string(n_amount),char(13)) from ledger ll , act_mst ac  where ac.c_code=ll.c_act_code and\n\t\t\t\t\t\tll.c_br_code=ledger.c_br_code and ll.c_year=ledger.c_year\n\t\t\t\t\t\tand ll.c_prefix=ledger.c_prefix and ll.n_tran_no=ledger.n_tran_no and \n\t\t\t\t\t\t(ledger.n_amount<0 and ll.n_amount>0 or ledger.n_amount>0 and ll.n_amount<0))\n\t\t\telse '' endif as multi_act_name\n    FROM cogs_ledger as ledger\n\t\t\t\tinner join (select c_br_code as brcode from branch_group_det where length('000') = 6 and c_code = '000' and  branch_group_det.n_cancel_flag = 0 \n            union \n            select c_code from act_mst where length('000')<> 6 and c_code >= (if '000' = 'zzz' then '000' else '000' endif ) and ( c_code <= '000' ) \n            ) brlist on brlist.brcode=ledger.c_ref_br_code  \n\t\t\tleft outer join settle_mst_header  on  ledger.c_br_code = settle_mst_header.c_br_code  and \n\t\t\t ledger.c_year = settle_mst_header.c_year  and \n          ledger.c_prefix = settle_mst_header.c_prefix  and \n          ledger.n_tran_no = settle_mst_header.n_srno  \n          left outer join grn_mst on  ledger.c_br_code = grn_mst.c_br_code  and \n\t\t\t\tledger.c_year = grn_mst.c_year  and \n\t\t\t\tledger.c_prefix = grn_mst.c_prefix  and \n\t\t\t\tledger.n_tran_no = grn_mst.n_srno\n\t\t\tleft outer join gdn_mst  on  ledger.c_br_code = gdn_mst.c_br_code  and \n\t\t\t\tledger.c_year = gdn_mst.c_year  and \n\t\t\t\tledger.c_prefix = gdn_mst.c_prefix  and \n\t\t\t\tledger.n_tran_no = gdn_mst.n_srno\n\t\t\t\tleft outer join reconcile_mst  on  ledger.c_br_code= reconcile_mst.c_br_code and ledger.c_year = reconcile_mst.c_year and\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  ledger.c_prefix = reconcile_mst.c_prefix and  ledger.n_tran_no = reconcile_mst.n_srno, \n          act_mst act_mst_a,   \n         act_mst act_mst_b  \n   WHERE \n         ( act_mst_a.c_code = ledger.c_act_code ) and \n         ( act_mst_b.c_code = ledger.c_opp_act_code ) and\t\n         ( ( ledger.d_date >= '2021-10-01' ) and\t\n         ( ledger.d_date <= getDate() ) and \n         ( ledger.c_act_code >= 'S14278' ) and \n         ( ledger.c_act_code <= 'S14278' )   and\n\t\t\t( ledger.n_amount <> 0) ) --and :li_cogs =1\n) as cogs\nGroup By c_br_code,c_year,c_prefix,n_tran_no,c_act_code,d_date,c_opp_act_code,c_ref_br_code,c_ref_no,   \n\t\td_chq_date,c_remark,c_act_name,c_opp_act_name,c_add_1,c_add_2,c_add_3,c_city,n_ref_srno,\n\t\tn_order_no,recon_dt,multi_act_name\nUNION   ALL\n  SELECT ('') as c_br_code,\n\t\t\t('00') as c_year,   \n         ('OP') as c_prefix,   \n         ( 0 ) as c_tran_no,   \n         ( ledger.c_act_code ) as c_act_code,   \n         ( date('2021-10-21')) as d_date,   \n         sum(ledger.n_amount) as n_amount,   \n         ( '' ) as c_opp_act_code,   \n         ( '' ) as c_ref_br_code,   \n         ( '' ) as c_ref_no,   \n         date('2021-10-21') as d_chq_date,   \n         ( '' ) as c_remark,   \n         ( act_mst.c_name ) as c_act_name,   \n         ( 'Opening Balance' ) as c_opp_act_name,\n\t\t\t( act_mst.c_add_1 )  as c_add_1,\n\t\t\t( act_mst.c_add_2 )  as c_add_2, \n\t\t\t( act_mst.c_add_3 )  as c_add_3,\n\t\t\t( act_mst.c_city ) as c_city,\n\t\t\t(0) as n_ref_srno,\n\t\t\t(0) as n_order_no,\n\t\t\t( null )  as recon_dt,\n\t\t\t( 0 )  \tas chq_pass,\n\t\t\t( '' ) as multi_act_name\t,\n\t\tisnull( case when n_amount  > 0 then n_amount else 0 end,0) as Debit,\n\t\tisnull( case when n_amount  < 0 then n_amount else 0 end,0) as credit\n    FROM dba.ledger\n\t\t\t\tinner join (select c_br_code as brcode from dba.branch_group_det where length('000') = 6 and c_code = '000' and  branch_group_det.n_cancel_flag = 0 \n            union \n            select c_code from dba.act_mst where length('000')<> 6 and c_code >= (if '000' = 'zzz' then '000' else '000' endif ) and ( c_code <= '000' ) \n            ) brlist on brlist.brcode=ledger.c_ref_br_code,  \n         act_mst  \n   WHERE ( act_mst.c_code = ledger.c_act_code ) and  \n         ( ( ledger.d_date <= getDate() ) and\t\n         ( ledger.c_act_code >= 'S14278' ) and\t\n         ( ledger.c_act_code <= 'S14278' ) )   \nGROUP BY c_act_code,c_act_name,c_add_1,c_add_2,c_add_3,c_city"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "Ds_Ecogreenv2",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "RL_Medicare_S14278_Debit",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Copy data Medicare S14278 File to Table",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Copy data Medicare S14278 Debit",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "SqlServerSink",
								"preCopyScript": "truncate table Medicare_S14278_Debit_Staging",
								"tableOption": "autoCreate"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "RL_Medicare_S14278_Debit",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "SQL_Medicare_S14278_Debit",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Delete File HelthTech GC238",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "RL_HelthTech_GC238_Credit",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "Copy data HelthTech GC238 Credit",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Delete File HelthTech GC238",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SybaseSource",
								"query": "Select ( cogs.c_br_code ) as c_br_code,\n\t\t( cogs.c_year ) as c_year,   \n\t\t( cogs.c_prefix ) as c_prefix,   \n\t\t( cogs.n_tran_no ) as n_tran_no,   \n\t\t( cogs.c_act_code ) as c_act_code,   \n\t\t( cogs.d_date ) as d_date,   \n\t\tSUM( cogs.n_amount ) as n_amount,   \n\t\t( cogs.c_opp_act_code ) as c_opp_act_code,   \n\t\t( cogs.c_ref_br_code ) as c_ref_br_code,\n\t\t( cogs.c_ref_no ) as c_ref_no,   \n\t\t( cogs.d_chq_date) as d_chq_date,   \n\t\t( cogs.c_remark ) as c_remark,   \n\t\t( cogs.c_act_name ) as c_act_name,   \n\t\t( cogs.c_opp_act_name ) as c_opp_act_name,\n\t\t( cogs.c_add_1 ) as c_add_1,\n\t\t( cogs.c_add_2 ) as c_add_2, \n\t\t( cogs.c_add_3 ) as c_add_3,\n\t\t( cogs.c_city ) as c_city,\n\t\t( cogs.n_ref_srno ) as n_ref_srno,\n\t\t( cogs.n_order_no ) as n_order_no,\n\t\t( cogs.recon_dt) as recon_dt,\n\t\t( if recon_dt is null then 0 else 1 endif ) as chq_pass,\n\t\t( cogs.multi_act_name) as multi_act_name,\n\t\tisnull( case when n_amount  > 0 then n_amount else 0 end,0) as Debit,\n\t\tisnull( case when n_amount  < 0 then n_amount else 0 end,0) as credit\nFrom\n(\n\tSELECT ( ledger.c_br_code ) as c_br_code,\n\t\t\t( ledger.c_year ) as c_year,   \n\t\t\t( ledger.c_prefix ) as c_prefix,   \n\t\t\t( ledger.n_tran_no ) as n_tran_no,   \n\t\t\t( ledger.c_act_code ) as c_act_code,   \n\t\t\t( ledger.d_date ) as d_date,   \n\t\t\t( ledger.n_amount ) as n_amount,   \n\t\t\t( ledger.c_opp_act_code ) as c_opp_act_code,   \n\t\t\t( ledger.c_ref_br_code ) as c_ref_br_code,\n\t\t\t( settle_mst_header.c_ref_no ) as c_ref_no,   \n\t\t\tdate(settle_mst_header.d_ref_date) as d_chq_date,   \n\t\t\t( settle_mst_header.c_remark ) as c_remark,   \n\t\t\t( act_mst_a.c_name ) as c_act_name,   \n\t\t\t( act_mst_b.c_name ) as c_opp_act_name,\n\t\t\t( act_mst_a.c_add_1 ) as c_add_1,\n\t\t\t( act_mst_a.c_add_2 ) as c_add_2, \n\t\t\t( act_mst_a.c_add_3 ) as c_add_3,\n\t\t\t( act_mst_a.c_city ) as c_city,\n\t\t\t( grn_mst.n_ref_srno ) as n_ref_srno,\n\t\t\t( gdn_mst.n_order_no ) as n_order_no,\n\t\t\t(d_reconcile_date) as recon_dt,\n\t\t\t(if recon_dt is null then 0 else 1 endif) as chq_pass,\n\t\t\tif ledger.c_opp_act_code='~~~~~~~~~~~~' then \n\t\t\t\t(select list(ac.c_name+' : '+string(n_amount),char(13)) from ledger ll , act_mst ac  where ac.c_code=ll.c_act_code and\n\t\t\t\t\t\tll.c_br_code=ledger.c_br_code and ll.c_year=ledger.c_year\n\t\t\t\t\t\tand ll.c_prefix=ledger.c_prefix and ll.n_tran_no=ledger.n_tran_no and \n\t\t\t\t\t\t(ledger.n_amount<0 and ll.n_amount>0 or ledger.n_amount>0 and ll.n_amount<0))\n\t\t\telse '' endif as multi_act_name\n    FROM ledger\n\t\t\t\tinner join (select c_br_code as brcode from branch_group_det where length('751') = 6 and c_code = '751' and  branch_group_det.n_cancel_flag = 0 \n            union \n            select c_code from act_mst where length('751')<> 6 and c_code >= (if '751' = 'zzz' then '751' else '751' endif ) and ( c_code <= '751' ) \n            ) brlist on brlist.brcode=ledger.c_ref_br_code  \n\t\t\tleft outer join settle_mst_header  on  ledger.c_br_code = settle_mst_header.c_br_code  and \n\t\t\t ledger.c_year = settle_mst_header.c_year  and \n          ledger.c_prefix = settle_mst_header.c_prefix  and \n          ledger.n_tran_no = settle_mst_header.n_srno  \n          left outer join grn_mst on  ledger.c_br_code = grn_mst.c_br_code  and \n\t\t\t\tledger.c_year = grn_mst.c_year  and \n\t\t\t\tledger.c_prefix = grn_mst.c_prefix  and \n\t\t\t\tledger.n_tran_no = grn_mst.n_srno\n\t\t\tleft outer join gdn_mst  on  ledger.c_br_code = gdn_mst.c_br_code  and \n\t\t\t\tledger.c_year = gdn_mst.c_year  and \n\t\t\t\tledger.c_prefix = gdn_mst.c_prefix  and \n\t\t\t\tledger.n_tran_no = gdn_mst.n_srno\n\t\t\t\tleft outer join reconcile_mst  on  ledger.c_br_code= reconcile_mst.c_br_code and ledger.c_year = reconcile_mst.c_year and\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  ledger.c_prefix = reconcile_mst.c_prefix and  ledger.n_tran_no = reconcile_mst.n_srno, \n          act_mst act_mst_a,   \n         act_mst act_mst_b  \n   WHERE \n         ( act_mst_a.c_code = ledger.c_act_code ) and \n         ( act_mst_b.c_code = ledger.c_opp_act_code ) and\t\n         ( ( ledger.d_date >= '2021-10-01' ) and\t\n         ( ledger.d_date <= getDate() ) and \n         ( ledger.c_act_code >= 'GC238' ) and \n         ( ledger.c_act_code <= 'GC238' )   and\n\t\t\t( ledger.n_amount <> 0) )\n\tUnion All\n\t SELECT ( ledger.c_br_code ) as c_br_code,\n\t\t\t( ledger.c_year ) as c_year,   \n\t\t\t( ledger.c_prefix ) as c_prefix,   \n\t\t\t( ledger.n_tran_no ) as n_tran_no,   \n\t\t\t( ledger.c_act_code ) as c_act_code,   \n\t\t\t( ledger.d_date ) as d_date,   \n\t\t\t( ledger.n_amount ) as n_amount,   \n\t\t\t( ledger.c_opp_act_code ) as c_opp_act_code,   \n\t\t\t( ledger.c_ref_br_code ) as c_ref_br_code,\n\t\t\t( settle_mst_header.c_ref_no ) as c_ref_no,   \n\t\t\tdate(settle_mst_header.d_ref_date) as d_chq_date,   \n\t\t\t( settle_mst_header.c_remark ) as c_remark,   \n\t\t\t( act_mst_a.c_name ) as c_act_name,   \n\t\t\t( act_mst_b.c_name ) as c_opp_act_name,\n\t\t\t( act_mst_a.c_add_1 ) as c_add_1,\n\t\t\t( act_mst_a.c_add_2 ) as c_add_2, \n\t\t\t( act_mst_a.c_add_3 ) as c_add_3,\n\t\t\t( act_mst_a.c_city ) as c_city,\n\t\t\t( grn_mst.n_ref_srno ) as n_ref_srno,\n\t\t\t( gdn_mst.n_order_no ) as n_order_no,\n\t\t\t(d_reconcile_date) as recon_dt,\n\t\t\t(if recon_dt is null then 0 else 1 endif) as chq_pass,\n\t\t\tif ledger.c_opp_act_code='~~~~~~~~~~~~' then \n\t\t\t\t(select list(ac.c_name+' : '+string(n_amount),char(13)) from ledger ll , act_mst ac  where ac.c_code=ll.c_act_code and\n\t\t\t\t\t\tll.c_br_code=ledger.c_br_code and ll.c_year=ledger.c_year\n\t\t\t\t\t\tand ll.c_prefix=ledger.c_prefix and ll.n_tran_no=ledger.n_tran_no and \n\t\t\t\t\t\t(ledger.n_amount<0 and ll.n_amount>0 or ledger.n_amount>0 and ll.n_amount<0))\n\t\t\telse '' endif as multi_act_name\n    FROM cogs_ledger as ledger\n\t\t\t\tinner join (select c_br_code as brcode from branch_group_det where length('751') = 6 and c_code = '751' and  branch_group_det.n_cancel_flag = 0 \n            union \n            select c_code from act_mst where length('751')<> 6 and c_code >= (if '751' = 'zzz' then '751' else '751' endif ) and ( c_code <= '751' ) \n            ) brlist on brlist.brcode=ledger.c_ref_br_code  \n\t\t\tleft outer join settle_mst_header  on  ledger.c_br_code = settle_mst_header.c_br_code  and \n\t\t\t ledger.c_year = settle_mst_header.c_year  and \n          ledger.c_prefix = settle_mst_header.c_prefix  and \n          ledger.n_tran_no = settle_mst_header.n_srno  \n          left outer join grn_mst on  ledger.c_br_code = grn_mst.c_br_code  and \n\t\t\t\tledger.c_year = grn_mst.c_year  and \n\t\t\t\tledger.c_prefix = grn_mst.c_prefix  and \n\t\t\t\tledger.n_tran_no = grn_mst.n_srno\n\t\t\tleft outer join gdn_mst  on  ledger.c_br_code = gdn_mst.c_br_code  and \n\t\t\t\tledger.c_year = gdn_mst.c_year  and \n\t\t\t\tledger.c_prefix = gdn_mst.c_prefix  and \n\t\t\t\tledger.n_tran_no = gdn_mst.n_srno\n\t\t\t\tleft outer join reconcile_mst  on  ledger.c_br_code= reconcile_mst.c_br_code and ledger.c_year = reconcile_mst.c_year and\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  ledger.c_prefix = reconcile_mst.c_prefix and  ledger.n_tran_no = reconcile_mst.n_srno, \n          act_mst act_mst_a,   \n         act_mst act_mst_b  \n   WHERE \n         ( act_mst_a.c_code = ledger.c_act_code ) and \n         ( act_mst_b.c_code = ledger.c_opp_act_code ) and\t\n         ( ( ledger.d_date >= '2021-10-01' ) and\t\n         ( ledger.d_date <= getDate() ) and \n         ( ledger.c_act_code >= 'GC238' ) and \n         ( ledger.c_act_code <= 'GC238' )   and\n\t\t\t( ledger.n_amount <> 0) ) --and :li_cogs =1\n) as cogs\nGroup By c_br_code,c_year,c_prefix,n_tran_no,c_act_code,d_date,c_opp_act_code,c_ref_br_code,c_ref_no,   \n\t\td_chq_date,c_remark,c_act_name,c_opp_act_name,c_add_1,c_add_2,c_add_3,c_city,n_ref_srno,\n\t\tn_order_no,recon_dt,multi_act_name\nUNION   ALL\n  SELECT ('') as c_br_code,\n\t\t\t('00') as c_year,   \n         ('OP') as c_prefix,   \n         ( 0 ) as c_tran_no,   \n         ( ledger.c_act_code ) as c_act_code,   \n         ( date('2021-10-21')) as d_date,   \n         sum(ledger.n_amount) as n_amount,   \n         ( '' ) as c_opp_act_code,   \n         ( '' ) as c_ref_br_code,   \n         ( '' ) as c_ref_no,   \n         date('2021-10-21') as d_chq_date,   \n         ( '' ) as c_remark,   \n         ( act_mst.c_name ) as c_act_name,   \n         ( 'Opening Balance' ) as c_opp_act_name,\n\t\t\t( act_mst.c_add_1 )  as c_add_1,\n\t\t\t( act_mst.c_add_2 )  as c_add_2, \n\t\t\t( act_mst.c_add_3 )  as c_add_3,\n\t\t\t( act_mst.c_city ) as c_city,\n\t\t\t(0) as n_ref_srno,\n\t\t\t(0) as n_order_no,\n\t\t\t( null )  as recon_dt,\n\t\t\t( 0 )  \tas chq_pass,\n\t\t\t( '' ) as multi_act_name\t,\n\t\tisnull( case when n_amount  > 0 then n_amount else 0 end,0) as Debit,\n\t\tisnull( case when n_amount  < 0 then n_amount else 0 end,0) as credit\n    FROM dba.ledger\n\t\t\t\tinner join (select c_br_code as brcode from dba.branch_group_det where length('751') = 6 and c_code = '751' and  branch_group_det.n_cancel_flag = 0 \n            union \n            select c_code from dba.act_mst where length('751')<> 6 and c_code >= (if '751' = 'zzz' then '751' else '751' endif ) and ( c_code <= '751' ) \n            ) brlist on brlist.brcode=ledger.c_ref_br_code,  \n         act_mst  \n   WHERE ( act_mst.c_code = ledger.c_act_code ) and  \n         ( ( ledger.d_date <= getDate() ) and\t\n         ( ledger.c_act_code >= 'GC238' ) and\t\n         ( ledger.c_act_code <= 'GC238' ) )   \nGROUP BY c_act_code,c_act_name,c_add_1,c_add_2,c_add_3,c_city"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "Ds_Ecogreenv2",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "RL_HelthTech_GC238_Credit",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Copy data HelthTech GC238 File to Table",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Copy data HelthTech GC238 Credit",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "SqlServerSink",
								"preCopyScript": "truncate table HelthTech_GC238_Credit_Staging",
								"tableOption": "autoCreate"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "RL_HelthTech_GC238_Credit",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "SQL_HelthTech_GC238_Credit",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Stored procedure get final Data",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy data Medicare S14278 File to Table",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Copy data HelthTech GC238 File to Table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[usp_MEDICARE_S14278_DEBIT_HELTHTECH_GC238_CREDIT]"
						},
						"linkedServiceName": {
							"referenceName": "Data360MSSQL",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Reconciliation Ledgers/Final Ledgers"
				},
				"annotations": [],
				"lastPublishTime": "2022-01-11T10:11:53Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Order Status Master')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data OrderStatus File to Order_Status_Master",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "SqlServerSink",
								"tableOption": "autoCreate"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "OrderStatusInputFile",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "OrderStatusOutputTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Order Details"
				},
				"annotations": [],
				"lastPublishTime": "2021-08-25T07:48:09Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Sample1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SybaseSource",
								"query": "select * from dba.ledger where d_date>='2021-10-22' and d_date <= today()-1"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "Ds_Ecogreenv2",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "adls_pq_EG",
								"type": "DatasetReference",
								"parameters": {
									"FileName": {
										"value": "@concat(  'FullLoad'  ,'/', 'Ledger' )",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2021-11-08T12:13:04Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Update inv det')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.FolderNameArray",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Inv Det_copy1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ParquetSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"sink": {
											"type": "SqlServerSink",
											"tableOption": "autoCreate"
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "InvDetInputFile",
											"type": "DatasetReference",
											"parameters": {
												"FolderName": {
													"value": "@item()",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "inv_det_tempOutputTable",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"FolderNameArray": {
						"type": "array",
						"defaultValue": [
							"2021-11-01",
							"2021-11-01Sync"
						]
					}
				},
				"folder": {
					"name": "Invoice"
				},
				"annotations": [],
				"lastPublishTime": "2022-02-23T11:49:43Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Upsert Incremental For inv Master')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Max Date from inv Master",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "SP truncate staging and temp table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "declare @temp as table\n(\ndates nvarchar(100)\n)\n\nDeclare \n@i int,@array varchar(200),\n@maxdate varchar(100),@days int, \n@syncdate nvarchar(100),@nextdate nvarchar(100)\n\nset @maxdate = (Select dateadd(day,1,convert(date,max(d_date))) as maxdate from inv_Master)\nset @days  = datediff(day, convert(date, @maxdate), convert(date, getdate()))\nset @i = 1\nset @syncdate= @maxdate + 'Sync'\n\ninsert into @temp\nselect @maxdate\ninsert into @temp\nselect @syncdate\n\nwhile @i <= @days-1\nBegin\n\nset @nextdate = convert(varchar,convert(date, dateadd(day, @i, @maxdate)))\nset @syncdate=  concat(convert(varchar,convert(date, dateadd(day, @i, @maxdate))) , 'Sync')\n\ninsert into @temp\nselect @nextdate\ninsert into @temp\nselect @syncdate\n\nset @i = @i + 1\n\nend\n\n\nselect * from @temp",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "OMSSqlServerTable",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "inv det and inv mst pull into temp table",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Max Date from inv Master",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Max Date from inv Master').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Copy Data Inv Det",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [
										{
											"name": "Source",
											"value": "sales/@{item()}/inv_det"
										},
										{
											"name": "Destination",
											"value": "dbo.inv_det_temp"
										}
									],
									"typeProperties": {
										"source": {
											"type": "ParquetSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"sink": {
											"type": "SqlServerSink",
											"tableOption": "autoCreate"
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "InvDetInputFile",
											"type": "DatasetReference",
											"parameters": {
												"FolderName": {
													"value": "@item().dates",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "inv_det_tempOutputTable",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								},
								{
									"name": "Copy data Inv Mst",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [
										{
											"name": "Source",
											"value": "sales/FullLoad/inv_mst"
										},
										{
											"name": "Destination",
											"value": "dbo.inv_mst_temp"
										}
									],
									"typeProperties": {
										"source": {
											"type": "ParquetSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"sink": {
											"type": "SqlServerSink",
											"tableOption": "autoCreate"
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "InvMstInputFile",
											"type": "DatasetReference",
											"parameters": {
												"FolderName": {
													"value": "@item().dates",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "inv_mst_tempOutputTable",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								}
							]
						}
					},
					{
						"name": "SP update upsert key column",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "inv det and inv mst pull into temp table",
								"dependencyConditions": [
									"Succeeded",
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[usp_Incremnetal_Load_Update_coumn_upsert_key]"
						},
						"linkedServiceName": {
							"referenceName": "Data360MSSQL",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "SP copy data temp to staging inv mst",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "SP update upsert key column",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[usp_Upsert_logic_inv_mst]"
						},
						"linkedServiceName": {
							"referenceName": "Data360MSSQL",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "SP copy data temp to staging inv det",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "SP update upsert key column",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[usp_Upsert_logic_inv_det]"
						},
						"linkedServiceName": {
							"referenceName": "Data360MSSQL",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "SP truncate staging and temp table",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[usp_Incremental_Load_inv_truncate_temp_tables]"
						},
						"linkedServiceName": {
							"referenceName": "Data360MSSQL",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Copy data invoice master",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "SP copy data temp to staging inv mst",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "SP copy data temp to staging inv det",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "select c_br_code, c_order_id, d_date, c_item_code, [Net Sales]\n,concat(c_br_code,'/', c_order_id, '/', c_item_code) as brcode_orderid_itemcode_key \n,Cost_value,\nconvert(decimal(18,2),([Net Sales]- Cost_value)) as Margin_value,\nconverT(decimal(18,2),(Spl_Disc_Amt + Disc_Amt)) as Tot_Disc_Amt,\ngetDate() as Load_DateTime\nfrom\n(select c_br_code, c_order_id, d_date,\n\tcase when c_item_code = 'COD' then null\n\t\t\telse c_item_code end as c_item_code\n\t\t\t, [Net Sales],Cost_value,Spl_Disc_Amt,Disc_Amt,Load_DateTime    from\n(select\tinv_mst_staging.c_br_code,\n\t\tinv_mst_staging.c_order_id,\n\t\tinv_mst_staging.d_date,\n\t\tinv_det_staging.c_item_code,\n\t\tsum(inv_det_staging.n_taxable_amt) as \"Net Sales\",\n\t\tconvert(decimal(18,2),((n_qty + n_qty1)* n_eff_pur_rate)) as Cost_value,\n\n\t\tcase when inv_det_staging.n_gst_enabled=1 then ((n_mrp *n_qty) -(n_sale_rate*n_qty))\n\t\t\t when ((n_mrp *n_qty) -(n_sale_rate*n_qty)) < 1 then 0 else ((n_mrp *n_qty) -(n_sale_rate*n_qty)) end as Spl_Disc_Amt,\n\n\t\tisnull((n_sale_rate*(n_qty + n_qty1)) * (case when n_non_taxable_ret =0 then 0 else n_disc_rs /n_non_taxable_ret end),0) + convert(decimal(18,2),((n_sale_rate*(n_qty + n_qty1))*n_disc_per/100)) as Disc_Amt,\n\t\tgetDate() as Load_DateTime\n\t\t\nfrom\t\tdbo.inv_det_staging\ninner join \n\t\t\tdbo.inv_mst_staging\n\t\t\ton \n\t\t\tdbo.inv_det_staging.c_br_code = inv_mst_staging.c_br_code\n\tand inv_det_staging.c_prefix = inv_mst_staging.c_prefix\n\tand inv_det_staging.c_year = inv_mst_staging.c_year\n\tand inv_det_staging.n_srno = inv_mst_staging.n_srno\nwhere inv_mst_staging.c_patient IS NOT NULL and  inv_mst_staging.c_cust_code = 'GC93' or inv_mst_staging.c_cust_code = 'GC793' or inv_mst_staging.c_cust_code = '751' and inv_det_staging.n_cancel_flag = 0 \ngroup by inv_mst_staging.c_br_code, \n        inv_mst_staging.c_order_id,\n\t\tinv_mst_staging.d_date,\n\t\t inv_det_staging.c_item_code,\n\t\t n_qty,n_qty1,n_eff_pur_rate,\n\t\t inv_det_staging.n_gst_enabled,n_mrp,n_sale_rate,n_non_taxable_ret,n_disc_rs,n_disc_per) a) b\n",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "SqlServerSink",
								"tableOption": "autoCreate"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "c_br_code",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "c_br_code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "c_order_id",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "c_order_id",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "d_date",
											"type": "DateTime",
											"physicalType": "datetime2"
										},
										"sink": {
											"name": "d_date",
											"type": "DateTime",
											"physicalType": "datetime2"
										}
									},
									{
										"source": {
											"name": "c_item_code",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "c_item_code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Net Sales",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "Net Sales",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "brcode_orderid_itemcode_key",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "brcode_orderid_itemcode_key",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Cost_value",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 2,
											"precision": 18
										},
										"sink": {
											"name": "Cost_value",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "Margin_value",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 2,
											"precision": 18
										},
										"sink": {
											"name": "Margin_value",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "Tot_Disc_Amt",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 2,
											"precision": 18
										},
										"sink": {
											"name": "Tot_Disc_Amt",
											"type": "Double",
											"physicalType": "float"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "InvDetandInvMstInputTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Inv_Master",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Copy data Inv_Mst_Staging to Inv_Mst",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Copy data invoice master",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "SqlServerSink",
								"tableOption": "autoCreate"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "InvMstOutputTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "InvMstTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Copy data Inv_Det_Staging to Inv_Det",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Copy data invoice master",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "SqlServerSink",
								"tableOption": "autoCreate"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "InvDetOutputTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "InvDetTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"Folders": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "Invoice"
				},
				"annotations": [],
				"lastPublishTime": "2022-02-23T11:49:43Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Upsert Stock mst and stock')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Datewise folder",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "declare @invtemp as table\n(\ndates nvarchar(100)\n)\n\nDeclare \n@i int,\n@maxdate varchar(100),@days int, \n@syncdate nvarchar(100),@nextdate nvarchar(100)\n\nset @maxdate = (Select dateadd(day,-1,convert(date,GETDATE())) as maxdate)\nset @days  = datediff(day, convert(date, @maxdate), convert(date, getdate()))\n\nset @i = 1\nset @syncdate= @maxdate + 'Sync'\n\ninsert into @invtemp\nselect @maxdate\ninsert into @invtemp\nselect @syncdate\n\nwhile @i <= @days-1\nBegin\n\nset @nextdate = convert(varchar,convert(date, dateadd(day, @i, @maxdate)))\nset @syncdate=  concat(convert(varchar,convert(date, dateadd(day, @i, @maxdate))) , 'Sync')\n\ninsert into @invtemp\nselect @nextdate\ninsert into @invtemp\nselect @syncdate\n\nset @i = @i + 1\n\nend\n\n\nselect * from @invtemp",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "OMSSqlServerTable",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Datewise folder",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Datewise folder').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Copy data stock_mst",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ParquetSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"sink": {
											"type": "SqlServerSink",
											"tableOption": "autoCreate"
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "c_item_code",
														"type": "String",
														"physicalType": "UTF8"
													},
													"sink": {
														"name": "c_item_code",
														"type": "String",
														"physicalType": "nvarchar"
													}
												},
												{
													"source": {
														"name": "c_batch_no",
														"type": "String",
														"physicalType": "UTF8"
													},
													"sink": {
														"name": "c_batch_no",
														"type": "String",
														"physicalType": "nvarchar"
													}
												},
												{
													"source": {
														"name": "d_exp_dt",
														"type": "DateTime",
														"physicalType": "INT96"
													},
													"sink": {
														"name": "d_exp_dt",
														"type": "DateTime",
														"physicalType": "datetime2"
													}
												},
												{
													"source": {
														"name": "n_mrp",
														"type": "Decimal",
														"physicalType": "DECIMAL"
													},
													"sink": {
														"name": "n_mrp",
														"type": "Double",
														"physicalType": "float"
													}
												},
												{
													"source": {
														"name": "n_pur_rate",
														"type": "Decimal",
														"physicalType": "DECIMAL"
													},
													"sink": {
														"name": "n_pur_rate",
														"type": "Double",
														"physicalType": "float"
													}
												},
												{
													"source": {
														"name": "n_sale_rate",
														"type": "Decimal",
														"physicalType": "DECIMAL"
													},
													"sink": {
														"name": "n_sale_rate",
														"type": "Double",
														"physicalType": "float"
													}
												},
												{
													"source": {
														"name": "n_eff_pur_rate",
														"type": "Decimal",
														"physicalType": "DECIMAL"
													},
													"sink": {
														"name": "n_eff_pur_rate",
														"type": "Double",
														"physicalType": "float"
													}
												},
												{
													"source": {
														"name": "n_tax_suffer",
														"type": "Decimal",
														"physicalType": "DECIMAL"
													},
													"sink": {
														"name": "n_tax_suffer",
														"type": "Double",
														"physicalType": "float"
													}
												},
												{
													"source": {
														"name": "n_inc_exc_tax",
														"type": "Decimal",
														"physicalType": "DECIMAL"
													},
													"sink": {
														"name": "n_inc_exc_tax",
														"type": "Double",
														"physicalType": "float"
													}
												},
												{
													"source": {
														"name": "n_add_val",
														"type": "Decimal",
														"physicalType": "DECIMAL"
													},
													"sink": {
														"name": "n_add_val",
														"type": "Double",
														"physicalType": "float"
													}
												},
												{
													"source": {
														"name": "n_lock",
														"type": "Decimal",
														"physicalType": "DECIMAL"
													},
													"sink": {
														"name": "n_lock",
														"type": "Double",
														"physicalType": "float"
													}
												},
												{
													"source": {
														"name": "n_mrp_box",
														"type": "Decimal",
														"physicalType": "DECIMAL"
													},
													"sink": {
														"name": "n_mrp_box",
														"type": "Double",
														"physicalType": "float"
													}
												},
												{
													"source": {
														"name": "n_pur_rate_box",
														"type": "Decimal",
														"physicalType": "DECIMAL"
													},
													"sink": {
														"name": "n_pur_rate_box",
														"type": "Double",
														"physicalType": "float"
													}
												},
												{
													"source": {
														"name": "n_qty_per_box",
														"type": "Decimal",
														"physicalType": "DECIMAL"
													},
													"sink": {
														"name": "n_qty_per_box",
														"type": "Double",
														"physicalType": "float"
													}
												},
												{
													"source": {
														"name": "d_ldate",
														"type": "DateTime",
														"physicalType": "INT96"
													},
													"sink": {
														"name": "d_ldate",
														"type": "DateTime",
														"physicalType": "datetime2"
													}
												},
												{
													"source": {
														"name": "d_adate",
														"type": "DateTime",
														"physicalType": "INT96"
													},
													"sink": {
														"name": "d_adate",
														"type": "DateTime",
														"physicalType": "datetime2"
													}
												},
												{
													"source": {
														"name": "c_createuser",
														"type": "String",
														"physicalType": "UTF8"
													},
													"sink": {
														"name": "c_createuser",
														"type": "String",
														"physicalType": "nvarchar"
													}
												},
												{
													"source": {
														"name": "n_audited",
														"type": "Decimal",
														"physicalType": "DECIMAL"
													},
													"sink": {
														"name": "n_audited",
														"type": "Double",
														"physicalType": "float"
													}
												},
												{
													"source": {
														"name": "n_predefined",
														"type": "Decimal",
														"physicalType": "DECIMAL"
													},
													"sink": {
														"name": "n_predefined",
														"type": "Double",
														"physicalType": "float"
													}
												},
												{
													"source": {
														"name": "n_ptr_box",
														"type": "Decimal",
														"physicalType": "DECIMAL"
													},
													"sink": {
														"name": "n_ptr_box",
														"type": "Double",
														"physicalType": "float"
													}
												},
												{
													"source": {
														"name": "n_ptr",
														"type": "Decimal",
														"physicalType": "DECIMAL"
													},
													"sink": {
														"name": "n_ptr",
														"type": "Double",
														"physicalType": "float"
													}
												},
												{
													"source": {
														"name": "t_ltime",
														"type": "DateTime",
														"physicalType": "INT96"
													},
													"sink": {
														"name": "t_ltime",
														"type": "DateTime",
														"physicalType": "datetime2"
													}
												},
												{
													"source": {
														"name": "c_mfac_sh_name",
														"type": "String",
														"physicalType": "UTF8"
													},
													"sink": {
														"name": "c_mfac_sh_name",
														"type": "String",
														"physicalType": "nvarchar"
													}
												},
												{
													"source": {
														"name": "n_permanent_lock",
														"type": "Decimal",
														"physicalType": "DECIMAL"
													},
													"sink": {
														"name": "n_permanent_lock",
														"type": "Double",
														"physicalType": "float"
													}
												},
												{
													"source": {
														"name": "c_note",
														"type": "String",
														"physicalType": "UTF8"
													},
													"sink": {
														"name": "c_note",
														"type": "String",
														"physicalType": "nvarchar"
													}
												},
												{
													"source": {
														"name": "c_brand_name",
														"type": "String",
														"physicalType": "UTF8"
													},
													"sink": {
														"name": "c_brand_name",
														"type": "String",
														"physicalType": "nvarchar"
													}
												},
												{
													"source": {
														"name": "c_mfac_name",
														"type": "String",
														"physicalType": "UTF8"
													},
													"sink": {
														"name": "c_mfac_name",
														"type": "String",
														"physicalType": "nvarchar"
													}
												},
												{
													"source": {
														"name": "d_mfg_dt",
														"type": "DateTime",
														"physicalType": "INT96"
													},
													"sink": {
														"name": "d_mfg_dt",
														"type": "DateTime",
														"physicalType": "datetime2"
													}
												},
												{
													"source": {
														"name": "c_modiuser",
														"type": "String",
														"physicalType": "UTF8"
													},
													"sink": {
														"name": "c_modiuser",
														"type": "String",
														"physicalType": "nvarchar"
													}
												},
												{
													"source": {
														"name": "n_qc_per1",
														"type": "Decimal",
														"physicalType": "DECIMAL"
													},
													"sink": {
														"name": "n_qc_per1",
														"type": "Double",
														"physicalType": "float"
													}
												},
												{
													"source": {
														"name": "n_qc_per2",
														"type": "Decimal",
														"physicalType": "DECIMAL"
													},
													"sink": {
														"name": "n_qc_per2",
														"type": "Double",
														"physicalType": "float"
													}
												}
											],
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "StockMstInputFile",
											"type": "DatasetReference",
											"parameters": {
												"FolderName": {
													"value": "@item().dates",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "Stock_mst_tempTable",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								},
								{
									"name": "Copy data Stock",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ParquetSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"sink": {
											"type": "SqlServerSink",
											"tableOption": "autoCreate"
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "EAStock_InputFile",
											"type": "DatasetReference",
											"parameters": {
												"FolderName": {
													"value": "@item().dates",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "EAStockOutPutTable",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								}
							]
						}
					},
					{
						"name": "SP update upsert key column",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "ForEach1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[usp_upsert_stock_and_stock_mst_update_upsert_key]"
						},
						"linkedServiceName": {
							"referenceName": "Data360MSSQL",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Expiry Analysis"
				},
				"annotations": [],
				"lastPublishTime": "2021-12-09T05:54:38Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/update inv mst')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.FolderNameArray",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Copy data Inv Mst",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ParquetSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"sink": {
											"type": "SqlServerSink",
											"tableOption": "autoCreate"
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "InvMstInputFile",
											"type": "DatasetReference",
											"parameters": {
												"FolderName": {
													"value": "@item()",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "inv_mst_tempOutputTable",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"FolderNameArray": {
						"type": "array",
						"defaultValue": [
							"2021-11-01",
							"2021-11-01Sync"
						]
					}
				},
				"folder": {
					"name": "Invoice"
				},
				"annotations": [],
				"lastPublishTime": "2022-02-23T11:49:43Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Control Pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Channel Master",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Full Load Channel Master",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Product Master",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Full Load Product Master",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Store Master",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Full Load Store Master",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Incremental Load Order Details",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Channel Master",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Product Master",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Store Master",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Incremental Load Order Details",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Send Mail Order Deatils",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Incremental Load Order Details",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://prod-03.centralindia.logic.azure.com:443/workflows/464eb5db81654a119fbde64f7815052d/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=mF2jqmQWzHvsdtjGxGf4ajGCuU9BPmu1x3S0gtBtHF8",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "{\n\"Process\":\"Order Details\",\n\"PipelineName\":\"@{pipeline().Pipeline}\",\n\"DataFactoryName\":\"@{pipeline().DataFactory}\",\n\"ErrorMessage\":\"@{activity('Incremental Load Order Details').output.Error.Message}\",\n\"Runid\":\"@{pipeline().RunId}\"\n}",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Incremental Load Amazon Order Details",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Incremental Load Order Details",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Incremental Load Amazon Order Details Data",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Send Mail Amazon",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Incremental Load Amazon Order Details",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://prod-03.centralindia.logic.azure.com:443/workflows/464eb5db81654a119fbde64f7815052d/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=mF2jqmQWzHvsdtjGxGf4ajGCuU9BPmu1x3S0gtBtHF8",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "{\n\"Process\":\"Audience\",\n\"PipelineName\":\"@{pipeline().Pipeline}\",\n\"DataFactoryName\":\"@{pipeline().DataFactory}\",\n\"ErrorMessage\":\"@{activity('Incremental Load Amazon Order Details').output.Error.Message}\",\n\"Runid\":\"@{pipeline().RunId}\"\n}",
								"type": "Expression"
							}
						}
					},
					{
						"name": "incremental Load Cancle Order Details",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Incremental Load Amazon Order Details",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Incremental Load Cancel Order Details",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Incremental Load"
				},
				"annotations": [],
				"lastPublishTime": "2021-12-04T12:40:34Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Appsflyer Data Incremental Load')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "Incremental Load Appsflyer Master",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2021-10-29T09:15:00",
						"timeZone": "India Standard Time"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Daily T-7 Amzaon Order Details Incremental Load')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "Daily T-7 Amzaon Order Details Incremental Load",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2022-02-24T09:15:00",
						"timeZone": "India Standard Time",
						"schedule": {
							"minutes": [
								15
							],
							"hours": [
								9
							]
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Daily T-7 Cancel Order Details Incremental Load')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "Daily T-7 Cancel Order Details Incremental Load",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2022-02-24T09:15:00",
						"timeZone": "India Standard Time",
						"schedule": {
							"minutes": [
								15
							],
							"hours": [
								9
							]
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Daily T-7 Invoice Master Incremental Load')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "Daily T-7 Invoice Master Incremental Load",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2022-02-23T09:15:00",
						"timeZone": "India Standard Time",
						"schedule": {
							"minutes": [
								0
							],
							"hours": [
								8
							]
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Daily T-7 OMS Order Details Incremental Load')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "Daily T-7 OMS Order Details Incremental Load",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2022-02-24T09:15:00",
						"timeZone": "India Standard Time",
						"schedule": {
							"minutes": [
								15
							],
							"hours": [
								9
							]
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Full Load Channel Master')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "Full Load Channel Master",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2022-02-24T09:15:00",
						"timeZone": "India Standard Time"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Full Load EG Product Master')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "Full Load EG Product Master",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2021-12-09T09:15:00",
						"timeZone": "India Standard Time"
					}
				}
			},
			"dependsOn": []
		}
	]
}